name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - windows
        - linux
        - macos
        - test-only

env:
  PYTHON_VERSION: '3.11'
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for changelog generation
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev python3-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov flake8 mypy black isort
    
    - name: Run linting
      run: |
        echo "Running flake8..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
        echo "Running black..."
        black --check --diff .
        
        echo "Running isort..."
        isort --check-only --diff .
        
        echo "Running mypy..."
        mypy --ignore-missing-imports .
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
        pytest tests/ --junitxml=test-results.xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results.xml
          htmlcov/
          .coverage

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: test
    if: github.event_name == 'push' || github.event.inputs.build_type == 'windows' || github.event.inputs.build_type == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Download Inno Setup
      run: |
        $url = "https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe"
        $output = "innosetup.exe"
        Invoke-WebRequest -Uri $url -OutFile $output
        Start-Process -FilePath $output -ArgumentList "/SILENT" -Wait
    
    - name: Build executable
      run: |
        python scripts/build_installer.py
    
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ChatGPTPlusClone-Windows
        path: |
          dist/ChatGPTPlusClone.exe
          installer/output/*.exe
        retention-days: 30

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event.inputs.build_type == 'linux' || github.event.inputs.build_type == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev python3-dev
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build executable
      run: |
        python scripts/build_installer.py
    
    - name: Create AppImage
      run: |
        # Install AppImage tools
        wget -c "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
        chmod +x appimagetool-x86_64.AppImage
        
        # Create AppImage
        ./appimagetool-x86_64.AppImage dist/AppDir dist/ChatGPTPlusClone.AppImage
    
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ChatGPTPlusClone-Linux
        path: |
          dist/ChatGPTPlusClone
          dist/ChatGPTPlusClone.AppImage
        retention-days: 30

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    needs: test
    if: github.event_name == 'push' || github.event.inputs.build_type == 'macos' || github.event.inputs.build_type == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build executable
      run: |
        python scripts/build_installer.py
    
    - name: Create DMG
      run: |
        # Install create-dmg
        brew install create-dmg
        
        # Create DMG
        create-dmg \
          --volname "ChatGPTPlusClone" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "ChatGPTPlusClone.app" 200 190 \
          --hide-extension "ChatGPTPlusClone.app" \
          --app-drop-link 600 185 \
          "dist/ChatGPTPlusClone.dmg" \
          "dist/"
    
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ChatGPTPlusClone-macOS
        path: |
          dist/ChatGPTPlusClone
          dist/ChatGPTPlusClone.dmg
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux, build-macos]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Generate changelog
      run: |
        # Generate changelog from git commits
        git log --pretty=format:"* %s" $(git describe --tags --abbrev=0)..HEAD > CHANGELOG.md
        echo "## Release Notes" | cat - CHANGELOG.md > temp && mv temp CHANGELOG.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body_path: CHANGELOG.md
        files: |
          artifacts/ChatGPTPlusClone-Windows/ChatGPTPlusClone.exe
          artifacts/ChatGPTPlusClone-Windows/*.exe
          artifacts/ChatGPTPlusClone-Linux/ChatGPTPlusClone
          artifacts/ChatGPTPlusClone-Linux/ChatGPTPlusClone.AppImage
          artifacts/ChatGPTPlusClone-macOS/ChatGPTPlusClone
          artifacts/ChatGPTPlusClone-macOS/ChatGPTPlusClone.dmg
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [release]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.release.result == 'success'
      run: |
        echo "üéâ Release ${{ github.ref_name }} created successfully!"
        echo "Check the releases page for downloads."
    
    - name: Notify on failure
      if: needs.release.result == 'failure'
      run: |
        echo "‚ùå Release creation failed!"
        echo "Check the logs for details."