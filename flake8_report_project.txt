plugins/batch_processor.py:6:1: E302 expected 2 blank lines, found 1
class BatchProcessorPlugin(PluginBase):
^
plugins/batch_processor.py:10:80: E501 line too long (97 > 79 characters)
    def run(self, input_dir: str, agent, output_dir: str = "output", **kwargs) -> Dict[str, Any]:
                                                                               ^
plugins/batch_processor.py:27:23: W291 trailing whitespace
        return results                       ^
plugins/batch_processor.py:27:24: W292 no newline at end of file
        return results                        ^
plugins/image_caption_exporter.py:7:1: E302 expected 2 blank lines, found 1
class ImageCaptionExporterPlugin(PluginBase):
^
plugins/image_caption_exporter.py:9:80: E501 line too long (101 > 79 characters)
    """
    Plugin to caption all images in a folder using a vision-language agent and export results to CSV.
    """
       
                                                                       ^
plugins/image_caption_exporter.py:11:80: E501 line too long (103 > 79 characters)
    def run(self, input_dir: str, agent, output_csv: str = "captions.csv", **kwargs) -> Dict[str, Any]:
                                                                               ^
plugins/image_caption_exporter.py:17:80: E501 line too long (99 > 79 characters)
                result = agent.process({'image': image, 'prompt': 'Describe this image', **kwargs})
                                                                               ^
plugins/image_caption_exporter.py:18:80: E501 line too long (87 > 79 characters)
                caption = result['result'] if isinstance(result, dict) else str(result)
                                                                               ^
plugins/image_caption_exporter.py:21:80: E501 line too long (81 > 79 characters)
                results.append({'file': img_file.name, 'caption': f'error: {e}'})
                                                                               ^
plugins/image_caption_exporter.py:26:65: W291 trailing whitespace
        return {'output_csv': output_csv, 'count': len(results)}                                                                 ^
plugins/image_caption_exporter.py:26:66: W292 no newline at end of file
        return {'output_csv': output_csv, 'count': len(results)}                                                                  ^
plugins/marketplace.py:6:54: W291 trailing whitespace
# TODO: Implement marketplace integration for plugins                                                      ^
plugins/marketplace.py:6:55: W292 no newline at end of file
# TODO: Implement marketplace integration for plugins                                                       ^
plugins/plugin_base.py:3:80: E501 line too long (110 > 79 characters)
    """
    Base class for all AISIS plugins. All plugins must inherit from this class and implement the run() method.
    """
       
                                                                       ^
plugins/plugin_base.py:12:78: W291 trailing whitespace
        raise NotImplementedError("Plugins must implement the run() method.")                                                                              ^
plugins/plugin_base.py:12:79: W292 no newline at end of file
        raise NotImplementedError("Plugins must implement the run() method.")                                                                               ^
plugins/plugin_manager.py:10:1: E302 expected 2 blank lines, found 1
class PluginManager:
^
plugins/plugin_manager.py:15:80: E501 line too long (81 > 79 characters)
        self.plugins_dir = plugins_dir or os.path.join(os.path.dirname(__file__))
                                                                               ^
plugins/plugin_manager.py:25:80: E501 line too long (111 > 79 characters)
            if not fname.endswith('.py') or fname in ('plugin_manager.py', 'plugin_base.py', 'marketplace.py'):
                                                                               ^
plugins/plugin_manager.py:29:80: E501 line too long (83 > 79 characters)
            spec = importlib.util.spec_from_file_location(plugin_name, plugin_path)
                                                                               ^
plugins/plugin_manager.py:35:80: E501 line too long (103 > 79 characters)
                    if isinstance(obj, type) and issubclass(obj, PluginBase) and obj is not PluginBase:
                                                                               ^
plugins/plugin_manager.py:59:23: W291 trailing whitespace
        return results                       ^
plugins/plugin_manager.py:59:24: W292 no newline at end of file
        return results                        ^
plugins/sample_plugin.py:3:1: E302 expected 2 blank lines, found 1
class SamplePlugin(PluginBase):
^
plugins/sample_plugin.py:9:39: W291 trailing whitespace
        return "SamplePlugin executed"                                       ^
plugins/sample_plugin.py:9:40: W292 no newline at end of file
        return "SamplePlugin executed"                                        ^
scripts/dev_onboarding.py:4:1: E302 expected 2 blank lines, found 1
def check_python():
^
scripts/dev_onboarding.py:10:1: E302 expected 2 blank lines, found 1
def install_dev_deps():
^
scripts/dev_onboarding.py:15:1: E302 expected 2 blank lines, found 1
def main():
^
scripts/dev_onboarding.py:20:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
scripts/dev_onboarding.py:21:11: W291 trailing whitespace
    main()           ^
scripts/dev_onboarding.py:21:12: W292 no newline at end of file
    main()            ^
scripts/download_models.py:6:1: F401 'os' imported but unused
import os
^
scripts/download_models.py:7:1: F401 'sys' imported but unused
import sys
^
scripts/download_models.py:10:1: F401 'aiofiles' imported but unused
import aiofiles
^
scripts/download_models.py:12:1: F401 'typing.Dict' imported but unused
from typing import Dict, List, Optional, Callable
^
scripts/download_models.py:12:1: F401 'typing.List' imported but unused
from typing import Dict, List, Optional, Callable
^
scripts/download_models.py:14:1: F401 'hashlib' imported but unused
import hashlib
^
scripts/download_models.py:16:1: F401 'tqdm.tqdm' imported but unused
from tqdm import tqdm
^
scripts/download_models.py:24:80: E501 line too long (99 > 79 characters)
                "url": "https://huggingface.co/openai/whisper-tiny/resolve/main/model.safetensors",
                                                                               ^
scripts/download_models.py:31:80: E501 line too long (100 > 79 characters)
                "url": "https://huggingface.co/openai/whisper-small/resolve/main/model.safetensors",
                                                                               ^
scripts/download_models.py:38:80: E501 line too long (99 > 79 characters)
                "url": "https://huggingface.co/openai/whisper-base/resolve/main/model.safetensors",
                                                                               ^
scripts/download_models.py:49:80: E501 line too long (119 > 79 characters)
                "url": "https://huggingface.co/TheBloke/Llama-2-7B-Chat-GGUF/resolve/main/llama-2-7b-chat.Q4_K_M.gguf",
                                                                               ^
scripts/download_models.py:56:80: E501 line too long (95 > 79 characters)
                "url": "https://huggingface.co/microsoft/phi-2/resolve/main/model.safetensors",
                                                                               ^
scripts/download_models.py:67:80: E501 line too long (138 > 79 characters)
                "url": "https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0/resolve/main/diffusion_pytorch_model.safetensors",
                                                                               ^
scripts/download_models.py:70:80: E501 line too long (80 > 79 characters)
                "description": "Stable Diffusion XL for high-quality generation"
                                                                               ^
scripts/download_models.py:78:80: E501 line too long (127 > 79 characters)
                "url": "https://huggingface.co/CompVis/stable-diffusion-v1-4/resolve/main/diffusion_pytorch_model.safetensors",
                                                                               ^
scripts/download_models.py:85:80: E501 line too long (117 > 79 characters)
                "url": "https://huggingface.co/caidas/swin2SR-realworld-sr-x4-64-bsrgan-psnr/resolve/main/model.pth",
                                                                               ^
scripts/download_models.py:94:1: E302 expected 2 blank lines, found 1
def setup_logging():
^
scripts/download_models.py:102:1: E302 expected 2 blank lines, found 1
def create_model_directories():
^
scripts/download_models.py:107:27: W291 trailing whitespace
        base_dir / "bark", 
                          ^
scripts/download_models.py:116:1: W293 blank line contains whitespace
    
^
scripts/download_models.py:121:1: E302 expected 2 blank lines, found 1
async def download_file_with_progress(
^
scripts/download_models.py:122:14: W291 trailing whitespace
    url: str, 
             ^
scripts/download_models.py:123:21: W291 trailing whitespace
    file_path: Path, 
                    ^
scripts/download_models.py:129:1: W293 blank line contains whitespace
    """
    Download a file with progress tracking and resume capability
    
    Args:
        url: URL to download from
        file_path: Local path to save file
        size_mb: Expected file size in MB
        progress_callback: Optional callback for progress updates
        
    Returns:
        bool: True if download successful
    """
^
scripts/download_models.py:135:1: W293 blank line contains whitespace
    """
    Download a file with progress tracking and resume capability
    
    Args:
        url: URL to download from
        file_path: Local path to save file
        size_mb: Expected file size in MB
        progress_callback: Optional callback for progress updates
        
    Returns:
        bool: True if download successful
    """
^
scripts/download_models.py:142:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:147:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:152:80: E501 line too long (85 > 79 characters)
                    logger.error(f"Failed to download {url}: HTTP {response.status}")
                                                                               ^
scripts/download_models.py:154:1: W293 blank line contains whitespace
                
^
scripts/download_models.py:157:1: W293 blank line contains whitespace
                
^
scripts/download_models.py:162:1: W293 blank line contains whitespace
                        
^
scripts/download_models.py:166:1: W293 blank line contains whitespace
                        
^
scripts/download_models.py:169:80: E501 line too long (91 > 79 characters)
                            logger.info(f"Downloaded {downloaded_size}/{total_size} bytes")
                                                                               ^
scripts/download_models.py:170:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:173:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:181:1: E302 expected 2 blank lines, found 1
async def download_whisper_models():
^
scripts/download_models.py:184:1: W293 blank line contains whitespace
    
^
scripts/download_models.py:187:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:190:1: W293 blank line contains whitespace
            
^
scripts/download_models.py:192:1: W293 blank line contains whitespace
            
^
scripts/download_models.py:195:1: W293 blank line contains whitespace
            
^
scripts/download_models.py:202:1: W293 blank line contains whitespace
            
^
scripts/download_models.py:207:1: W293 blank line contains whitespace
                
^
scripts/download_models.py:211:1: E302 expected 2 blank lines, found 1
async def download_bark_models():
^
scripts/download_models.py:215:80: E501 line too long (80 > 79 characters)
        # Bark models are typically downloaded automatically by the bark library
                                                                               ^
scripts/download_models.py:219:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:227:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:230:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:231:80: E501 line too long (82 > 79 characters)
        logger.info("Bark TTS setup complete - models will download on first use")
                                                                               ^
scripts/download_models.py:232:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:236:1: E302 expected 2 blank lines, found 1
async def download_llm_models():
^
scripts/download_models.py:241:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:244:1: W293 blank line contains whitespace
            
^
scripts/download_models.py:245:80: E501 line too long (89 > 79 characters)
            file_path = Path(model_config["local_path"]) / f"{model_config['name']}.gguf"
                                                                               ^
scripts/download_models.py:246:1: W293 blank line contains whitespace
            
^
scripts/download_models.py:249:1: W293 blank line contains whitespace
            
^
scripts/download_models.py:256:1: W293 blank line contains whitespace
            
^
scripts/download_models.py:261:1: W293 blank line contains whitespace
                
^
scripts/download_models.py:265:1: E302 expected 2 blank lines, found 1
async def download_diffusion_models():
^
scripts/download_models.py:270:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:273:1: W293 blank line contains whitespace
            
^
scripts/download_models.py:275:1: W293 blank line contains whitespace
            
^
scripts/download_models.py:278:1: W293 blank line contains whitespace
            
^
scripts/download_models.py:285:1: W293 blank line contains whitespace
            
^
scripts/download_models.py:290:1: W293 blank line contains whitespace
                
^
scripts/download_models.py:294:1: E302 expected 2 blank lines, found 1
async def download_restoration_models():
^
scripts/download_models.py:299:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:302:1: W293 blank line contains whitespace
            
^
scripts/download_models.py:304:1: W293 blank line contains whitespace
            
^
scripts/download_models.py:307:1: W293 blank line contains whitespace
            
^
scripts/download_models.py:314:1: W293 blank line contains whitespace
            
^
scripts/download_models.py:319:1: W293 blank line contains whitespace
                
^
scripts/download_models.py:323:1: E302 expected 2 blank lines, found 1
async def download_style_models():
^
scripts/download_models.py:330:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:338:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:341:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:343:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:347:1: E302 expected 2 blank lines, found 1
async def download_semantic_models():
^
scripts/download_models.py:354:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:362:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:365:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:367:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:371:1: E302 expected 2 blank lines, found 1
async def download_retouch_models():
^
scripts/download_models.py:378:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:386:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:389:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:391:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:395:1: E302 expected 2 blank lines, found 1
async def download_nerf_models():
^
scripts/download_models.py:402:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:410:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:413:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:415:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:419:1: E302 expected 2 blank lines, found 1
def create_model_index():
^
scripts/download_models.py:424:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:429:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:435:1: W293 blank line contains whitespace
                
^
scripts/download_models.py:437:80: E501 line too long (112 > 79 characters)
                    if model_file.is_file() and model_file.suffix in ['.pth', '.safetensors', '.gguf', '.json']:
                                                                               ^
scripts/download_models.py:441:80: E501 line too long (80 > 79 characters)
                            "size_mb": model_file.stat().st_size / (1024 * 1024)
                                                                               ^
scripts/download_models.py:443:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:446:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:448:1: W293 blank line contains whitespace
        
^
scripts/download_models.py:452:1: E302 expected 2 blank lines, found 1
async def main():
^
scripts/download_models.py:455:1: W293 blank line contains whitespace
    
^
scripts/download_models.py:458:1: W293 blank line contains whitespace
    
^
scripts/download_models.py:471:1: W293 blank line contains whitespace
    
^
scripts/download_models.py:474:1: W293 blank line contains whitespace
    
^
scripts/download_models.py:478:1: W293 blank line contains whitespace
    
^
scripts/download_models.py:480:1: W293 blank line contains whitespace
    
^
scripts/download_models.py:483:1: W293 blank line contains whitespace
    
^
scripts/download_models.py:485:80: E501 line too long (96 > 79 characters)
    logger.info("Note: Some models are placeholders and will be implemented in future versions")
                                                                               ^
scripts/download_models.py:489:24: W291 trailing whitespace
    asyncio.run(main())                        ^
scripts/download_models.py:489:25: W292 no newline at end of file
    asyncio.run(main())                         ^
scripts/setup_environment.py:6:1: F401 'os' imported but unused
import os
^
scripts/setup_environment.py:14:1: E302 expected 2 blank lines, found 1
def check_python_version() -> bool:
^
scripts/setup_environment.py:18:80: E501 line too long (91 > 79 characters)
        logger.info(f"Python {version.major}.{version.minor}.{version.micro} - Compatible")
                                                                               ^
scripts/setup_environment.py:21:80: E501 line too long (103 > 79 characters)
        logger.error(f"Python {version.major}.{version.minor}.{version.micro} - Requires Python 3.10+")
                                                                               ^
scripts/setup_environment.py:24:1: E302 expected 2 blank lines, found 1
def check_cuda_availability() -> bool:
^
scripts/setup_environment.py:30:1: W293 blank line contains whitespace
        
^
scripts/setup_environment.py:36:80: E501 line too long (81 > 79 characters)
        logger.warning("CUDA not available - will use CPU (performance limited)")
                                                                               ^
scripts/setup_environment.py:39:1: E302 expected 2 blank lines, found 1
def create_directories() -> None:
^
scripts/setup_environment.py:43:17: W291 trailing whitespace
        "cache", 
                ^
scripts/setup_environment.py:50:1: W293 blank line contains whitespace
    
^
scripts/setup_environment.py:55:1: E302 expected 2 blank lines, found 1
def install_dependencies() -> bool:
^
scripts/setup_environment.py:59:1: W293 blank line contains whitespace
        
^
scripts/setup_environment.py:63:56: W291 trailing whitespace
                sys.executable, "-m", "pip", "install", 
                                                       ^
scripts/setup_environment.py:64:54: W291 trailing whitespace
                "torch", "torchvision", "torchaudio", 
                                                     ^
scripts/setup_environment.py:67:1: W293 blank line contains whitespace
        
^
scripts/setup_environment.py:72:1: W293 blank line contains whitespace
        
^
scripts/setup_environment.py:75:1: W293 blank line contains whitespace
        
^
scripts/setup_environment.py:80:1: E302 expected 2 blank lines, found 1
def download_initial_models() -> None:
^
scripts/setup_environment.py:83:1: W293 blank line contains whitespace
    
^
scripts/setup_environment.py:85:1: W293 blank line contains whitespace
    
^
scripts/setup_environment.py:91:1: W293 blank line contains whitespace
    
^
scripts/setup_environment.py:95:1: E302 expected 2 blank lines, found 1
def create_config_files() -> None:
^
scripts/setup_environment.py:98:1: W293 blank line contains whitespace
    
^
scripts/setup_environment.py:107:32: W291 trailing whitespace
            "name": "friendly", 
                               ^
scripts/setup_environment.py:112:1: W293 blank line contains whitespace
    
^
scripts/setup_environment.py:116:1: W293 blank line contains whitespace
    
^
scripts/setup_environment.py:119:1: E302 expected 2 blank lines, found 1
def setup_git_hooks() -> None:
^
scripts/setup_environment.py:122:80: E501 line too long (83 > 79 characters)
        subprocess.run([sys.executable, "-m", "pre_commit", "install"], check=True)
                                                                               ^
scripts/setup_environment.py:127:1: E302 expected 2 blank lines, found 1
def main() -> int:
^
scripts/setup_environment.py:130:1: W293 blank line contains whitespace
    
^
scripts/setup_environment.py:134:1: W293 blank line contains whitespace
    
^
scripts/setup_environment.py:137:1: W293 blank line contains whitespace
    
^
scripts/setup_environment.py:140:1: W293 blank line contains whitespace
    
^
scripts/setup_environment.py:144:1: W293 blank line contains whitespace
    
^
scripts/setup_environment.py:147:1: W293 blank line contains whitespace
    
^
scripts/setup_environment.py:150:1: W293 blank line contains whitespace
    
^
scripts/setup_environment.py:153:1: W293 blank line contains whitespace
    
^
scripts/setup_environment.py:155:1: W293 blank line contains whitespace
    
^
scripts/setup_environment.py:159:80: E501 line too long (95 > 79 characters)
        logger.warning("Running in CPU mode - consider installing CUDA for better performance")
                                                                               ^
scripts/setup_environment.py:160:1: W293 blank line contains whitespace
    
^
scripts/setup_environment.py:162:1: W293 blank line contains whitespace
    
^
scripts/setup_environment.py:165:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
src/__init__.py:36:1: F401 '.agents.hyper_orchestrator.HyperOrchestrator' imported but unused
from .agents.hyper_orchestrator import HyperOrchestrator
^
src/__init__.py:38:1: E302 expected 2 blank lines, found 1
class AISIS:
^
src/__init__.py:41:80: E501 line too long (107 > 79 characters)
    """
    AISIS - AI Creative Studio
    Professional-grade image restoration and enhancement system with comprehensive multi-agent architecture
    """
       
                              
                                        ^
src/__init__.py:43:1: W293 blank line contains whitespace
    
^
src/__init__.py:47:1: W293 blank line contains whitespace
        """
        Initialize AISIS with comprehensive restoration capabilities
        
        Args:
            config_path: Path to configuration file
        """
^
src/__init__.py:55:1: W293 blank line contains whitespace
        
^
src/__init__.py:58:1: W293 blank line contains whitespace
        
^
src/__init__.py:75:1: W293 blank line contains whitespace
        
^
src/__init__.py:80:80: E501 line too long (81 > 79 characters)
        self.agents['paint_layer_decomposition'] = PaintLayerDecompositionAgent()
                                                                               ^
src/__init__.py:82:1: W293 blank line contains whitespace
        
^
src/__init__.py:86:80: E501 line too long (81 > 79 characters)
        self.agents['context_aware_restoration'] = ContextAwareRestorationAgent()
                                                                               ^
src/__init__.py:88:1: W293 blank line contains whitespace
    
^
src/__init__.py:93:1: W293 blank line contains whitespace
            
^
src/__init__.py:96:1: W293 blank line contains whitespace
            
^
src/__init__.py:101:1: W293 blank line contains whitespace
            
^
src/__init__.py:103:80: E501 line too long (101 > 79 characters)
            logger.info("AISIS initialized successfully with comprehensive restoration capabilities")
                                                                               ^
src/__init__.py:104:1: W293 blank line contains whitespace
            
^
src/__init__.py:108:1: W293 blank line contains whitespace
    
^
src/__init__.py:109:34: W291 trailing whitespace
    async def restore_image(self, 
                                 ^
src/__init__.py:110:27: E128 continuation line under-indented for visual indent
                          image_path: Union[str, Path, Image.Image, np.ndarray],
                          ^
src/__init__.py:110:80: E501 line too long (80 > 79 characters)
                          image_path: Union[str, Path, Image.Image, np.ndarray],
                                                                               ^
src/__init__.py:111:27: E128 continuation line under-indented for visual indent
                          output_path: Optional[str] = None,
                          ^
src/__init__.py:112:27: E128 continuation line under-indented for visual indent
                          restoration_type: str = 'comprehensive',
                          ^
src/__init__.py:113:27: E128 continuation line under-indented for visual indent
                          **kwargs) -> Dict[str, Any]:
                          ^
src/__init__.py:116:1: W293 blank line contains whitespace
        """
        Perform comprehensive image restoration
        
        Args:
            image_path: Input image path, PIL Image, or numpy array
            output_path: Output path for restored image
            restoration_type: Type of restoration ('comprehensive', 'basic', 'scientific', 'artistic')
            **kwargs: Additional restoration parameters
            
        Returns:
            Dictionary containing restoration results and metadata
        """
^
src/__init__.py:120:80: E501 line too long (102 > 79 characters)
        """
        Perform comprehensive image restoration
        
        Args:
            image_path: Input image path, PIL Image, or numpy array
            output_path: Output path for restored image
            restoration_type: Type of restoration ('comprehensive', 'basic', 'scientific', 'artistic')
            **kwargs: Additional restoration parameters
            
        Returns:
            Dictionary containing restoration results and metadata
        """
           
                                               
        
          ^
src/__init__.py:122:1: W293 blank line contains whitespace
        """
        Perform comprehensive image restoration
        
        Args:
            image_path: Input image path, PIL Image, or numpy array
            output_path: Output path for restored image
            restoration_type: Type of restoration ('comprehensive', 'basic', 'scientific', 'artistic')
            **kwargs: Additional restoration parameters
            
        Returns:
            Dictionary containing restoration results and metadata
        """
^
src/__init__.py:128:1: W293 blank line contains whitespace
        
^
src/__init__.py:138:1: W293 blank line contains whitespace
        
^
src/__init__.py:146:1: W293 blank line contains whitespace
        
^
src/__init__.py:149:1: W293 blank line contains whitespace
        
^
src/__init__.py:151:1: W293 blank line contains whitespace
    
^
src/__init__.py:152:41: W291 trailing whitespace
    async def execute_single_agent(self, 
                                        ^
src/__init__.py:153:34: E128 continuation line under-indented for visual indent
                                 agent_name: str,
                                 ^
src/__init__.py:154:34: E128 continuation line under-indented for visual indent
                                 image_path: Union[str, Path, Image.Image, np.ndarray],
                                 ^
src/__init__.py:154:80: E501 line too long (87 > 79 characters)
                                 image_path: Union[str, Path, Image.Image, np.ndarray],
                                                                               ^
src/__init__.py:155:34: E128 continuation line under-indented for visual indent
                                 output_path: Optional[str] = None,
                                 ^
src/__init__.py:156:34: E128 continuation line under-indented for visual indent
                                 **kwargs) -> Dict[str, Any]:
                                 ^
src/__init__.py:159:1: W293 blank line contains whitespace
        """
        Execute a single specialized agent
        
        Args:
            agent_name: Name of the agent to execute
            image_path: Input image
            output_path: Output path
            **kwargs: Agent-specific parameters
            
        Returns:
            Dictionary containing agent results
        """
^
src/__init__.py:165:1: W293 blank line contains whitespace
        """
        Execute a single specialized agent
        
        Args:
            agent_name: Name of the agent to execute
            image_path: Input image
            output_path: Output path
            **kwargs: Agent-specific parameters
            
        Returns:
            Dictionary containing agent results
        """
^
src/__init__.py:171:1: W293 blank line contains whitespace
        
^
src/__init__.py:173:80: E501 line too long (107 > 79 characters)
            raise ValueError(f"Agent {agent_name} not found. Available agents: {list(self.agents.keys())}")
                                                                               ^
src/__init__.py:174:1: W293 blank line contains whitespace
        
^
src/__init__.py:184:1: W293 blank line contains whitespace
        
^
src/__init__.py:191:1: W293 blank line contains whitespace
        
^
src/__init__.py:195:1: W293 blank line contains whitespace
        
^
src/__init__.py:197:1: W293 blank line contains whitespace
    
^
src/__init__.py:199:37: E128 continuation line under-indented for visual indent
                                    pipeline: List[str],
                                    ^
src/__init__.py:200:37: E128 continuation line under-indented for visual indent
                                    image_path: Union[str, Path, Image.Image, np.ndarray],
                                    ^
src/__init__.py:200:80: E501 line too long (90 > 79 characters)
                                    image_path: Union[str, Path, Image.Image, np.ndarray],
                                                                               ^
src/__init__.py:201:37: E128 continuation line under-indented for visual indent
                                    output_path: Optional[str] = None,
                                    ^
src/__init__.py:202:37: E128 continuation line under-indented for visual indent
                                    **kwargs) -> Dict[str, Any]:
                                    ^
src/__init__.py:205:1: W293 blank line contains whitespace
        """
        Execute a custom pipeline with specified agents
        
        Args:
            pipeline: List of agent names to execute in sequence
            image_path: Input image
            output_path: Output path
            **kwargs: Additional parameters
            
        Returns:
            Dictionary containing pipeline results
        """
^
src/__init__.py:211:1: W293 blank line contains whitespace
        """
        Execute a custom pipeline with specified agents
        
        Args:
            pipeline: List of agent names to execute in sequence
            image_path: Input image
            output_path: Output path
            **kwargs: Additional parameters
            
        Returns:
            Dictionary containing pipeline results
        """
^
src/__init__.py:217:1: W293 blank line contains whitespace
        
^
src/__init__.py:227:1: W293 blank line contains whitespace
        
^
src/__init__.py:234:1: W293 blank line contains whitespace
        
^
src/__init__.py:236:80: E501 line too long (80 > 79 characters)
        result = await self.orchestrator.execute_custom_pipeline(pipeline, task)
                                                                               ^
src/__init__.py:237:1: W293 blank line contains whitespace
        
^
src/__init__.py:239:1: W293 blank line contains whitespace
    
^
src/__init__.py:243:1: W293 blank line contains whitespace
    
^
src/__init__.py:247:1: W293 blank line contains whitespace
    
^
src/__init__.py:248:80: E501 line too long (111 > 79 characters)
    async def forensic_analysis(self, image_path: Union[str, Path, Image.Image, np.ndarray]) -> Dict[str, Any]:
                                                                               ^
src/__init__.py:251:1: W293 blank line contains whitespace
    
^
src/__init__.py:252:80: E501 line too long (114 > 79 characters)
    async def material_recognition(self, image_path: Union[str, Path, Image.Image, np.ndarray]) -> Dict[str, Any]:
                                                                               ^
src/__init__.py:254:80: E501 line too long (82 > 79 characters)
        return await self.execute_single_agent('material_recognition', image_path)
                                                                               ^
src/__init__.py:255:1: W293 blank line contains whitespace
    
^
src/__init__.py:256:80: E501 line too long (115 > 79 characters)
    async def damage_classification(self, image_path: Union[str, Path, Image.Image, np.ndarray]) -> Dict[str, Any]:
                                                                               ^
src/__init__.py:259:1: W293 blank line contains whitespace
    
^
src/__init__.py:260:80: E501 line too long (119 > 79 characters)
    async def context_aware_restoration(self, image_path: Union[str, Path, Image.Image, np.ndarray]) -> Dict[str, Any]:
                                                                               ^
src/__init__.py:262:80: E501 line too long (87 > 79 characters)
        return await self.execute_single_agent('context_aware_restoration', image_path)
                                                                               ^
src/__init__.py:263:1: W293 blank line contains whitespace
    
^
src/__init__.py:264:80: E501 line too long (114 > 79 characters)
    async def adaptive_enhancement(self, image_path: Union[str, Path, Image.Image, np.ndarray]) -> Dict[str, Any]:
                                                                               ^
src/__init__.py:266:80: E501 line too long (82 > 79 characters)
        return await self.execute_single_agent('adaptive_enhancement', image_path)
                                                                               ^
src/__init__.py:267:1: W293 blank line contains whitespace
    
^
src/__init__.py:268:80: E501 line too long (109 > 79 characters)
    async def meta_correction(self, image_path: Union[str, Path, Image.Image, np.ndarray]) -> Dict[str, Any]:
                                                                               ^
src/__init__.py:271:1: W293 blank line contains whitespace
    
^
src/__init__.py:272:80: E501 line too long (107 > 79 characters)
    async def self_critique(self, image_path: Union[str, Path, Image.Image, np.ndarray]) -> Dict[str, Any]:
                                                                               ^
src/__init__.py:275:1: W293 blank line contains whitespace
    
^
src/__init__.py:276:80: E501 line too long (116 > 79 characters)
    async def hyperspectral_recovery(self, image_path: Union[str, Path, Image.Image, np.ndarray]) -> Dict[str, Any]:
                                                                               ^
src/__init__.py:278:80: E501 line too long (84 > 79 characters)
        return await self.execute_single_agent('hyperspectral_recovery', image_path)
                                                                               ^
src/__init__.py:279:1: W293 blank line contains whitespace
    
^
src/__init__.py:280:80: E501 line too long (119 > 79 characters)
    async def paint_layer_decomposition(self, image_path: Union[str, Path, Image.Image, np.ndarray]) -> Dict[str, Any]:
                                                                               ^
src/__init__.py:282:80: E501 line too long (87 > 79 characters)
        return await self.execute_single_agent('paint_layer_decomposition', image_path)
                                                                               ^
src/__init__.py:283:1: W293 blank line contains whitespace
    
^
src/__init__.py:284:80: E501 line too long (116 > 79 characters)
    async def scientific_restoration(self, image_path: Union[str, Path, Image.Image, np.ndarray]) -> Dict[str, Any]:
                                                                               ^
src/__init__.py:288:36: W291 trailing whitespace
            'material_recognition', 
                                   ^
src/__init__.py:295:80: E501 line too long (82 > 79 characters)
        return await self.execute_custom_pipeline(scientific_pipeline, image_path)
                                                                               ^
src/__init__.py:296:1: W293 blank line contains whitespace
    
^
src/__init__.py:297:80: E501 line too long (114 > 79 characters)
    async def artistic_restoration(self, image_path: Union[str, Path, Image.Image, np.ndarray]) -> Dict[str, Any]:
                                                                               ^
src/__init__.py:307:80: E501 line too long (80 > 79 characters)
        return await self.execute_custom_pipeline(artistic_pipeline, image_path)
                                                                               ^
src/__init__.py:308:1: W293 blank line contains whitespace
    
^
src/__init__.py:318:1: W293 blank line contains whitespace
    
^
src/__init__.py:322:1: W293 blank line contains whitespace
    
^
src/__init__.py:327:80: E501 line too long (84 > 79 characters)
    async def edit_image(self, image_path, instruction, output_path=None, **kwargs):
                                                                               ^
src/__init__.py:329:80: E501 line too long (99 > 79 characters)
        """
        Edit an image according to a natural language instruction using the semantic editing agent.
        Args:
            image_path: Path to the input image.
            instruction: Text instruction for the edit.
            output_path: Optional path to save the edited image.
            **kwargs: Additional parameters.
        Returns:
            Result dictionary from the semantic editing agent.
        """
           
                                                                   ^
src/__init__.py:368:9: E306 expected 1 blank line before a nested definition, found 0
        async def run_voice():
        ^
src/__init__.py:371:80: E501 line too long (104 > 79 characters)
            print("Voice mode started. Speak into your microphone (not implemented: add UI loop here).")
                                                                               ^
src/__init__.py:388:1: E302 expected 2 blank lines, found 1
async def restore_image(image_path: Union[str, Path, Image.Image, np.ndarray],
^
src/__init__.py:389:24: E128 continuation line under-indented for visual indent
                       output_path: Optional[str] = None,
                       ^
src/__init__.py:390:24: E128 continuation line under-indented for visual indent
                       restoration_type: str = 'comprehensive',
                       ^
src/__init__.py:391:24: E128 continuation line under-indented for visual indent
                       **kwargs) -> Dict[str, Any]:
                       ^
src/__init__.py:394:1: W293 blank line contains whitespace
    """
    Convenience function for quick image restoration
    
    Args:
        image_path: Input image
        output_path: Output path
        restoration_type: Type of restoration
        **kwargs: Additional parameters
        
    Returns:
        Restoration results
    """
^
src/__init__.py:400:1: W293 blank line contains whitespace
    """
    Convenience function for quick image restoration
    
    Args:
        image_path: Input image
        output_path: Output path
        restoration_type: Type of restoration
        **kwargs: Additional parameters
        
    Returns:
        Restoration results
    """
^
src/__init__.py:405:80: E501 line too long (93 > 79 characters)
        return await aisis.restore_image(image_path, output_path, restoration_type, **kwargs)
                                                                               ^
src/__init__.py:407:1: E302 expected 2 blank lines, found 1
async def forensic_analysis(image_path: Union[str, Path, Image.Image, np.ndarray]) -> Dict[str, Any]:
^
src/__init__.py:407:80: E501 line too long (101 > 79 characters)
async def forensic_analysis(image_path: Union[str, Path, Image.Image, np.ndarray]) -> Dict[str, Any]:
                                                                               ^
src/__init__.py:412:1: E302 expected 2 blank lines, found 1
async def scientific_restoration(image_path: Union[str, Path, Image.Image, np.ndarray]) -> Dict[str, Any]:
^
src/__init__.py:412:80: E501 line too long (106 > 79 characters)
async def scientific_restoration(image_path: Union[str, Path, Image.Image, np.ndarray]) -> Dict[str, Any]:
                                                                               ^
src/__init__.py:417:1: E302 expected 2 blank lines, found 1
async def artistic_restoration(image_path: Union[str, Path, Image.Image, np.ndarray]) -> Dict[str, Any]:
^
src/__init__.py:417:80: E501 line too long (104 > 79 characters)
async def artistic_restoration(image_path: Union[str, Path, Image.Image, np.ndarray]) -> Dict[str, Any]:
                                                                               ^
src/__init__.py:424:80: E501 line too long (82 > 79 characters)
__description__ = "Professional-grade AI image restoration and enhancement system"
                                                                               ^
src/agents/adaptive_enhancement.py:3:80: E501 line too long (96 > 79 characters)
"""
Adaptive Enhancement Agent
Specialized agent for intelligent enhancement based on image characteristics and quality metrics
"""
   
                          
                                                ^
src/agents/adaptive_enhancement.py:8:1: F401 'torch.nn.functional as F' imported but unused
import torch.nn.functional as F
^
src/agents/adaptive_enhancement.py:11:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, Optional, List, Tuple
^
src/agents/adaptive_enhancement.py:11:1: F401 'typing.List' imported but unused
from typing import Dict, Any, Optional, List, Tuple
^
src/agents/adaptive_enhancement.py:11:1: F401 'typing.Tuple' imported but unused
from typing import Dict, Any, Optional, List, Tuple
^
src/agents/adaptive_enhancement.py:12:1: F401 'cv2' imported but unused
import cv2
^
src/agents/adaptive_enhancement.py:18:1: E302 expected 2 blank lines, found 1
class AdaptiveEnhancementAgent(BaseAgent):
^
src/agents/adaptive_enhancement.py:27:1: W293 blank line contains whitespace
        
^
src/agents/adaptive_enhancement.py:32:80: E501 line too long (81 > 79 characters)
            self.models['quality_assessor'] = await self._load_quality_assessor()
                                                                               ^
src/agents/adaptive_enhancement.py:33:1: W293 blank line contains whitespace
            
^
src/agents/adaptive_enhancement.py:35:80: E501 line too long (91 > 79 characters)
            self.models['enhancement_predictor'] = await self._load_enhancement_predictor()
                                                                               ^
src/agents/adaptive_enhancement.py:36:1: W293 blank line contains whitespace
            
^
src/agents/adaptive_enhancement.py:38:80: E501 line too long (83 > 79 characters)
            self.models['adaptive_enhancer'] = await self._load_adaptive_enhancer()
                                                                               ^
src/agents/adaptive_enhancement.py:39:1: W293 blank line contains whitespace
            
^
src/agents/adaptive_enhancement.py:41:80: E501 line too long (89 > 79 characters)
            self.models['multi_scale_enhancer'] = await self._load_multi_scale_enhancer()
                                                                               ^
src/agents/adaptive_enhancement.py:42:1: W293 blank line contains whitespace
            
^
src/agents/adaptive_enhancement.py:44:80: E501 line too long (93 > 79 characters)
            self.models['quality_aware_enhancer'] = await self._load_quality_aware_enhancer()
                                                                               ^
src/agents/adaptive_enhancement.py:45:1: W293 blank line contains whitespace
            
^
src/agents/adaptive_enhancement.py:47:1: W293 blank line contains whitespace
            
^
src/agents/adaptive_enhancement.py:49:80: E501 line too long (82 > 79 characters)
            logger.error(f"Failed to initialize adaptive enhancement models: {e}")
                                                                               ^
src/agents/adaptive_enhancement.py:51:1: W293 blank line contains whitespace
    
^
src/agents/adaptive_enhancement.py:62:1: W293 blank line contains whitespace
                    
^
src/agents/adaptive_enhancement.py:70:1: W293 blank line contains whitespace
                    
^
src/agents/adaptive_enhancement.py:78:1: W293 blank line contains whitespace
                    
^
src/agents/adaptive_enhancement.py:87:1: W293 blank line contains whitespace
                
^
src/agents/adaptive_enhancement.py:97:1: W293 blank line contains whitespace
            
^
src/agents/adaptive_enhancement.py:103:1: W293 blank line contains whitespace
        
^
src/agents/adaptive_enhancement.py:105:1: W293 blank line contains whitespace
    
^
src/agents/adaptive_enhancement.py:117:1: W293 blank line contains whitespace
                    
^
src/agents/adaptive_enhancement.py:123:1: W293 blank line contains whitespace
                    
^
src/agents/adaptive_enhancement.py:130:1: W293 blank line contains whitespace
                
^
src/agents/adaptive_enhancement.py:139:1: W293 blank line contains whitespace
            
^
src/agents/adaptive_enhancement.py:145:1: W293 blank line contains whitespace
        
^
src/agents/adaptive_enhancement.py:147:1: W293 blank line contains whitespace
    
^
src/agents/adaptive_enhancement.py:159:1: W293 blank line contains whitespace
                    
^
src/agents/adaptive_enhancement.py:165:1: W293 blank line contains whitespace
                    
^
src/agents/adaptive_enhancement.py:171:1: W293 blank line contains whitespace
                    
^
src/agents/adaptive_enhancement.py:177:1: W293 blank line contains whitespace
                
^
src/agents/adaptive_enhancement.py:184:1: W293 blank line contains whitespace
                        
^
src/agents/adaptive_enhancement.py:189:1: W293 blank line contains whitespace
                        
^
src/agents/adaptive_enhancement.py:194:1: W293 blank line contains whitespace
                        
^
src/agents/adaptive_enhancement.py:199:1: W293 blank line contains whitespace
            
^
src/agents/adaptive_enhancement.py:202:1: W293 blank line contains whitespace
                
^
src/agents/adaptive_enhancement.py:209:1: W293 blank line contains whitespace
                
^
src/agents/adaptive_enhancement.py:211:1: W293 blank line contains whitespace
        
^
src/agents/adaptive_enhancement.py:213:1: W293 blank line contains whitespace
    
^
src/agents/adaptive_enhancement.py:226:1: W293 blank line contains whitespace
                
^
src/agents/adaptive_enhancement.py:233:1: W293 blank line contains whitespace
                
^
src/agents/adaptive_enhancement.py:240:1: W293 blank line contains whitespace
                
^
src/agents/adaptive_enhancement.py:248:1: W293 blank line contains whitespace
                
^
src/agents/adaptive_enhancement.py:255:1: W293 blank line contains whitespace
                    
^
src/agents/adaptive_enhancement.py:259:1: W293 blank line contains whitespace
            
^
src/agents/adaptive_enhancement.py:265:1: W293 blank line contains whitespace
                
^
src/agents/adaptive_enhancement.py:269:1: W293 blank line contains whitespace
                
^
src/agents/adaptive_enhancement.py:273:1: W293 blank line contains whitespace
        
^
src/agents/adaptive_enhancement.py:275:1: W293 blank line contains whitespace
    
^
src/agents/adaptive_enhancement.py:287:1: W293 blank line contains whitespace
                    
^
src/agents/adaptive_enhancement.py:293:1: W293 blank line contains whitespace
                    
^
src/agents/adaptive_enhancement.py:299:1: W293 blank line contains whitespace
                
^
src/agents/adaptive_enhancement.py:306:1: W293 blank line contains whitespace
                
^
src/agents/adaptive_enhancement.py:312:1: W293 blank line contains whitespace
                    
^
src/agents/adaptive_enhancement.py:317:1: W293 blank line contains whitespace
                    
^
src/agents/adaptive_enhancement.py:321:1: W293 blank line contains whitespace
            
^
src/agents/adaptive_enhancement.py:325:1: W293 blank line contains whitespace
                
^
src/agents/adaptive_enhancement.py:329:80: E501 line too long (81 > 79 characters)
                quality_features = quality_features.expand(-1, -1, height, width)
                                                                               ^
src/agents/adaptive_enhancement.py:330:1: W293 blank line contains whitespace
                
^
src/agents/adaptive_enhancement.py:335:1: W293 blank line contains whitespace
        
^
src/agents/adaptive_enhancement.py:337:1: W293 blank line contains whitespace
    
^
src/agents/adaptive_enhancement.py:347:1: W293 blank line contains whitespace
            
^
src/agents/adaptive_enhancement.py:350:1: W293 blank line contains whitespace
            
^
src/agents/adaptive_enhancement.py:353:1: W293 blank line contains whitespace
            
^
src/agents/adaptive_enhancement.py:356:1: W293 blank line contains whitespace
            
^
src/agents/adaptive_enhancement.py:358:80: E501 line too long (93 > 79 characters)
            adaptive_enhanced = await self._apply_adaptive_enhancement(x, enhancement_scores)
                                                                               ^
src/agents/adaptive_enhancement.py:359:1: W293 blank line contains whitespace
            
^
src/agents/adaptive_enhancement.py:361:80: E501 line too long (95 > 79 characters)
            multi_scale_enhanced = await self._apply_multi_scale_enhancement(adaptive_enhanced)
                                                                               ^
src/agents/adaptive_enhancement.py:362:1: W293 blank line contains whitespace
            
^
src/agents/adaptive_enhancement.py:364:80: E501 line too long (110 > 79 characters)
            final_enhanced = await self._apply_quality_aware_enhancement(multi_scale_enhanced, quality_scores)
                                                                               ^
src/agents/adaptive_enhancement.py:365:1: W293 blank line contains whitespace
            
^
src/agents/adaptive_enhancement.py:368:1: W293 blank line contains whitespace
            
^
src/agents/adaptive_enhancement.py:370:80: E501 line too long (96 > 79 characters)
            enhancement_analysis = self._analyze_enhancement(quality_scores, enhancement_scores)
                                                                               ^
src/agents/adaptive_enhancement.py:371:1: W293 blank line contains whitespace
            
^
src/agents/adaptive_enhancement.py:377:1: W293 blank line contains whitespace
            
^
src/agents/adaptive_enhancement.py:385:80: E501 line too long (83 > 79 characters)
                'enhancement_methods': ['adaptive', 'multi_scale', 'quality_aware']
                                                                               ^
src/agents/adaptive_enhancement.py:387:1: W293 blank line contains whitespace
            
^
src/agents/adaptive_enhancement.py:391:1: W293 blank line contains whitespace
    
^
src/agents/adaptive_enhancement.py:396:1: W293 blank line contains whitespace
    
^
src/agents/adaptive_enhancement.py:401:1: W293 blank line contains whitespace
    
^
src/agents/adaptive_enhancement.py:402:80: E501 line too long (115 > 79 characters)
    async def _apply_adaptive_enhancement(self, x: torch.Tensor, enhancement_scores: torch.Tensor) -> torch.Tensor:
                                                                               ^
src/agents/adaptive_enhancement.py:406:80: E501 line too long (80 > 79 characters)
            enhancement_weights = enhancement_scores.unsqueeze(-1).unsqueeze(-1)
                                                                               ^
src/agents/adaptive_enhancement.py:407:80: E501 line too long (92 > 79 characters)
            enhancement_weights = enhancement_weights.expand(-1, -1, x.shape[2], x.shape[3])
                                                                               ^
src/agents/adaptive_enhancement.py:409:1: W293 blank line contains whitespace
    
^
src/agents/adaptive_enhancement.py:410:80: E501 line too long (84 > 79 characters)
    async def _apply_multi_scale_enhancement(self, x: torch.Tensor) -> torch.Tensor:
                                                                               ^
src/agents/adaptive_enhancement.py:414:1: W293 blank line contains whitespace
    
^
src/agents/adaptive_enhancement.py:415:80: E501 line too long (116 > 79 characters)
    async def _apply_quality_aware_enhancement(self, x: torch.Tensor, quality_scores: torch.Tensor) -> torch.Tensor:
                                                                               ^
src/agents/adaptive_enhancement.py:419:1: W293 blank line contains whitespace
    
^
src/agents/adaptive_enhancement.py:420:80: E501 line too long (117 > 79 characters)
    def _analyze_enhancement(self, quality_scores: torch.Tensor, enhancement_scores: torch.Tensor) -> Dict[str, Any]:
                                                                               ^
src/agents/adaptive_enhancement.py:424:1: W293 blank line contains whitespace
        
^
src/agents/adaptive_enhancement.py:430:1: W293 blank line contains whitespace
        
^
src/agents/adaptive_enhancement.py:437:80: E501 line too long (84 > 79 characters)
                    'quality_metric': float(quality[i]) if i < len(quality) else 0.0
                                                                               ^
src/agents/adaptive_enhancement.py:439:1: W293 blank line contains whitespace
        
^
src/agents/adaptive_enhancement.py:445:80: E501 line too long (99 > 79 characters)
                    'enhancement_intensity': float(enhancement[i]) if i < len(enhancement) else 0.0
                                                                               ^
src/agents/adaptive_enhancement.py:447:1: W293 blank line contains whitespace
        
^
src/agents/adaptive_enhancement.py:449:1: W293 blank line contains whitespace
    
^
src/agents/adaptive_enhancement.py:458:1: W293 blank line contains whitespace
    
^
src/agents/adaptive_enhancement.py:467:1: W293 blank line contains whitespace
    
^
src/agents/adaptive_enhancement.py:471:33: W291 trailing whitespace
        torch.cuda.empty_cache()                                 ^
src/agents/adaptive_enhancement.py:471:34: W292 no newline at end of file
        torch.cuda.empty_cache()                                  ^
src/agents/auto_retouch.py:11:1: F401 'typing.List' imported but unused
from typing import Dict, Any, List
^
src/agents/auto_retouch.py:17:1: E302 expected 2 blank lines, found 1
class AutoRetouchAgent(BaseAgent):
^
src/agents/auto_retouch.py:23:1: W293 blank line contains whitespace
        
^
src/agents/auto_retouch.py:28:80: E501 line too long (103 > 79 characters)
            logger.warning("Auto-Retouch models are placeholders. Implement real face/body detection.")
                                                                               ^
src/agents/auto_retouch.py:29:1: W293 blank line contains whitespace
            
^
src/agents/auto_retouch.py:31:80: E501 line too long (83 > 79 characters)
            self.models['face_detection'] = await self._load_face_detection_model()
                                                                               ^
src/agents/auto_retouch.py:32:1: W293 blank line contains whitespace
            
^
src/agents/auto_retouch.py:34:80: E501 line too long (87 > 79 characters)
            self.models['face_enhancement'] = await self._load_face_enhancement_model()
                                                                               ^
src/agents/auto_retouch.py:35:1: W293 blank line contains whitespace
            
^
src/agents/auto_retouch.py:37:80: E501 line too long (83 > 79 characters)
            self.models['body_detection'] = await self._load_body_detection_model()
                                                                               ^
src/agents/auto_retouch.py:38:1: W293 blank line contains whitespace
            
^
src/agents/auto_retouch.py:44:27: E128 continuation line under-indented for visual indent
                          std=[0.229, 0.224, 0.225])
                          ^
src/agents/auto_retouch.py:46:1: W293 blank line contains whitespace
            
^
src/agents/auto_retouch.py:48:1: W293 blank line contains whitespace
            
^
src/agents/auto_retouch.py:52:1: W293 blank line contains whitespace
    
^
src/agents/auto_retouch.py:59:1: W293 blank line contains whitespace
            
^
src/agents/auto_retouch.py:62:1: W293 blank line contains whitespace
        
^
src/agents/auto_retouch.py:64:1: W293 blank line contains whitespace
    
^
src/agents/auto_retouch.py:71:1: W293 blank line contains whitespace
            
^
src/agents/auto_retouch.py:74:1: W293 blank line contains whitespace
        
^
src/agents/auto_retouch.py:76:1: W293 blank line contains whitespace
    
^
src/agents/auto_retouch.py:83:1: W293 blank line contains whitespace
            
^
src/agents/auto_retouch.py:86:1: W293 blank line contains whitespace
        
^
src/agents/auto_retouch.py:88:1: W293 blank line contains whitespace
    
^
src/agents/auto_retouch.py:98:1: W293 blank line contains whitespace
            
^
src/agents/auto_retouch.py:101:1: W293 blank line contains whitespace
            
^
src/agents/auto_retouch.py:105:1: W293 blank line contains whitespace
            
^
src/agents/auto_retouch.py:108:1: W293 blank line contains whitespace
            
^
src/agents/auto_retouch.py:111:1: W293 blank line contains whitespace
            
^
src/agents/auto_retouch.py:117:1: W293 blank line contains whitespace
            
^
src/agents/auto_retouch.py:127:1: W293 blank line contains whitespace
            
^
src/agents/auto_retouch.py:131:1: W293 blank line contains whitespace
    
^
src/agents/auto_retouch.py:137:1: W293 blank line contains whitespace
    
^
src/agents/auto_retouch.py:143:1: W293 blank line contains whitespace
    
^
src/agents/auto_retouch.py:155:1: W293 blank line contains whitespace
            
^
src/agents/auto_retouch.py:159:1: W293 blank line contains whitespace
            
^
src/agents/auto_retouch.py:161:1: W293 blank line contains whitespace
    
^
src/agents/auto_retouch.py:168:1: W293 blank line contains whitespace
    
^
src/agents/auto_retouch.py:172:33: W291 trailing whitespace
        torch.cuda.empty_cache()                                 ^
src/agents/auto_retouch.py:172:34: W292 no newline at end of file
        torch.cuda.empty_cache()                                  ^
src/agents/base_agent.py:7:1: F401 'enum.Enum' imported but unused
from enum import Enum
^
src/agents/color_correction.py:11:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, Optional
^
src/agents/color_correction.py:17:1: E302 expected 2 blank lines, found 1
class ColorCorrectionAgent(BaseAgent):
^
src/agents/color_correction.py:23:1: W293 blank line contains whitespace
        
^
src/agents/color_correction.py:28:80: E501 line too long (94 > 79 characters)
            logger.warning("Color correction models are placeholders. Implement real models.")
                                                                               ^
src/agents/color_correction.py:29:1: W293 blank line contains whitespace
            
^
src/agents/color_correction.py:31:80: E501 line too long (81 > 79 characters)
            self.models['white_balance'] = await self._load_white_balance_model()
                                                                               ^
src/agents/color_correction.py:32:1: W293 blank line contains whitespace
            
^
src/agents/color_correction.py:34:80: E501 line too long (81 > 79 characters)
            self.models['color_grading'] = await self._load_color_grading_model()
                                                                               ^
src/agents/color_correction.py:35:1: W293 blank line contains whitespace
            
^
src/agents/color_correction.py:37:80: E501 line too long (93 > 79 characters)
            self.models['exposure_correction'] = await self._load_exposure_correction_model()
                                                                               ^
src/agents/color_correction.py:38:1: W293 blank line contains whitespace
            
^
src/agents/color_correction.py:40:80: E501 line too long (89 > 79 characters)
            self.models['color_enhancement'] = await self._load_color_enhancement_model()
                                                                               ^
src/agents/color_correction.py:41:1: W293 blank line contains whitespace
            
^
src/agents/color_correction.py:47:27: E128 continuation line under-indented for visual indent
                          std=[0.229, 0.224, 0.225])
                          ^
src/agents/color_correction.py:49:1: W293 blank line contains whitespace
            
^
src/agents/color_correction.py:51:1: W293 blank line contains whitespace
            
^
src/agents/color_correction.py:55:1: W293 blank line contains whitespace
    
^
src/agents/color_correction.py:62:1: W293 blank line contains whitespace
            
^
src/agents/color_correction.py:65:1: W293 blank line contains whitespace
        
^
src/agents/color_correction.py:67:1: W293 blank line contains whitespace
    
^
src/agents/color_correction.py:74:1: W293 blank line contains whitespace
            
^
src/agents/color_correction.py:77:1: W293 blank line contains whitespace
        
^
src/agents/color_correction.py:79:1: W293 blank line contains whitespace
    
^
src/agents/color_correction.py:86:1: W293 blank line contains whitespace
            
^
src/agents/color_correction.py:89:1: W293 blank line contains whitespace
        
^
src/agents/color_correction.py:91:1: W293 blank line contains whitespace
    
^
src/agents/color_correction.py:98:1: W293 blank line contains whitespace
            
^
src/agents/color_correction.py:101:1: W293 blank line contains whitespace
        
^
src/agents/color_correction.py:103:1: W293 blank line contains whitespace
    
^
src/agents/color_correction.py:113:1: W293 blank line contains whitespace
            
^
src/agents/color_correction.py:116:1: W293 blank line contains whitespace
            
^
src/agents/color_correction.py:119:1: W293 blank line contains whitespace
            
^
src/agents/color_correction.py:132:1: W293 blank line contains whitespace
            
^
src/agents/color_correction.py:135:1: W293 blank line contains whitespace
            
^
src/agents/color_correction.py:141:1: W293 blank line contains whitespace
            
^
src/agents/color_correction.py:147:80: E501 line too long (100 > 79 characters)
                'applied_corrections': ['white_balance', 'color_grading', 'exposure', 'enhancement']
                                                                               ^
src/agents/color_correction.py:149:1: W293 blank line contains whitespace
            
^
src/agents/color_correction.py:153:1: W293 blank line contains whitespace
    
^
src/agents/color_correction.py:158:1: W293 blank line contains whitespace
    
^
src/agents/color_correction.py:163:1: W293 blank line contains whitespace
    
^
src/agents/color_correction.py:164:80: E501 line too long (80 > 79 characters)
    async def _apply_exposure_correction(self, x: torch.Tensor) -> torch.Tensor:
                                                                               ^
src/agents/color_correction.py:168:1: W293 blank line contains whitespace
    
^
src/agents/color_correction.py:173:1: W293 blank line contains whitespace
    
^
src/agents/color_correction.py:183:1: W293 blank line contains whitespace
    
^
src/agents/color_correction.py:190:1: W293 blank line contains whitespace
    
^
src/agents/color_correction.py:194:33: W291 trailing whitespace
        torch.cuda.empty_cache()                                 ^
src/agents/color_correction.py:194:34: W292 no newline at end of file
        torch.cuda.empty_cache()                                  ^
src/agents/context_aware_restoration.py:3:80: E501 line too long (80 > 79 characters)
"""
Context-Aware Restoration Agent
Specialized agent for intelligent restoration based on image context and content
"""
   
                               
                                           ^
src/agents/context_aware_restoration.py:8:1: F401 'torch.nn.functional as F' imported but unused
import torch.nn.functional as F
^
src/agents/context_aware_restoration.py:11:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, Optional, List, Tuple
^
src/agents/context_aware_restoration.py:11:1: F401 'typing.List' imported but unused
from typing import Dict, Any, Optional, List, Tuple
^
src/agents/context_aware_restoration.py:11:1: F401 'typing.Tuple' imported but unused
from typing import Dict, Any, Optional, List, Tuple
^
src/agents/context_aware_restoration.py:12:1: F401 'cv2' imported but unused
import cv2
^
src/agents/context_aware_restoration.py:18:1: E302 expected 2 blank lines, found 1
class ContextAwareRestorationAgent(BaseAgent):
^
src/agents/context_aware_restoration.py:27:1: W293 blank line contains whitespace
        
^
src/agents/context_aware_restoration.py:32:80: E501 line too long (85 > 79 characters)
            self.models['context_classifier'] = await self._load_context_classifier()
                                                                               ^
src/agents/context_aware_restoration.py:33:1: W293 blank line contains whitespace
            
^
src/agents/context_aware_restoration.py:35:80: E501 line too long (81 > 79 characters)
            self.models['content_restorer'] = await self._load_content_restorer()
                                                                               ^
src/agents/context_aware_restoration.py:36:1: W293 blank line contains whitespace
            
^
src/agents/context_aware_restoration.py:38:80: E501 line too long (85 > 79 characters)
            self.models['semantic_segmenter'] = await self._load_semantic_segmenter()
                                                                               ^
src/agents/context_aware_restoration.py:39:1: W293 blank line contains whitespace
            
^
src/agents/context_aware_restoration.py:41:80: E501 line too long (83 > 79 characters)
            self.models['adaptive_restorer'] = await self._load_adaptive_restorer()
                                                                               ^
src/agents/context_aware_restoration.py:42:1: W293 blank line contains whitespace
            
^
src/agents/context_aware_restoration.py:44:80: E501 line too long (81 > 79 characters)
            self.models['context_enhancer'] = await self._load_context_enhancer()
                                                                               ^
src/agents/context_aware_restoration.py:45:1: W293 blank line contains whitespace
            
^
src/agents/context_aware_restoration.py:47:1: W293 blank line contains whitespace
            
^
src/agents/context_aware_restoration.py:49:80: E501 line too long (87 > 79 characters)
            logger.error(f"Failed to initialize context-aware restoration models: {e}")
                                                                               ^
src/agents/context_aware_restoration.py:51:1: W293 blank line contains whitespace
    
^
src/agents/context_aware_restoration.py:62:1: W293 blank line contains whitespace
                    
^
src/agents/context_aware_restoration.py:70:1: W293 blank line contains whitespace
                    
^
src/agents/context_aware_restoration.py:78:1: W293 blank line contains whitespace
                    
^
src/agents/context_aware_restoration.py:87:1: W293 blank line contains whitespace
                
^
src/agents/context_aware_restoration.py:97:1: W293 blank line contains whitespace
            
^
src/agents/context_aware_restoration.py:103:1: W293 blank line contains whitespace
        
^
src/agents/context_aware_restoration.py:105:1: W293 blank line contains whitespace
    
^
src/agents/context_aware_restoration.py:117:1: W293 blank line contains whitespace
                    
^
src/agents/context_aware_restoration.py:123:1: W293 blank line contains whitespace
                    
^
src/agents/context_aware_restoration.py:129:1: W293 blank line contains whitespace
                    
^
src/agents/context_aware_restoration.py:135:1: W293 blank line contains whitespace
                
^
src/agents/context_aware_restoration.py:141:1: W293 blank line contains whitespace
                    
^
src/agents/context_aware_restoration.py:146:1: W293 blank line contains whitespace
                    
^
src/agents/context_aware_restoration.py:151:1: W293 blank line contains whitespace
                    
^
src/agents/context_aware_restoration.py:155:1: W293 blank line contains whitespace
            
^
src/agents/context_aware_restoration.py:160:1: W293 blank line contains whitespace
        
^
src/agents/context_aware_restoration.py:162:1: W293 blank line contains whitespace
    
^
src/agents/context_aware_restoration.py:174:1: W293 blank line contains whitespace
                    
^
src/agents/context_aware_restoration.py:180:1: W293 blank line contains whitespace
                    
^
src/agents/context_aware_restoration.py:186:1: W293 blank line contains whitespace
                
^
src/agents/context_aware_restoration.py:192:1: W293 blank line contains whitespace
                    
^
src/agents/context_aware_restoration.py:197:1: W293 blank line contains whitespace
                    
^
src/agents/context_aware_restoration.py:201:1: W293 blank line contains whitespace
            
^
src/agents/context_aware_restoration.py:206:1: W293 blank line contains whitespace
        
^
src/agents/context_aware_restoration.py:208:1: W293 blank line contains whitespace
    
^
src/agents/context_aware_restoration.py:220:1: W293 blank line contains whitespace
                
^
src/agents/context_aware_restoration.py:227:1: W293 blank line contains whitespace
                    
^
src/agents/context_aware_restoration.py:233:1: W293 blank line contains whitespace
                    
^
src/agents/context_aware_restoration.py:239:1: W293 blank line contains whitespace
                
^
src/agents/context_aware_restoration.py:246:1: W293 blank line contains whitespace
                
^
src/agents/context_aware_restoration.py:252:1: W293 blank line contains whitespace
                    
^
src/agents/context_aware_restoration.py:257:1: W293 blank line contains whitespace
                    
^
src/agents/context_aware_restoration.py:261:1: W293 blank line contains whitespace
            
^
src/agents/context_aware_restoration.py:265:1: W293 blank line contains whitespace
                
^
src/agents/context_aware_restoration.py:269:80: E501 line too long (81 > 79 characters)
                context_features = context_features.expand(-1, -1, height, width)
                                                                               ^
src/agents/context_aware_restoration.py:270:1: W293 blank line contains whitespace
                
^
src/agents/context_aware_restoration.py:274:1: W293 blank line contains whitespace
                
^
src/agents/context_aware_restoration.py:278:1: W293 blank line contains whitespace
        
^
src/agents/context_aware_restoration.py:280:1: W293 blank line contains whitespace
    
^
src/agents/context_aware_restoration.py:291:1: W293 blank line contains whitespace
                    
^
src/agents/context_aware_restoration.py:296:1: W293 blank line contains whitespace
                    
^
src/agents/context_aware_restoration.py:301:1: W293 blank line contains whitespace
                    
^
src/agents/context_aware_restoration.py:305:1: W293 blank line contains whitespace
            
^
src/agents/context_aware_restoration.py:309:1: W293 blank line contains whitespace
        
^
src/agents/context_aware_restoration.py:311:1: W293 blank line contains whitespace
    
^
src/agents/context_aware_restoration.py:321:1: W293 blank line contains whitespace
            
^
src/agents/context_aware_restoration.py:324:1: W293 blank line contains whitespace
            
^
src/agents/context_aware_restoration.py:328:1: W293 blank line contains whitespace
            
^
src/agents/context_aware_restoration.py:331:1: W293 blank line contains whitespace
            
^
src/agents/context_aware_restoration.py:333:13: F841 local variable 'content_restored' is assigned to but never used
            content_restored = await self._restore_content(x)
            ^
src/agents/context_aware_restoration.py:334:1: W293 blank line contains whitespace
            
^
src/agents/context_aware_restoration.py:336:80: E501 line too long (88 > 79 characters)
            adaptive_restored = await self._apply_adaptive_restoration(x, context_probs)
                                                                               ^
src/agents/context_aware_restoration.py:337:1: W293 blank line contains whitespace
            
^
src/agents/context_aware_restoration.py:340:1: W293 blank line contains whitespace
            
^
src/agents/context_aware_restoration.py:343:1: W293 blank line contains whitespace
            
^
src/agents/context_aware_restoration.py:345:80: E501 line too long (81 > 79 characters)
            context_analysis = self._analyze_context(context_probs, segmentation)
                                                                               ^
src/agents/context_aware_restoration.py:346:1: W293 blank line contains whitespace
            
^
src/agents/context_aware_restoration.py:352:1: W293 blank line contains whitespace
            
^
src/agents/context_aware_restoration.py:360:80: E501 line too long (101 > 79 characters)
                'semantic_segmentation': segmentation.tolist() if segmentation is not None else None,
                                                                               ^
src/agents/context_aware_restoration.py:361:80: E501 line too long (91 > 79 characters)
                'restoration_methods': ['content_aware', 'adaptive', 'context_enhancement']
                                                                               ^
src/agents/context_aware_restoration.py:363:1: W293 blank line contains whitespace
            
^
src/agents/context_aware_restoration.py:367:1: W293 blank line contains whitespace
    
^
src/agents/context_aware_restoration.py:372:1: W293 blank line contains whitespace
    
^
src/agents/context_aware_restoration.py:377:1: W293 blank line contains whitespace
    
^
src/agents/context_aware_restoration.py:382:1: W293 blank line contains whitespace
    
^
src/agents/context_aware_restoration.py:383:80: E501 line too long (110 > 79 characters)
    async def _apply_adaptive_restoration(self, x: torch.Tensor, context_probs: torch.Tensor) -> torch.Tensor:
                                                                               ^
src/agents/context_aware_restoration.py:387:1: W293 blank line contains whitespace
    
^
src/agents/context_aware_restoration.py:388:80: E501 line too long (80 > 79 characters)
    async def _apply_context_enhancement(self, x: torch.Tensor) -> torch.Tensor:
                                                                               ^
src/agents/context_aware_restoration.py:392:1: W293 blank line contains whitespace
    
^
src/agents/context_aware_restoration.py:398:1: W293 blank line contains whitespace
    
^
src/agents/context_aware_restoration.py:399:80: E501 line too long (106 > 79 characters)
    def _analyze_context(self, context_probs: torch.Tensor, segmentation: torch.Tensor) -> Dict[str, Any]:
                                                                               ^
src/agents/context_aware_restoration.py:402:1: W293 blank line contains whitespace
        
^
src/agents/context_aware_restoration.py:406:80: E501 line too long (82 > 79 characters)
            'context_distribution': dict(zip(self.context_types, probs.tolist())),
                                                                               ^
src/agents/context_aware_restoration.py:409:1: W293 blank line contains whitespace
        
^
src/agents/context_aware_restoration.py:418:1: W293 blank line contains whitespace
        
^
src/agents/context_aware_restoration.py:420:1: W293 blank line contains whitespace
    
^
src/agents/context_aware_restoration.py:429:1: W293 blank line contains whitespace
    
^
src/agents/context_aware_restoration.py:438:1: W293 blank line contains whitespace
    
^
src/agents/context_aware_restoration.py:442:33: W291 trailing whitespace
        torch.cuda.empty_cache()                                 ^
src/agents/context_aware_restoration.py:442:34: W292 no newline at end of file
        torch.cuda.empty_cache()                                  ^
src/agents/damage_classifier.py:3:80: E501 line too long (107 > 79 characters)
"""
Damage Classifier Agent
Automatically detects regions with dirt, mold, tears, water damage and directs the right AI repair strategy
"""
   
                       
                                                   ^
src/agents/damage_classifier.py:11:1: F401 'typing.Tuple' imported but unused
from typing import Dict, Any, List, Tuple
^
src/agents/damage_classifier.py:17:1: E302 expected 2 blank lines, found 1
class DamageClassifierAgent(BaseAgent):
^
src/agents/damage_classifier.py:28:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:33:80: E501 line too long (99 > 79 characters)
            logger.warning("Damage classification models are placeholders. Implement real models.")
                                                                               ^
src/agents/damage_classifier.py:34:1: W293 blank line contains whitespace
            
^
src/agents/damage_classifier.py:36:80: E501 line too long (83 > 79 characters)
            self.models['damage_classifier'] = await self._load_damage_classifier()
                                                                               ^
src/agents/damage_classifier.py:37:1: W293 blank line contains whitespace
            
^
src/agents/damage_classifier.py:39:80: E501 line too long (87 > 79 characters)
            self.models['damage_segmentation'] = await self._load_damage_segmentation()
                                                                               ^
src/agents/damage_classifier.py:40:1: W293 blank line contains whitespace
            
^
src/agents/damage_classifier.py:42:80: E501 line too long (83 > 79 characters)
            self.models['severity_assessor'] = await self._load_severity_assessor()
                                                                               ^
src/agents/damage_classifier.py:43:1: W293 blank line contains whitespace
            
^
src/agents/damage_classifier.py:46:1: W293 blank line contains whitespace
            
^
src/agents/damage_classifier.py:52:27: E128 continuation line under-indented for visual indent
                          std=[0.229, 0.224, 0.225])
                          ^
src/agents/damage_classifier.py:54:1: W293 blank line contains whitespace
            
^
src/agents/damage_classifier.py:56:1: W293 blank line contains whitespace
            
^
src/agents/damage_classifier.py:58:80: E501 line too long (83 > 79 characters)
            logger.error(f"Failed to initialize damage classification models: {e}")
                                                                               ^
src/agents/damage_classifier.py:60:1: W293 blank line contains whitespace
    
^
src/agents/damage_classifier.py:74:1: W293 blank line contains whitespace
            
^
src/agents/damage_classifier.py:79:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:81:1: W293 blank line contains whitespace
    
^
src/agents/damage_classifier.py:98:1: W293 blank line contains whitespace
            
^
src/agents/damage_classifier.py:102:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:104:1: W293 blank line contains whitespace
    
^
src/agents/damage_classifier.py:112:80: E501 line too long (101 > 79 characters)
                self.fc = nn.Linear(64, 5)  # Severity levels: none, mild, moderate, severe, critical
                                                                               ^
src/agents/damage_classifier.py:113:1: W293 blank line contains whitespace
            
^
src/agents/damage_classifier.py:118:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:120:1: W293 blank line contains whitespace
    
^
src/agents/damage_classifier.py:129:1: W293 blank line contains whitespace
            
^
src/agents/damage_classifier.py:134:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:136:1: W293 blank line contains whitespace
    
^
src/agents/damage_classifier.py:146:1: W293 blank line contains whitespace
            
^
src/agents/damage_classifier.py:149:1: W293 blank line contains whitespace
            
^
src/agents/damage_classifier.py:152:1: W293 blank line contains whitespace
            
^
src/agents/damage_classifier.py:162:1: W293 blank line contains whitespace
            
^
src/agents/damage_classifier.py:164:1: W293 blank line contains whitespace
            
^
src/agents/damage_classifier.py:168:1: W293 blank line contains whitespace
    
^
src/agents/damage_classifier.py:173:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:182:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:185:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:191:1: W293 blank line contains whitespace
    
^
src/agents/damage_classifier.py:196:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:199:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:201:80: E501 line too long (85 > 79 characters)
        damage_map = np.zeros((masks_np.shape[1], masks_np.shape[2]), dtype=np.uint8)
                                                                               ^
src/agents/damage_classifier.py:203:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:206:80: E501 line too long (92 > 79 characters)
                damage_map = np.maximum(damage_map, (mask > 0.3).astype(np.uint8) * (i + 1))
                                                                               ^
src/agents/damage_classifier.py:212:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:217:80: E501 line too long (85 > 79 characters)
            'total_damage_percentage': (damage_map > 0).sum() / damage_map.size * 100
                                                                               ^
src/agents/damage_classifier.py:219:1: W293 blank line contains whitespace
    
^
src/agents/damage_classifier.py:224:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:227:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:234:1: W293 blank line contains whitespace
    
^
src/agents/damage_classifier.py:235:80: E501 line too long (106 > 79 characters)
    async def _full_damage_analysis(self, x: torch.Tensor, original_image: Image.Image) -> Dict[str, Any]:
                                                                               ^
src/agents/damage_classifier.py:239:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:242:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:245:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:247:80: E501 line too long (96 > 79 characters)
        repair_strategies = await self._get_repair_strategies(x, damage_result, severity_result)
                                                                               ^
src/agents/damage_classifier.py:248:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:255:80: E501 line too long (86 > 79 characters)
            'total_damage_percentage': segmentation_result['total_damage_percentage'],
                                                                               ^
src/agents/damage_classifier.py:261:1: W293 blank line contains whitespace
    
^
src/agents/damage_classifier.py:262:80: E501 line too long (148 > 79 characters)
    async def _get_repair_strategies(self, x: torch.Tensor, damage_result: Dict[str, Any], severity_result: Dict[str, Any]) -> List[Dict[str, Any]]:
                                                                               ^
src/agents/damage_classifier.py:266:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:273:80: E501 line too long (85 > 79 characters)
            'mold_removal', 'stain_removal', 'tear_repair', 'water_damage_treatment',
                                                                               ^
src/agents/damage_classifier.py:276:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:282:80: E501 line too long (89 > 79 characters)
                    'applicable_damages': self._get_applicable_damages(strategy_names[i])
                                                                               ^
src/agents/damage_classifier.py:284:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:287:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:289:1: W293 blank line contains whitespace
    
^
src/agents/damage_classifier.py:314:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:316:1: W293 blank line contains whitespace
    
^
src/agents/damage_classifier.py:317:80: E501 line too long (110 > 79 characters)
    def _get_priority_actions(self, detected_damages: List[Dict[str, Any]], severity_level: str) -> List[str]:
                                                                               ^
src/agents/damage_classifier.py:320:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:324:80: E501 line too long (88 > 79 characters)
            if damage['damage_type'] in critical_damages and damage['confidence'] > 0.7:
                                                                               ^
src/agents/damage_classifier.py:325:80: E501 line too long (81 > 79 characters)
                priority_actions.append(f"URGENT: Treat {damage['damage_type']}")
                                                                               ^
src/agents/damage_classifier.py:326:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:331:80: E501 line too long (89 > 79 characters)
                priority_actions.append(f"High Priority: Repair {damage['damage_type']}")
                                                                               ^
src/agents/damage_classifier.py:332:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:337:80: E501 line too long (90 > 79 characters)
                priority_actions.append(f"Medium Priority: Clean {damage['damage_type']}")
                                                                               ^
src/agents/damage_classifier.py:338:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:341:80: E501 line too long (96 > 79 characters)
            priority_actions.insert(0, "CRITICAL: Immediate professional intervention required")
                                                                               ^
src/agents/damage_classifier.py:343:80: E501 line too long (86 > 79 characters)
            priority_actions.insert(0, "SEVERE: Professional restoration recommended")
                                                                               ^
src/agents/damage_classifier.py:346:1: W293 blank line contains whitespace
        
^
src/agents/damage_classifier.py:348:1: W293 blank line contains whitespace
    
^
src/agents/damage_classifier.py:352:33: W291 trailing whitespace
        torch.cuda.empty_cache()                                 ^
src/agents/damage_classifier.py:352:34: W292 no newline at end of file
        torch.cuda.empty_cache()                                  ^
src/agents/denoising.py:11:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, Optional
^
src/agents/denoising.py:17:1: E302 expected 2 blank lines, found 1
class DenoisingAgent(BaseAgent):
^
src/agents/denoising.py:23:1: W293 blank line contains whitespace
        
^
src/agents/denoising.py:28:80: E501 line too long (87 > 79 characters)
            logger.warning("Denoising models are placeholders. Implement real models.")
                                                                               ^
src/agents/denoising.py:29:1: W293 blank line contains whitespace
            
^
src/agents/denoising.py:31:80: E501 line too long (82 > 79 characters)
            self.models['gaussian_denoise'] = await self._load_gaussian_denoiser()
                                                                               ^
src/agents/denoising.py:32:1: W293 blank line contains whitespace
            
^
src/agents/denoising.py:34:80: E501 line too long (88 > 79 characters)
            self.models['salt_pepper_denoise'] = await self._load_salt_pepper_denoiser()
                                                                               ^
src/agents/denoising.py:35:1: W293 blank line contains whitespace
            
^
src/agents/denoising.py:37:80: E501 line too long (91 > 79 characters)
            self.models['jpeg_artifact_removal'] = await self._load_jpeg_artifact_remover()
                                                                               ^
src/agents/denoising.py:38:1: W293 blank line contains whitespace
            
^
src/agents/denoising.py:41:1: W293 blank line contains whitespace
            
^
src/agents/denoising.py:47:27: E128 continuation line under-indented for visual indent
                          std=[0.229, 0.224, 0.225])
                          ^
src/agents/denoising.py:49:1: W293 blank line contains whitespace
            
^
src/agents/denoising.py:51:1: W293 blank line contains whitespace
            
^
src/agents/denoising.py:55:1: W293 blank line contains whitespace
    
^
src/agents/denoising.py:72:1: W293 blank line contains whitespace
            
^
src/agents/denoising.py:76:1: W293 blank line contains whitespace
        
^
src/agents/denoising.py:78:1: W293 blank line contains whitespace
    
^
src/agents/denoising.py:85:1: W293 blank line contains whitespace
            
^
src/agents/denoising.py:88:1: W293 blank line contains whitespace
        
^
src/agents/denoising.py:90:1: W293 blank line contains whitespace
    
^
src/agents/denoising.py:97:1: W293 blank line contains whitespace
            
^
src/agents/denoising.py:100:1: W293 blank line contains whitespace
        
^
src/agents/denoising.py:102:1: W293 blank line contains whitespace
    
^
src/agents/denoising.py:109:1: W293 blank line contains whitespace
            
^
src/agents/denoising.py:112:1: W293 blank line contains whitespace
        
^
src/agents/denoising.py:114:1: W293 blank line contains whitespace
    
^
src/agents/denoising.py:124:1: W293 blank line contains whitespace
            
^
src/agents/denoising.py:127:1: W293 blank line contains whitespace
            
^
src/agents/denoising.py:130:1: W293 blank line contains whitespace
            
^
src/agents/denoising.py:143:1: W293 blank line contains whitespace
            
^
src/agents/denoising.py:146:1: W293 blank line contains whitespace
            
^
src/agents/denoising.py:152:1: W293 blank line contains whitespace
            
^
src/agents/denoising.py:158:80: E501 line too long (97 > 79 characters)
                'denoising_methods': ['gaussian', 'salt_pepper', 'jpeg_artifacts', 'motion_blur']
                                                                               ^
src/agents/denoising.py:160:1: W293 blank line contains whitespace
            
^
src/agents/denoising.py:164:1: W293 blank line contains whitespace
    
^
src/agents/denoising.py:170:1: W293 blank line contains whitespace
    
^
src/agents/denoising.py:175:1: W293 blank line contains whitespace
    
^
src/agents/denoising.py:176:80: E501 line too long (82 > 79 characters)
    async def _apply_salt_pepper_denoising(self, x: torch.Tensor) -> torch.Tensor:
                                                                               ^
src/agents/denoising.py:180:1: W293 blank line contains whitespace
    
^
src/agents/denoising.py:181:80: E501 line too long (82 > 79 characters)
    async def _apply_jpeg_artifact_removal(self, x: torch.Tensor) -> torch.Tensor:
                                                                               ^
src/agents/denoising.py:185:1: W293 blank line contains whitespace
    
^
src/agents/denoising.py:190:1: W293 blank line contains whitespace
    
^
src/agents/denoising.py:200:1: W293 blank line contains whitespace
    
^
src/agents/denoising.py:207:1: W293 blank line contains whitespace
    
^
src/agents/denoising.py:211:33: W291 trailing whitespace
        torch.cuda.empty_cache()                                 ^
src/agents/denoising.py:211:34: W292 no newline at end of file
        torch.cuda.empty_cache()                                  ^
src/agents/enhanced_image_restoration.py:13:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, Optional, List
^
src/agents/enhanced_image_restoration.py:13:1: F401 'typing.List' imported but unused
from typing import Dict, Any, Optional, List
^
src/agents/enhanced_image_restoration.py:14:1: F401 'asyncio' imported but unused
import asyncio
^
src/agents/enhanced_image_restoration.py:18:1: F401 '..core.config.config' imported but unused
from ..core.config import config
^
src/agents/enhanced_image_restoration.py:26:1: W293 blank line contains whitespace
    
^
src/agents/enhanced_image_restoration.py:34:1: W293 blank line contains whitespace
    
^
src/agents/enhanced_image_restoration.py:41:35: W291 trailing whitespace
                "noise_reduction", 
                                  ^
src/agents/enhanced_image_restoration.py:49:80: E501 line too long (81 > 79 characters)
            "description": "Advanced image restoration with multiple techniques",
                                                                               ^
src/agents/enhanced_image_restoration.py:54:1: W293 blank line contains whitespace
    
^
src/agents/enhanced_image_restoration.py:67:1: W293 blank line contains whitespace
    
^
src/agents/enhanced_image_restoration.py:73:1: W293 blank line contains whitespace
            
^
src/agents/enhanced_image_restoration.py:76:1: W293 blank line contains whitespace
            
^
src/agents/enhanced_image_restoration.py:78:1: W293 blank line contains whitespace
            
^
src/agents/enhanced_image_restoration.py:82:1: W293 blank line contains whitespace
    
^
src/agents/enhanced_image_restoration.py:92:38: W291 trailing whitespace
                'name': 'inpainting', 
                                     ^
src/agents/enhanced_image_restoration.py:112:1: W293 blank line contains whitespace
        
^
src/agents/enhanced_image_restoration.py:113:13: F402 import 'config' from line 18 shadowed by loop variable
        for config in model_configs:
            ^
src/agents/enhanced_image_restoration.py:117:1: W293 blank line contains whitespace
                    
^
src/agents/enhanced_image_restoration.py:122:1: W293 blank line contains whitespace
    
^
src/agents/enhanced_image_restoration.py:123:35: F811 redefinition of unused 'config' from line 18
    def _create_dummy_model(self, config: Dict[str, Any]) -> nn.Module:
                                  ^
src/agents/enhanced_image_restoration.py:133:1: W293 blank line contains whitespace
            
^
src/agents/enhanced_image_restoration.py:139:1: W293 blank line contains whitespace
        
^
src/agents/enhanced_image_restoration.py:143:1: W293 blank line contains whitespace
    
^
src/agents/enhanced_image_restoration.py:162:80: E501 line too long (82 > 79 characters)
                'conditional': lambda params: params.get('remove_artifacts', True)
                                                                               ^
src/agents/enhanced_image_restoration.py:168:80: E501 line too long (80 > 79 characters)
                'conditional': lambda params: params.get('enhance_colors', True)
                                                                               ^
src/agents/enhanced_image_restoration.py:188:1: W293 blank line contains whitespace
    
^
src/agents/enhanced_image_restoration.py:196:1: W293 blank line contains whitespace
            
^
src/agents/enhanced_image_restoration.py:202:1: W293 blank line contains whitespace
            
^
src/agents/enhanced_image_restoration.py:206:1: W293 blank line contains whitespace
            
^
src/agents/enhanced_image_restoration.py:209:80: E501 line too long (84 > 79 characters)
            x = await self._apply_processing_pipeline(x, params, processing_results)
                                                                               ^
src/agents/enhanced_image_restoration.py:210:1: W293 blank line contains whitespace
            
^
src/agents/enhanced_image_restoration.py:213:1: W293 blank line contains whitespace
            
^
src/agents/enhanced_image_restoration.py:219:1: W293 blank line contains whitespace
            
^
src/agents/enhanced_image_restoration.py:225:80: E501 line too long (87 > 79 characters)
                'pipeline_steps': [step['name'] for step in self.restoration_pipeline],
                                                                               ^
src/agents/enhanced_image_restoration.py:230:1: W293 blank line contains whitespace
            
^
src/agents/enhanced_image_restoration.py:234:1: W293 blank line contains whitespace
    
^
src/agents/enhanced_image_restoration.py:235:80: E501 line too long (129 > 79 characters)
    async def _apply_processing_pipeline(self, x: torch.Tensor, params: Dict[str, Any], results: Dict[str, Any]) -> torch.Tensor:
                                                                               ^
src/agents/enhanced_image_restoration.py:241:1: W293 blank line contains whitespace
            
^
src/agents/enhanced_image_restoration.py:244:80: E501 line too long (86 > 79 characters)
            results[step_name] = {'applied': True, 'description': step['description']}
                                                                               ^
src/agents/enhanced_image_restoration.py:245:1: W293 blank line contains whitespace
            
^
src/agents/enhanced_image_restoration.py:260:1: W293 blank line contains whitespace
        
^
src/agents/enhanced_image_restoration.py:262:1: W293 blank line contains whitespace
    
^
src/agents/enhanced_image_restoration.py:263:80: E501 line too long (95 > 79 characters)
    async def _preprocess_image(self, x: torch.Tensor, params: Dict[str, Any]) -> torch.Tensor:
                                                                               ^
src/agents/enhanced_image_restoration.py:273:1: W293 blank line contains whitespace
        
^
src/agents/enhanced_image_restoration.py:277:1: W293 blank line contains whitespace
    
^
src/agents/enhanced_image_restoration.py:285:1: W293 blank line contains whitespace
    
^
src/agents/enhanced_image_restoration.py:293:1: W293 blank line contains whitespace
    
^
src/agents/enhanced_image_restoration.py:294:80: E501 line too long (93 > 79 characters)
    async def _correct_colors(self, x: torch.Tensor, params: Dict[str, Any]) -> torch.Tensor:
                                                                               ^
src/agents/enhanced_image_restoration.py:301:1: W293 blank line contains whitespace
    
^
src/agents/enhanced_image_restoration.py:302:80: E501 line too long (92 > 79 characters)
    async def _inpaint_image(self, x: torch.Tensor, params: Dict[str, Any]) -> torch.Tensor:
                                                                               ^
src/agents/enhanced_image_restoration.py:306:1: W293 blank line contains whitespace
        
^
src/agents/enhanced_image_restoration.py:313:1: W293 blank line contains whitespace
            
^
src/agents/enhanced_image_restoration.py:317:1: W293 blank line contains whitespace
    
^
src/agents/enhanced_image_restoration.py:318:80: E501 line too long (92 > 79 characters)
    async def _upscale_image(self, x: torch.Tensor, params: Dict[str, Any]) -> torch.Tensor:
                                                                               ^
src/agents/enhanced_image_restoration.py:326:1: W293 blank line contains whitespace
    
^
src/agents/enhanced_image_restoration.py:327:80: E501 line too long (96 > 79 characters)
    async def _postprocess_image(self, x: torch.Tensor, params: Dict[str, Any]) -> torch.Tensor:
                                                                               ^
src/agents/enhanced_image_restoration.py:331:1: W293 blank line contains whitespace
        
^
src/agents/enhanced_image_restoration.py:335:1: W293 blank line contains whitespace
        
^
src/agents/enhanced_image_restoration.py:337:1: W293 blank line contains whitespace
    
^
src/agents/enhanced_image_restoration.py:343:1: W293 blank line contains whitespace
    
^
src/agents/enhanced_image_restoration.py:350:1: W293 blank line contains whitespace
    
^
src/agents/enhanced_image_restoration.py:357:1: W293 blank line contains whitespace
    
^
src/agents/enhanced_image_restoration.py:362:1: W293 blank line contains whitespace
    
^
src/agents/enhanced_image_restoration.py:366:1: W293 blank line contains whitespace
        
^
src/agents/enhanced_image_restoration.py:371:1: W293 blank line contains whitespace
        
^
src/agents/enhanced_image_restoration.py:378:1: E402 module level import not at top of file
from . import register_agent
^
src/agents/enhanced_image_restoration.py:379:72: W291 trailing whitespace
register_agent("enhanced_restoration", EnhancedImageRestorationAgent())                                                                        ^
src/agents/enhanced_image_restoration.py:379:73: W292 no newline at end of file
register_agent("enhanced_restoration", EnhancedImageRestorationAgent())                                                                         ^
src/agents/feedback_loop.py:3:80: E501 line too long (97 > 79 characters)
"""
Feedback Loop Agent
Auto-verifies output by comparing pre/post image structures and decides if reprocessing is needed
"""
   
                   
                                                       ^
src/agents/feedback_loop.py:11:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, List, Optional
^
src/agents/feedback_loop.py:17:1: E302 expected 2 blank lines, found 1
class FeedbackLoopAgent(BaseAgent):
^
src/agents/feedback_loop.py:24:1: W293 blank line contains whitespace
        
^
src/agents/feedback_loop.py:29:80: E501 line too long (91 > 79 characters)
            logger.warning("Feedback loop models are placeholders. Implement real models.")
                                                                               ^
src/agents/feedback_loop.py:30:1: W293 blank line contains whitespace
            
^
src/agents/feedback_loop.py:32:80: E501 line too long (81 > 79 characters)
            self.models['quality_assessor'] = await self._load_quality_assessor()
                                                                               ^
src/agents/feedback_loop.py:33:1: W293 blank line contains whitespace
            
^
src/agents/feedback_loop.py:35:80: E501 line too long (89 > 79 characters)
            self.models['structure_comparator'] = await self._load_structure_comparator()
                                                                               ^
src/agents/feedback_loop.py:36:1: W293 blank line contains whitespace
            
^
src/agents/feedback_loop.py:39:1: W293 blank line contains whitespace
            
^
src/agents/feedback_loop.py:41:80: E501 line too long (91 > 79 characters)
            self.models['improvement_predictor'] = await self._load_improvement_predictor()
                                                                               ^
src/agents/feedback_loop.py:42:1: W293 blank line contains whitespace
            
^
src/agents/feedback_loop.py:48:27: E128 continuation line under-indented for visual indent
                          std=[0.229, 0.224, 0.225])
                          ^
src/agents/feedback_loop.py:50:1: W293 blank line contains whitespace
            
^
src/agents/feedback_loop.py:52:1: W293 blank line contains whitespace
            
^
src/agents/feedback_loop.py:56:1: W293 blank line contains whitespace
    
^
src/agents/feedback_loop.py:65:1: W293 blank line contains whitespace
            
^
src/agents/feedback_loop.py:70:1: W293 blank line contains whitespace
        
^
src/agents/feedback_loop.py:72:1: W293 blank line contains whitespace
    
^
src/agents/feedback_loop.py:78:80: E501 line too long (83 > 79 characters)
                self.conv = nn.Conv2d(6, 64, 3, padding=1)  # 2 images concatenated
                                                                               ^
src/agents/feedback_loop.py:81:1: W293 blank line contains whitespace
            
^
src/agents/feedback_loop.py:87:1: W293 blank line contains whitespace
        
^
src/agents/feedback_loop.py:89:1: W293 blank line contains whitespace
    
^
src/agents/feedback_loop.py:95:80: E501 line too long (100 > 79 characters)
                self.fc1 = nn.Linear(4, 64)  # quality, structure, iteration, improvement_prediction
                                                                               ^
src/agents/feedback_loop.py:97:80: E501 line too long (80 > 79 characters)
                self.fc3 = nn.Linear(32, 3)  # continue, stop, adjust_parameters
                                                                               ^
src/agents/feedback_loop.py:98:1: W293 blank line contains whitespace
        
^
src/agents/feedback_loop.py:103:1: W293 blank line contains whitespace
        
^
src/agents/feedback_loop.py:105:1: W293 blank line contains whitespace
    
^
src/agents/feedback_loop.py:114:1: W293 blank line contains whitespace
            
^
src/agents/feedback_loop.py:119:1: W293 blank line contains whitespace
        
^
src/agents/feedback_loop.py:121:1: W293 blank line contains whitespace
    
^
src/agents/feedback_loop.py:129:1: W293 blank line contains whitespace
            
^
src/agents/feedback_loop.py:134:1: W293 blank line contains whitespace
            
^
src/agents/feedback_loop.py:139:1: W293 blank line contains whitespace
            
^
src/agents/feedback_loop.py:141:80: E501 line too long (84 > 79 characters)
            input_tensor = self.transforms(input_image).unsqueeze(0).to(self.device)
                                                                               ^
src/agents/feedback_loop.py:142:80: E501 line too long (86 > 79 characters)
            output_tensor = self.transforms(output_image).unsqueeze(0).to(self.device)
                                                                               ^
src/agents/feedback_loop.py:143:1: W293 blank line contains whitespace
            
^
src/agents/feedback_loop.py:146:80: E501 line too long (93 > 79 characters)
            structure_similarity = await self._compare_structure(input_tensor, output_tensor)
                                                                               ^
src/agents/feedback_loop.py:147:80: E501 line too long (83 > 79 characters)
            improvement_prediction = await self._predict_improvement(output_tensor)
                                                                               ^
src/agents/feedback_loop.py:148:1: W293 blank line contains whitespace
            
^
src/agents/feedback_loop.py:151:80: E501 line too long (86 > 79 characters)
                quality_score, structure_similarity, iteration, improvement_prediction
                                                                               ^
src/agents/feedback_loop.py:153:1: W293 blank line contains whitespace
            
^
src/agents/feedback_loop.py:165:1: W293 blank line contains whitespace
            
^
src/agents/feedback_loop.py:169:1: W293 blank line contains whitespace
    
^
src/agents/feedback_loop.py:174:1: W293 blank line contains whitespace
    
^
src/agents/feedback_loop.py:175:80: E501 line too long (110 > 79 characters)
    async def _compare_structure(self, input_image: torch.Tensor, output_image: torch.Tensor) -> torch.Tensor:
                                                                               ^
src/agents/feedback_loop.py:178:80: E501 line too long (81 > 79 characters)
            return self.models['structure_comparator'](input_image, output_image)
                                                                               ^
src/agents/feedback_loop.py:179:1: W293 blank line contains whitespace
    
^
src/agents/feedback_loop.py:184:1: W293 blank line contains whitespace
    
^
src/agents/feedback_loop.py:185:80: E501 line too long (133 > 79 characters)
    async def _make_decision(self, quality: torch.Tensor, structure: torch.Tensor, iteration: int, improvement: torch.Tensor) -> str:
                                                                               ^
src/agents/feedback_loop.py:195:1: W293 blank line contains whitespace
            
^
src/agents/feedback_loop.py:198:1: W293 blank line contains whitespace
            
^
src/agents/feedback_loop.py:202:1: W293 blank line contains whitespace
            
^
src/agents/feedback_loop.py:204:1: W293 blank line contains whitespace
    
^
src/agents/feedback_loop.py:205:80: E501 line too long (135 > 79 characters)
    async def evaluate_processing_chain(self, original_image: torch.Tensor, processed_results: List[Dict[str, Any]]) -> Dict[str, Any]:
                                                                               ^
src/agents/feedback_loop.py:208:1: W293 blank line contains whitespace
        
^
src/agents/feedback_loop.py:211:80: E501 line too long (100 > 79 characters)
                output_tensor = self.transforms(result['output_image']).unsqueeze(0).to(self.device)
                                                                               ^
src/agents/feedback_loop.py:212:1: W293 blank line contains whitespace
                
^
src/agents/feedback_loop.py:214:80: E501 line too long (88 > 79 characters)
                structure = await self._compare_structure(original_image, output_tensor)
                                                                               ^
src/agents/feedback_loop.py:216:1: W293 blank line contains whitespace
                
^
src/agents/feedback_loop.py:224:1: W293 blank line contains whitespace
        
^
src/agents/feedback_loop.py:227:1: W293 blank line contains whitespace
        
^
src/agents/feedback_loop.py:234:1: W293 blank line contains whitespace
    
^
src/agents/feedback_loop.py:235:80: E501 line too long (88 > 79 characters)
    def _generate_recommendations(self, evaluations: List[Dict[str, Any]]) -> List[str]:
                                                                               ^
src/agents/feedback_loop.py:238:1: W293 blank line contains whitespace
        
^
src/agents/feedback_loop.py:241:1: W293 blank line contains whitespace
        
^
src/agents/feedback_loop.py:245:80: E501 line too long (102 > 79 characters)
            recommendations.append("Quality has degraded. Consider stopping or adjusting parameters.")
                                                                               ^
src/agents/feedback_loop.py:246:1: W293 blank line contains whitespace
        
^
src/agents/feedback_loop.py:250:80: E501 line too long (110 > 79 characters)
            recommendations.append("Structure similarity is low. Consider using structure-preserving agents.")
                                                                               ^
src/agents/feedback_loop.py:251:1: W293 blank line contains whitespace
        
^
src/agents/feedback_loop.py:255:80: E501 line too long (112 > 79 characters)
            recommendations.append("High improvement potential detected. Consider additional processing steps.")
                                                                               ^
src/agents/feedback_loop.py:256:1: W293 blank line contains whitespace
        
^
src/agents/feedback_loop.py:258:1: W293 blank line contains whitespace
    
^
src/agents/feedback_loop.py:262:33: W291 trailing whitespace
        torch.cuda.empty_cache()                                 ^
src/agents/feedback_loop.py:262:34: W292 no newline at end of file
        torch.cuda.empty_cache()                                  ^
src/agents/forensic_analysis.py:3:80: E501 line too long (85 > 79 characters)
"""
Forensic Analysis Agent
Specialized agent for scientific examination and evidence-based restoration decisions
"""
   
                       
                                                   ^
src/agents/forensic_analysis.py:8:1: F401 'torch.nn.functional as F' imported but unused
import torch.nn.functional as F
^
src/agents/forensic_analysis.py:11:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, Optional, List, Tuple
^
src/agents/forensic_analysis.py:11:1: F401 'typing.Tuple' imported but unused
from typing import Dict, Any, Optional, List, Tuple
^
src/agents/forensic_analysis.py:12:1: F401 'cv2' imported but unused
import cv2
^
src/agents/forensic_analysis.py:18:1: E302 expected 2 blank lines, found 1
class ForensicAnalysisAgent(BaseAgent):
^
src/agents/forensic_analysis.py:28:1: W293 blank line contains whitespace
        
^
src/agents/forensic_analysis.py:34:1: W293 blank line contains whitespace
            
^
src/agents/forensic_analysis.py:36:80: E501 line too long (87 > 79 characters)
            self.models['noise_fingerprinter'] = await self._load_noise_fingerprinter()
                                                                               ^
src/agents/forensic_analysis.py:37:1: W293 blank line contains whitespace
            
^
src/agents/forensic_analysis.py:39:80: E501 line too long (89 > 79 characters)
            self.models['compression_detector'] = await self._load_compression_detector()
                                                                               ^
src/agents/forensic_analysis.py:40:1: W293 blank line contains whitespace
            
^
src/agents/forensic_analysis.py:42:80: E501 line too long (85 > 79 characters)
            self.models['tampering_detector'] = await self._load_tampering_detector()
                                                                               ^
src/agents/forensic_analysis.py:43:1: W293 blank line contains whitespace
            
^
src/agents/forensic_analysis.py:46:1: W293 blank line contains whitespace
            
^
src/agents/forensic_analysis.py:48:80: E501 line too long (83 > 79 characters)
            self.models['lighting_analyzer'] = await self._load_lighting_analyzer()
                                                                               ^
src/agents/forensic_analysis.py:49:1: W293 blank line contains whitespace
            
^
src/agents/forensic_analysis.py:51:80: E501 line too long (91 > 79 characters)
            self.models['perspective_forensics'] = await self._load_perspective_forensics()
                                                                               ^
src/agents/forensic_analysis.py:52:1: W293 blank line contains whitespace
            
^
src/agents/forensic_analysis.py:54:1: W293 blank line contains whitespace
            
^
src/agents/forensic_analysis.py:58:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:70:1: W293 blank line contains whitespace
                    
^
src/agents/forensic_analysis.py:76:1: W293 blank line contains whitespace
                    
^
src/agents/forensic_analysis.py:82:1: W293 blank line contains whitespace
                
^
src/agents/forensic_analysis.py:92:1: W293 blank line contains whitespace
            
^
src/agents/forensic_analysis.py:97:1: W293 blank line contains whitespace
        
^
src/agents/forensic_analysis.py:99:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:111:1: W293 blank line contains whitespace
                    
^
src/agents/forensic_analysis.py:117:1: W293 blank line contains whitespace
                    
^
src/agents/forensic_analysis.py:123:1: W293 blank line contains whitespace
                
^
src/agents/forensic_analysis.py:133:1: W293 blank line contains whitespace
            
^
src/agents/forensic_analysis.py:138:1: W293 blank line contains whitespace
        
^
src/agents/forensic_analysis.py:140:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:152:1: W293 blank line contains whitespace
                    
^
src/agents/forensic_analysis.py:158:1: W293 blank line contains whitespace
                    
^
src/agents/forensic_analysis.py:164:1: W293 blank line contains whitespace
                
^
src/agents/forensic_analysis.py:174:1: W293 blank line contains whitespace
            
^
src/agents/forensic_analysis.py:179:1: W293 blank line contains whitespace
        
^
src/agents/forensic_analysis.py:181:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:193:1: W293 blank line contains whitespace
                    
^
src/agents/forensic_analysis.py:199:1: W293 blank line contains whitespace
                    
^
src/agents/forensic_analysis.py:205:1: W293 blank line contains whitespace
                
^
src/agents/forensic_analysis.py:214:1: W293 blank line contains whitespace
            
^
src/agents/forensic_analysis.py:219:1: W293 blank line contains whitespace
        
^
src/agents/forensic_analysis.py:221:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:233:1: W293 blank line contains whitespace
                    
^
src/agents/forensic_analysis.py:239:1: W293 blank line contains whitespace
                    
^
src/agents/forensic_analysis.py:245:1: W293 blank line contains whitespace
                
^
src/agents/forensic_analysis.py:255:1: W293 blank line contains whitespace
            
^
src/agents/forensic_analysis.py:260:1: W293 blank line contains whitespace
        
^
src/agents/forensic_analysis.py:262:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:274:1: W293 blank line contains whitespace
                    
^
src/agents/forensic_analysis.py:280:1: W293 blank line contains whitespace
                    
^
src/agents/forensic_analysis.py:286:1: W293 blank line contains whitespace
                
^
src/agents/forensic_analysis.py:296:1: W293 blank line contains whitespace
            
^
src/agents/forensic_analysis.py:301:1: W293 blank line contains whitespace
        
^
src/agents/forensic_analysis.py:303:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:315:1: W293 blank line contains whitespace
                    
^
src/agents/forensic_analysis.py:321:1: W293 blank line contains whitespace
                    
^
src/agents/forensic_analysis.py:327:1: W293 blank line contains whitespace
                
^
src/agents/forensic_analysis.py:337:1: W293 blank line contains whitespace
            
^
src/agents/forensic_analysis.py:342:1: W293 blank line contains whitespace
        
^
src/agents/forensic_analysis.py:344:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:354:1: W293 blank line contains whitespace
            
^
src/agents/forensic_analysis.py:357:1: W293 blank line contains whitespace
            
^
src/agents/forensic_analysis.py:366:1: W293 blank line contains whitespace
            
^
src/agents/forensic_analysis.py:370:80: E501 line too long (88 > 79 characters)
                tampering_map, color_forensics, lighting_analysis, perspective_forensics
                                                                               ^
src/agents/forensic_analysis.py:372:1: W293 blank line contains whitespace
            
^
src/agents/forensic_analysis.py:375:1: W293 blank line contains whitespace
            
^
src/agents/forensic_analysis.py:383:80: E501 line too long (95 > 79 characters)
                'tampering_map': tampering_map.tolist() if tampering_map is not None else None,
                                                                               ^
src/agents/forensic_analysis.py:388:1: W293 blank line contains whitespace
            
^
src/agents/forensic_analysis.py:392:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:397:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:402:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:407:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:412:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:417:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:422:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:427:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:429:34: E128 continuation line under-indented for visual indent
                                 noise_fingerprint: torch.Tensor,
                                 ^
src/agents/forensic_analysis.py:430:34: E128 continuation line under-indented for visual indent
                                 compression_artifacts: torch.Tensor,
                                 ^
src/agents/forensic_analysis.py:431:34: E128 continuation line under-indented for visual indent
                                 tampering_map: torch.Tensor,
                                 ^
src/agents/forensic_analysis.py:432:34: E128 continuation line under-indented for visual indent
                                 color_forensics: torch.Tensor,
                                 ^
src/agents/forensic_analysis.py:433:34: E128 continuation line under-indented for visual indent
                                 lighting_analysis: torch.Tensor,
                                 ^
src/agents/forensic_analysis.py:434:34: E128 continuation line under-indented for visual indent
                                 perspective_forensics: torch.Tensor) -> Dict[str, Any]:
                                 ^
src/agents/forensic_analysis.py:434:80: E501 line too long (88 > 79 characters)
                                 perspective_forensics: torch.Tensor) -> Dict[str, Any]:
                                                                               ^
src/agents/forensic_analysis.py:438:80: E501 line too long (91 > 79 characters)
            'compression_analysis': self._analyze_compression_level(compression_artifacts),
                                                                               ^
src/agents/forensic_analysis.py:439:80: E501 line too long (84 > 79 characters)
            'noise_characteristics': self._analyze_noise_pattern(noise_fingerprint),
                                                                               ^
src/agents/forensic_analysis.py:440:80: E501 line too long (81 > 79 characters)
            'color_consistency': self._assess_color_consistency(color_forensics),
                                                                               ^
src/agents/forensic_analysis.py:441:80: E501 line too long (89 > 79 characters)
            'lighting_consistency': self._assess_lighting_consistency(lighting_analysis),
                                                                               ^
src/agents/forensic_analysis.py:442:80: E501 line too long (97 > 79 characters)
            'perspective_analysis': self._analyze_perspective_consistency(perspective_forensics),
                                                                               ^
src/agents/forensic_analysis.py:446:80: E501 line too long (88 > 79 characters)
                tampering_map, color_forensics, lighting_analysis, perspective_forensics
                                                                               ^
src/agents/forensic_analysis.py:450:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:451:80: E501 line too long (82 > 79 characters)
    def _assess_authenticity(self, tampering_map: torch.Tensor) -> Dict[str, Any]:
                                                                               ^
src/agents/forensic_analysis.py:455:1: W293 blank line contains whitespace
        
^
src/agents/forensic_analysis.py:462:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:463:80: E501 line too long (96 > 79 characters)
    def _analyze_compression_level(self, compression_artifacts: torch.Tensor) -> Dict[str, Any]:
                                                                               ^
src/agents/forensic_analysis.py:468:80: E501 line too long (115 > 79 characters)
            'quality_impact': 'high' if compression_score > 0.7 else 'medium' if compression_score > 0.3 else 'low'
                                                                               ^
src/agents/forensic_analysis.py:470:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:471:80: E501 line too long (88 > 79 characters)
    def _analyze_noise_pattern(self, noise_fingerprint: torch.Tensor) -> Dict[str, Any]:
                                                                               ^
src/agents/forensic_analysis.py:479:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:480:80: E501 line too long (89 > 79 characters)
    def _assess_color_consistency(self, color_forensics: torch.Tensor) -> Dict[str, Any]:
                                                                               ^
src/agents/forensic_analysis.py:487:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:488:80: E501 line too long (94 > 79 characters)
    def _assess_lighting_consistency(self, lighting_analysis: torch.Tensor) -> Dict[str, Any]:
                                                                               ^
src/agents/forensic_analysis.py:495:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:496:80: E501 line too long (102 > 79 characters)
    def _analyze_perspective_consistency(self, perspective_forensics: torch.Tensor) -> Dict[str, Any]:
                                                                               ^
src/agents/forensic_analysis.py:501:80: E501 line too long (81 > 79 characters)
            'status': 'consistent' if perspective_score > 0.7 else 'inconsistent'
                                                                               ^
src/agents/forensic_analysis.py:503:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:504:80: E501 line too long (86 > 79 characters)
    def _assess_pixel_integrity(self, pixel_analysis: torch.Tensor) -> Dict[str, Any]:
                                                                               ^
src/agents/forensic_analysis.py:509:80: E501 line too long (102 > 79 characters)
            'status': 'good' if integrity_score > 0.7 else 'fair' if integrity_score > 0.4 else 'poor'
                                                                               ^
src/agents/forensic_analysis.py:511:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:514:80: E501 line too long (95 > 79 characters)
        scores = [float(torch.mean(analysis)) for analysis in analyses if analysis is not None]
                                                                               ^
src/agents/forensic_analysis.py:516:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:526:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:527:80: E501 line too long (86 > 79 characters)
    def _generate_recommendations(self, forensic_report: Dict[str, Any]) -> List[str]:
                                                                               ^
src/agents/forensic_analysis.py:530:1: W293 blank line contains whitespace
        
^
src/agents/forensic_analysis.py:532:80: E501 line too long (91 > 79 characters)
            recommendations.append("Image shows signs of tampering - proceed with caution")
                                                                               ^
src/agents/forensic_analysis.py:533:1: W293 blank line contains whitespace
        
^
src/agents/forensic_analysis.py:535:80: E501 line too long (110 > 79 characters)
            recommendations.append("High compression artifacts detected - apply compression artifact removal")
                                                                               ^
src/agents/forensic_analysis.py:536:1: W293 blank line contains whitespace
        
^
src/agents/forensic_analysis.py:538:80: E501 line too long (88 > 79 characters)
            recommendations.append("Significant noise detected - apply noise reduction")
                                                                               ^
src/agents/forensic_analysis.py:539:1: W293 blank line contains whitespace
        
^
src/agents/forensic_analysis.py:541:80: E501 line too long (93 > 79 characters)
            recommendations.append("Color inconsistencies detected - apply color correction")
                                                                               ^
src/agents/forensic_analysis.py:542:1: W293 blank line contains whitespace
        
^
src/agents/forensic_analysis.py:544:80: E501 line too long (99 > 79 characters)
            recommendations.append("Lighting inconsistencies detected - apply lighting correction")
                                                                               ^
src/agents/forensic_analysis.py:545:1: W293 blank line contains whitespace
        
^
src/agents/forensic_analysis.py:547:80: E501 line too long (90 > 79 characters)
            recommendations.append("Poor pixel integrity - apply pixel-level restoration")
                                                                               ^
src/agents/forensic_analysis.py:548:1: W293 blank line contains whitespace
        
^
src/agents/forensic_analysis.py:550:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:559:1: W293 blank line contains whitespace
    
^
src/agents/forensic_analysis.py:563:33: W291 trailing whitespace
        torch.cuda.empty_cache()                                 ^
src/agents/forensic_analysis.py:563:34: W292 no newline at end of file
        torch.cuda.empty_cache()                                  ^
src/agents/generative.py:11:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, Optional
^
src/agents/generative.py:17:1: E302 expected 2 blank lines, found 1
class GenerativeAgent(BaseAgent):
^
src/agents/generative.py:23:1: W293 blank line contains whitespace
        
^
src/agents/generative.py:28:80: E501 line too long (104 > 79 characters)
            logger.warning("Generative models are placeholders. Implement real SDXL-Turbo/Kandinsky-3.")
                                                                               ^
src/agents/generative.py:29:1: W293 blank line contains whitespace
            
^
src/agents/generative.py:31:80: E501 line too long (81 > 79 characters)
            self.models['text_to_image'] = await self._load_text_to_image_model()
                                                                               ^
src/agents/generative.py:32:1: W293 blank line contains whitespace
            
^
src/agents/generative.py:34:80: E501 line too long (83 > 79 characters)
            self.models['image_to_image'] = await self._load_image_to_image_model()
                                                                               ^
src/agents/generative.py:35:1: W293 blank line contains whitespace
            
^
src/agents/generative.py:38:1: W293 blank line contains whitespace
            
^
src/agents/generative.py:44:27: E128 continuation line under-indented for visual indent
                          std=[0.229, 0.224, 0.225])
                          ^
src/agents/generative.py:46:1: W293 blank line contains whitespace
            
^
src/agents/generative.py:48:1: W293 blank line contains whitespace
            
^
src/agents/generative.py:52:1: W293 blank line contains whitespace
    
^
src/agents/generative.py:59:1: W293 blank line contains whitespace
            
^
src/agents/generative.py:60:80: E501 line too long (84 > 79 characters)
            def forward(self, prompt, height=512, width=512, num_inference_steps=1):
                                                                               ^
src/agents/generative.py:65:1: W293 blank line contains whitespace
        
^
src/agents/generative.py:67:1: W293 blank line contains whitespace
    
^
src/agents/generative.py:74:1: W293 blank line contains whitespace
            
^
src/agents/generative.py:77:1: W293 blank line contains whitespace
        
^
src/agents/generative.py:79:1: W293 blank line contains whitespace
    
^
src/agents/generative.py:86:1: W293 blank line contains whitespace
            
^
src/agents/generative.py:91:1: W293 blank line contains whitespace
        
^
src/agents/generative.py:93:1: W293 blank line contains whitespace
    
^
src/agents/generative.py:98:1: W293 blank line contains whitespace
            
^
src/agents/generative.py:107:1: W293 blank line contains whitespace
                
^
src/agents/generative.py:111:1: W293 blank line contains whitespace
    
^
src/agents/generative.py:118:1: W293 blank line contains whitespace
        
^
src/agents/generative.py:120:80: E501 line too long (82 > 79 characters)
            generated = self.models['text_to_image'](prompt, height, width, steps)
                                                                               ^
src/agents/generative.py:121:1: W293 blank line contains whitespace
        
^
src/agents/generative.py:123:1: W293 blank line contains whitespace
        
^
src/agents/generative.py:128:1: W293 blank line contains whitespace
        
^
src/agents/generative.py:140:1: W293 blank line contains whitespace
    
^
src/agents/generative.py:146:1: W293 blank line contains whitespace
        
^
src/agents/generative.py:151:1: W293 blank line contains whitespace
        
^
src/agents/generative.py:153:1: W293 blank line contains whitespace
        
^
src/agents/generative.py:156:1: W293 blank line contains whitespace
        
^
src/agents/generative.py:158:1: W293 blank line contains whitespace
        
^
src/agents/generative.py:163:1: W293 blank line contains whitespace
        
^
src/agents/generative.py:171:1: W293 blank line contains whitespace
    
^
src/agents/generative.py:177:1: W293 blank line contains whitespace
        
^
src/agents/generative.py:182:1: W293 blank line contains whitespace
        
^
src/agents/generative.py:187:1: W293 blank line contains whitespace
        
^
src/agents/generative.py:190:1: W293 blank line contains whitespace
        
^
src/agents/generative.py:193:1: W293 blank line contains whitespace
        
^
src/agents/generative.py:195:1: W293 blank line contains whitespace
        
^
src/agents/generative.py:200:1: W293 blank line contains whitespace
        
^
src/agents/generative.py:207:1: W293 blank line contains whitespace
    
^
src/agents/generative.py:214:1: W293 blank line contains whitespace
    
^
src/agents/generative.py:218:33: W291 trailing whitespace
        torch.cuda.empty_cache()                                 ^
src/agents/generative.py:218:34: W292 no newline at end of file
        torch.cuda.empty_cache()                                  ^
src/agents/hyper_orchestrator.py:6:1: F401 'asyncio' imported but unused
import asyncio
^
src/agents/hyper_orchestrator.py:7:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, List, Optional
^
src/agents/hyper_orchestrator.py:20:1: E302 expected 2 blank lines, found 1
class HyperOrchestrator(BaseAgent):
^
src/agents/hyper_orchestrator.py:32:80: E501 line too long (90 > 79 characters)
            logger.info(f"Initializing HyperOrchestrator with LLM: {self.llm_model_name}")
                                                                               ^
src/agents/hyper_orchestrator.py:35:80: E501 line too long (83 > 79 characters)
                self.tokenizer = AutoTokenizer.from_pretrained(self.llm_model_name)
                                                                               ^
src/agents/hyper_orchestrator.py:36:80: E501 line too long (84 > 79 characters)
                self.llm = AutoModelForCausalLM.from_pretrained(self.llm_model_name)
                                                                               ^
src/agents/hyper_orchestrator.py:39:80: E501 line too long (109 > 79 characters)
                logger.warning("Transformers not available or LLM model not installed. Using fallback mode.")
                                                                               ^
src/agents/hyper_orchestrator.py:46:80: E501 line too long (88 > 79 characters)
        """Process a high-level task using LLM-powered agent selection and sequencing"""
                                                                               ^
src/agents/hyper_orchestrator.py:63:80: E501 line too long (98 > 79 characters)
                result = await self.base_orchestrator.execute_single_agent(agent_name, agent_task)
                                                                               ^
src/agents/hyper_orchestrator.py:78:80: E501 line too long (80 > 79 characters)
        """Use the LLM to select and sequence agents based on the instruction"""
                                                                               ^
src/agents/hyper_orchestrator.py:81:80: E501 line too long (91 > 79 characters)
                "You are an expert AI orchestrator. Given the following user instruction, "
                                                                               ^
src/agents/hyper_orchestrator.py:82:80: E501 line too long (80 > 79 characters)
                "select the most appropriate sequence of agents from the list: "
                                                                               ^
src/agents/hyper_orchestrator.py:89:80: E501 line too long (82 > 79 characters)
            response = self.tokenizer.decode(outputs[0], skip_special_tokens=True)
                                                                               ^
src/agents/hyper_orchestrator.py:93:80: E501 line too long (88 > 79 characters)
                agent_sequence = ast.literal_eval(response.split("[")[-1].split("]")[0])
                                                                               ^
src/agents/hyper_orchestrator.py:104:80: E501 line too long (129 > 79 characters)
                return ["forensic_analysis", "material_recognition", "damage_classifier", "image_restoration", "meta_correction"]
                                                                               ^
src/agents/hyper_orchestrator.py:115:36: W291 trailing whitespace
        self.is_initialized = False                                    ^
src/agents/hyper_orchestrator.py:115:37: W292 no newline at end of file
        self.is_initialized = False                                     ^
src/agents/hyperspectral_recovery.py:3:80: E501 line too long (116 > 79 characters)
"""
Hyperspectral Texture Recovery Agent
Recovers fine textures invisible in RGB scans (e.g., cloth, parchment grain) using simulated hyperspectral synthesis
"""
   
                                    
                                      ^
src/agents/hyperspectral_recovery.py:11:1: F401 'typing.List' imported but unused
from typing import Dict, Any, List, Tuple
^
src/agents/hyperspectral_recovery.py:11:1: F401 'typing.Tuple' imported but unused
from typing import Dict, Any, List, Tuple
^
src/agents/hyperspectral_recovery.py:17:1: E302 expected 2 blank lines, found 1
class HyperspectralRecoveryAgent(BaseAgent):
^
src/agents/hyperspectral_recovery.py:31:1: W293 blank line contains whitespace
        
^
src/agents/hyperspectral_recovery.py:36:80: E501 line too long (100 > 79 characters)
            logger.warning("Hyperspectral recovery models are placeholders. Implement real models.")
                                                                               ^
src/agents/hyperspectral_recovery.py:37:1: W293 blank line contains whitespace
            
^
src/agents/hyperspectral_recovery.py:39:80: E501 line too long (93 > 79 characters)
            self.models['spectral_reconstructor'] = await self._load_spectral_reconstructor()
                                                                               ^
src/agents/hyperspectral_recovery.py:40:1: W293 blank line contains whitespace
            
^
src/agents/hyperspectral_recovery.py:42:80: E501 line too long (91 > 79 characters)
            self.models['reflectance_predictor'] = await self._load_reflectance_predictor()
                                                                               ^
src/agents/hyperspectral_recovery.py:43:1: W293 blank line contains whitespace
            
^
src/agents/hyperspectral_recovery.py:45:80: E501 line too long (81 > 79 characters)
            self.models['texture_enhancer'] = await self._load_texture_enhancer()
                                                                               ^
src/agents/hyperspectral_recovery.py:46:1: W293 blank line contains whitespace
            
^
src/agents/hyperspectral_recovery.py:49:1: W293 blank line contains whitespace
            
^
src/agents/hyperspectral_recovery.py:55:27: E128 continuation line under-indented for visual indent
                          std=[0.229, 0.224, 0.225])
                          ^
src/agents/hyperspectral_recovery.py:57:1: W293 blank line contains whitespace
            
^
src/agents/hyperspectral_recovery.py:59:1: W293 blank line contains whitespace
            
^
src/agents/hyperspectral_recovery.py:61:80: E501 line too long (84 > 79 characters)
            logger.error(f"Failed to initialize hyperspectral recovery models: {e}")
                                                                               ^
src/agents/hyperspectral_recovery.py:63:1: W293 blank line contains whitespace
    
^
src/agents/hyperspectral_recovery.py:85:1: W293 blank line contains whitespace
            
^
src/agents/hyperspectral_recovery.py:89:1: W293 blank line contains whitespace
        
^
src/agents/hyperspectral_recovery.py:91:1: W293 blank line contains whitespace
    
^
src/agents/hyperspectral_recovery.py:100:1: W293 blank line contains whitespace
            
^
src/agents/hyperspectral_recovery.py:105:1: W293 blank line contains whitespace
        
^
src/agents/hyperspectral_recovery.py:107:1: W293 blank line contains whitespace
    
^
src/agents/hyperspectral_recovery.py:113:80: E501 line too long (83 > 79 characters)
                self.conv1 = nn.Conv2d(34, 64, 3, padding=1)  # 3 RGB + 31 spectral
                                                                               ^
src/agents/hyperspectral_recovery.py:116:1: W293 blank line contains whitespace
            
^
src/agents/hyperspectral_recovery.py:122:1: W293 blank line contains whitespace
        
^
src/agents/hyperspectral_recovery.py:124:1: W293 blank line contains whitespace
    
^
src/agents/hyperspectral_recovery.py:133:1: W293 blank line contains whitespace
            
^
src/agents/hyperspectral_recovery.py:142:1: W293 blank line contains whitespace
        
^
src/agents/hyperspectral_recovery.py:144:1: W293 blank line contains whitespace
    
^
src/agents/hyperspectral_recovery.py:152:1: W293 blank line contains whitespace
    
^
src/agents/hyperspectral_recovery.py:159:1: W293 blank line contains whitespace
    
^
src/agents/hyperspectral_recovery.py:166:1: W293 blank line contains whitespace
    
^
src/agents/hyperspectral_recovery.py:173:1: W293 blank line contains whitespace
    
^
src/agents/hyperspectral_recovery.py:180:1: W293 blank line contains whitespace
    
^
src/agents/hyperspectral_recovery.py:190:1: W293 blank line contains whitespace
            
^
src/agents/hyperspectral_recovery.py:193:1: W293 blank line contains whitespace
            
^
src/agents/hyperspectral_recovery.py:196:1: W293 blank line contains whitespace
            
^
src/agents/hyperspectral_recovery.py:199:1: W293 blank line contains whitespace
            
^
src/agents/hyperspectral_recovery.py:208:80: E501 line too long (89 > 79 characters)
                result = await self._full_hyperspectral_recovery(x, material_type, image)
                                                                               ^
src/agents/hyperspectral_recovery.py:209:1: W293 blank line contains whitespace
            
^
src/agents/hyperspectral_recovery.py:214:1: W293 blank line contains whitespace
                
^
src/agents/hyperspectral_recovery.py:220:1: W293 blank line contains whitespace
            
^
src/agents/hyperspectral_recovery.py:222:1: W293 blank line contains whitespace
            
^
src/agents/hyperspectral_recovery.py:226:1: W293 blank line contains whitespace
    
^
src/agents/hyperspectral_recovery.py:231:1: W293 blank line contains whitespace
        
^
src/agents/hyperspectral_recovery.py:234:1: W293 blank line contains whitespace
        
^
src/agents/hyperspectral_recovery.py:242:1: W293 blank line contains whitespace
    
^
src/agents/hyperspectral_recovery.py:243:80: E501 line too long (92 > 79 characters)
    async def _enhance_texture(self, x: torch.Tensor, material_type: str) -> Dict[str, Any]:
                                                                               ^
src/agents/hyperspectral_recovery.py:246:9: F841 local variable 'spectral_data' is assigned to but never used
        spectral_data = await self._reconstruct_spectrum(x)
        ^
src/agents/hyperspectral_recovery.py:247:1: W293 blank line contains whitespace
        
^
src/agents/hyperspectral_recovery.py:251:61: W291 trailing whitespace
                self.material_reflectance_db[material_type], 
                                                            ^
src/agents/hyperspectral_recovery.py:258:80: E501 line too long (87 > 79 characters)
                material_reflectance = material_reflectance.unsqueeze(-1).unsqueeze(-1)
                                                                               ^
src/agents/hyperspectral_recovery.py:259:1: W293 blank line contains whitespace
        
^
src/agents/hyperspectral_recovery.py:263:1: W293 blank line contains whitespace
        
^
src/agents/hyperspectral_recovery.py:270:1: W293 blank line contains whitespace
    
^
src/agents/hyperspectral_recovery.py:271:80: E501 line too long (84 > 79 characters)
    async def _analyze_material_properties(self, x: torch.Tensor) -> Dict[str, Any]:
                                                                               ^
src/agents/hyperspectral_recovery.py:275:1: W293 blank line contains whitespace
        
^
src/agents/hyperspectral_recovery.py:278:1: W293 blank line contains whitespace
        
^
src/agents/hyperspectral_recovery.py:282:80: E501 line too long (91 > 79 characters)
            'spectral_smoothness': float(1.0 / (1.0 + np.sum(np.diff(spectral_curve)**2))),
                                                                               ^
src/agents/hyperspectral_recovery.py:287:1: W293 blank line contains whitespace
        
^
src/agents/hyperspectral_recovery.py:296:1: W293 blank line contains whitespace
    
^
src/agents/hyperspectral_recovery.py:297:80: E501 line too long (133 > 79 characters)
    async def _full_hyperspectral_recovery(self, x: torch.Tensor, material_type: str, original_image: Image.Image) -> Dict[str, Any]:
                                                                               ^
src/agents/hyperspectral_recovery.py:301:1: W293 blank line contains whitespace
        
^
src/agents/hyperspectral_recovery.py:304:1: W293 blank line contains whitespace
        
^
src/agents/hyperspectral_recovery.py:307:1: W293 blank line contains whitespace
        
^
src/agents/hyperspectral_recovery.py:310:80: E501 line too long (113 > 79 characters)
            spectral_tensor = torch.tensor(spectral_result['spectral_data'], dtype=torch.float32).to(self.device)
                                                                               ^
src/agents/hyperspectral_recovery.py:311:13: F841 local variable 'fused_enhancement' is assigned to but never used
            fused_enhancement = self.models['spectral_fusion'](spectral_tensor)
            ^
src/agents/hyperspectral_recovery.py:312:1: W293 blank line contains whitespace
        
^
src/agents/hyperspectral_recovery.py:324:1: W293 blank line contains whitespace
    
^
src/agents/hyperspectral_recovery.py:330:1: W293 blank line contains whitespace
    
^
src/agents/hyperspectral_recovery.py:331:80: E501 line too long (81 > 79 characters)
    def _identify_material(self, spectral_curve: np.ndarray) -> Dict[str, float]:
                                                                               ^
src/agents/hyperspectral_recovery.py:334:1: W293 blank line contains whitespace
        
^
src/agents/hyperspectral_recovery.py:339:1: W293 blank line contains whitespace
        
^
src/agents/hyperspectral_recovery.py:341:80: E501 line too long (89 > 79 characters)
        confidences = dict(sorted(confidences.items(), key=lambda x: x[1], reverse=True))
                                                                               ^
src/agents/hyperspectral_recovery.py:342:1: W293 blank line contains whitespace
        
^
src/agents/hyperspectral_recovery.py:344:1: W293 blank line contains whitespace
    
^
src/agents/hyperspectral_recovery.py:351:1: W293 blank line contains whitespace
    
^
src/agents/hyperspectral_recovery.py:355:33: W291 trailing whitespace
        torch.cuda.empty_cache()                                 ^
src/agents/hyperspectral_recovery.py:355:34: W292 no newline at end of file
        torch.cuda.empty_cache()                                  ^
src/agents/image_restoration.py:12:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, Optional, List
^
src/agents/image_restoration.py:12:1: F401 'typing.List' imported but unused
from typing import Dict, Any, Optional, List
^
src/agents/image_restoration.py:14:1: F401 'cv2' imported but unused
import cv2
^
src/agents/image_restoration.py:15:1: F401 'os' imported but unused
import os
^
src/agents/image_restoration.py:19:1: F401 '..core.config.config' imported but unused
from ..core.config import config
^
src/agents/image_restoration.py:22:1: E302 expected 2 blank lines, found 1
class ImageRestorationAgent(BaseAgent):
^
src/agents/image_restoration.py:27:1: W293 blank line contains whitespace
    
^
src/agents/image_restoration.py:40:1: W293 blank line contains whitespace
        
^
src/agents/image_restoration.py:51:80: E501 line too long (94 > 79 characters)
                'url': 'https://huggingface.co/caidas/swin2SR-realworld-sr-x4-64-bsrgan-psnr',
                                                                               ^
src/agents/image_restoration.py:57:80: E501 line too long (85 > 79 characters)
                'url': 'https://huggingface.co/runwayml/stable-diffusion-inpainting',
                                                                               ^
src/agents/image_restoration.py:62:1: W293 blank line contains whitespace
    
^
src/agents/image_restoration.py:69:80: E501 line too long (82 > 79 characters)
                T.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
                                                                               ^
src/agents/image_restoration.py:81:1: W293 blank line contains whitespace
    
^
src/agents/image_restoration.py:85:80: E501 line too long (83 > 79 characters)
            logger.info("Initializing Image Restoration Agent with real models...")
                                                                               ^
src/agents/image_restoration.py:86:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:89:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:93:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:96:80: E501 line too long (87 > 79 characters)
            self.models['super_resolution'] = await self._load_super_resolution_model()
                                                                               ^
src/agents/image_restoration.py:97:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:101:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:103:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:107:1: W293 blank line contains whitespace
    
^
src/agents/image_restoration.py:116:80: E501 line too long (91 > 79 characters)
                checkpoint = torch.load(model_path / "model.pth", map_location=self.device)
                                                                               ^
src/agents/image_restoration.py:123:80: E501 line too long (99 > 79 characters)
                logger.warning("Pre-trained denoising model not found, using basic implementation")
                                                                               ^
src/agents/image_restoration.py:125:1: W293 blank line contains whitespace
                
^
src/agents/image_restoration.py:129:1: W293 blank line contains whitespace
    
^
src/agents/image_restoration.py:136:80: E501 line too long (83 > 79 characters)
                layers.append(nn.Conv2d(3, num_features, kernel_size=3, padding=1))
                                                                               ^
src/agents/image_restoration.py:138:1: W293 blank line contains whitespace
                
^
src/agents/image_restoration.py:140:80: E501 line too long (98 > 79 characters)
                    layers.append(nn.Conv2d(num_features, num_features, kernel_size=3, padding=1))
                                                                               ^
src/agents/image_restoration.py:143:1: W293 blank line contains whitespace
                
^
src/agents/image_restoration.py:144:80: E501 line too long (83 > 79 characters)
                layers.append(nn.Conv2d(num_features, 3, kernel_size=3, padding=1))
                                                                               ^
src/agents/image_restoration.py:146:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:149:1: W293 blank line contains whitespace
        
^
src/agents/image_restoration.py:151:1: W293 blank line contains whitespace
    
^
src/agents/image_restoration.py:168:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:172:1: W293 blank line contains whitespace
        
^
src/agents/image_restoration.py:176:1: W293 blank line contains whitespace
    
^
src/agents/image_restoration.py:185:80: E501 line too long (91 > 79 characters)
                checkpoint = torch.load(model_path / "model.pth", map_location=self.device)
                                                                               ^
src/agents/image_restoration.py:192:80: E501 line too long (106 > 79 characters)
                logger.warning("Pre-trained super-resolution model not found, using basic implementation")
                                                                               ^
src/agents/image_restoration.py:194:1: W293 blank line contains whitespace
                
^
src/agents/image_restoration.py:198:1: W293 blank line contains whitespace
    
^
src/agents/image_restoration.py:205:1: W293 blank line contains whitespace
                
^
src/agents/image_restoration.py:213:1: W293 blank line contains whitespace
                
^
src/agents/image_restoration.py:223:1: W293 blank line contains whitespace
                
^
src/agents/image_restoration.py:226:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:231:1: W293 blank line contains whitespace
        
^
src/agents/image_restoration.py:233:1: W293 blank line contains whitespace
    
^
src/agents/image_restoration.py:242:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:246:1: W293 blank line contains whitespace
        
^
src/agents/image_restoration.py:250:1: W293 blank line contains whitespace
    
^
src/agents/image_restoration.py:259:80: E501 line too long (91 > 79 characters)
                checkpoint = torch.load(model_path / "model.pth", map_location=self.device)
                                                                               ^
src/agents/image_restoration.py:266:80: E501 line too long (100 > 79 characters)
                logger.warning("Pre-trained inpainting model not found, using basic implementation")
                                                                               ^
src/agents/image_restoration.py:268:1: W293 blank line contains whitespace
                
^
src/agents/image_restoration.py:272:1: W293 blank line contains whitespace
    
^
src/agents/image_restoration.py:285:1: W293 blank line contains whitespace
                
^
src/agents/image_restoration.py:293:1: W293 blank line contains whitespace
                
^
src/agents/image_restoration.py:303:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:309:1: W293 blank line contains whitespace
        
^
src/agents/image_restoration.py:311:1: W293 blank line contains whitespace
    
^
src/agents/image_restoration.py:317:80: E501 line too long (88 > 79 characters)
                self.conv = nn.Conv2d(4, 3, 3, padding=1)  # 3 channels + 1 mask channel
                                                                               ^
src/agents/image_restoration.py:318:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:322:1: W293 blank line contains whitespace
        
^
src/agents/image_restoration.py:326:1: W293 blank line contains whitespace
    
^
src/agents/image_restoration.py:336:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:340:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:346:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:348:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:350:80: E501 line too long (82 > 79 characters)
            if restoration_type == 'comprehensive' or params.get('denoise', True):
                                                                               ^
src/agents/image_restoration.py:353:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:354:80: E501 line too long (94 > 79 characters)
            if restoration_type == 'comprehensive' or params.get('enhance_resolution', False):
                                                                               ^
src/agents/image_restoration.py:355:80: E501 line too long (81 > 79 characters)
                current_image = await self._apply_super_resolution(current_image)
                                                                               ^
src/agents/image_restoration.py:357:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:360:80: E501 line too long (81 > 79 characters)
                current_image = await self._apply_inpainting(current_image, mask)
                                                                               ^
src/agents/image_restoration.py:362:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:368:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:370:80: E501 line too long (94 > 79 characters)
            results['quality_metrics'] = self._calculate_quality_metrics(image, current_image)
                                                                               ^
src/agents/image_restoration.py:374:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:376:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:384:1: W293 blank line contains whitespace
    
^
src/agents/image_restoration.py:390:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:393:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:397:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:400:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:404:1: W293 blank line contains whitespace
    
^
src/agents/image_restoration.py:410:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:413:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:417:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:420:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:424:1: W293 blank line contains whitespace
    
^
src/agents/image_restoration.py:430:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:433:80: E501 line too long (80 > 79 characters)
            mask_tensor = self._prepare_mask(mask, x.shape[-2:]).to(self.device)
                                                                               ^
src/agents/image_restoration.py:434:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:438:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:441:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:445:1: W293 blank line contains whitespace
    
^
src/agents/image_restoration.py:452:1: W293 blank line contains whitespace
    
^
src/agents/image_restoration.py:459:1: W293 blank line contains whitespace
        
^
src/agents/image_restoration.py:462:1: W293 blank line contains whitespace
        
^
src/agents/image_restoration.py:465:80: E501 line too long (88 > 79 characters)
        return mask_tensor.unsqueeze(0).unsqueeze(0)  # Add batch and channel dimensions
                                                                               ^
src/agents/image_restoration.py:466:1: W293 blank line contains whitespace
    
^
src/agents/image_restoration.py:467:80: E501 line too long (108 > 79 characters)
    def _calculate_quality_metrics(self, original: Image.Image, processed: Image.Image) -> Dict[str, float]:
                                                                               ^
src/agents/image_restoration.py:473:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:479:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:482:80: E501 line too long (83 > 79 characters)
            psnr = 20 * np.log10(255.0 / np.sqrt(mse)) if mse > 0 else float('inf')
                                                                               ^
src/agents/image_restoration.py:483:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:486:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:492:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:496:1: W293 blank line contains whitespace
    
^
src/agents/image_restoration.py:506:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:509:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:511:80: E501 line too long (82 > 79 characters)
            ssim = ((2 * mu1 * mu2 + c1) * (2 * sigma12 + c2)) / \
                   ((mu1 ** 2 + mu2 ** 2 + c1) * (sigma1 ** 2 + sigma2 ** 2 + c2))
                                                                  
            ^
src/agents/image_restoration.py:512:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:514:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:517:1: W293 blank line contains whitespace
    
^
src/agents/image_restoration.py:525:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:529:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:531:1: W293 blank line contains whitespace
            
^
src/agents/image_restoration.py:545:1: W293 blank line contains whitespace
        
^
src/agents/image_restoration.py:562:1: W293 blank line contains whitespace
        
^
src/agents/image_restoration.py:567:1: W293 blank line contains whitespace
        
^
src/agents/image_restoration.py:610:80: E501 line too long (84 > 79 characters)
            "tasks": ["denoising", "super_resolution", "inpainting", "enhancement"],
                                                                               ^
src/agents/llm_client.py:5:1: E302 expected 2 blank lines, found 1
class LLMClient:
^
src/agents/llm_client.py:15:80: E501 line too long (114 > 79 characters)
    def llm_parse(self, command: str, context: Dict[str, Any], history: List[str] = None) -> List[Dict[str, Any]]:
                                                                               ^
src/agents/llm_client.py:23:80: E501 line too long (140 > 79 characters)
        prompt = "You are an AI workflow assistant. Given the user's command, context, and history, output a list of agent tasks in JSON.\n"
                                                                               ^
src/agents/llm_client.py:58:80: E501 line too long (84 > 79 characters)
            r = requests.post(self.endpoint, headers=headers, json=data, timeout=30)
                                                                               ^
src/agents/llm_client.py:68:76: W291 trailing whitespace
# steps = llm.llm_parse("Restore and upscale this image", context, history)                                                                            ^
src/agents/llm_client.py:68:77: W292 no newline at end of file
# steps = llm.llm_parse("Restore and upscale this image", context, history)                                                                             ^
src/agents/llm_meta_agent.py:53:20: W291 trailing whitespace
        return True                    ^
src/agents/llm_meta_agent.py:53:21: W292 no newline at end of file
        return True                     ^
src/agents/material_recognition.py:3:80: E501 line too long (109 > 79 characters)
"""
Material Recognition Agent
Classifies regions by material type (metal, paper, cloth, etc.) and applies restoration filters intelligently
"""
   
                          
                                                ^
src/agents/material_recognition.py:11:1: F401 'typing.Tuple' imported but unused
from typing import Dict, Any, List, Tuple
^
src/agents/material_recognition.py:17:1: E302 expected 2 blank lines, found 1
class MaterialRecognitionAgent(BaseAgent):
^
src/agents/material_recognition.py:24:67: W291 trailing whitespace
            'metal', 'paper', 'cloth', 'wood', 'stone', 'ceramic', 
                                                                  ^
src/agents/material_recognition.py:28:1: W293 blank line contains whitespace
        
^
src/agents/material_recognition.py:33:80: E501 line too long (98 > 79 characters)
            logger.warning("Material recognition models are placeholders. Implement real models.")
                                                                               ^
src/agents/material_recognition.py:34:1: W293 blank line contains whitespace
            
^
src/agents/material_recognition.py:36:80: E501 line too long (87 > 79 characters)
            self.models['material_classifier'] = await self._load_material_classifier()
                                                                               ^
src/agents/material_recognition.py:37:1: W293 blank line contains whitespace
            
^
src/agents/material_recognition.py:39:80: E501 line too long (81 > 79 characters)
            self.models['texture_analyzer'] = await self._load_texture_analyzer()
                                                                               ^
src/agents/material_recognition.py:40:1: W293 blank line contains whitespace
            
^
src/agents/material_recognition.py:42:80: E501 line too long (85 > 79 characters)
            self.models['surface_properties'] = await self._load_surface_properties()
                                                                               ^
src/agents/material_recognition.py:43:1: W293 blank line contains whitespace
            
^
src/agents/material_recognition.py:45:80: E501 line too long (89 > 79 characters)
            self.models['material_restoration'] = await self._load_material_restoration()
                                                                               ^
src/agents/material_recognition.py:46:1: W293 blank line contains whitespace
            
^
src/agents/material_recognition.py:52:27: E128 continuation line under-indented for visual indent
                          std=[0.229, 0.224, 0.225])
                          ^
src/agents/material_recognition.py:54:1: W293 blank line contains whitespace
            
^
src/agents/material_recognition.py:56:1: W293 blank line contains whitespace
            
^
src/agents/material_recognition.py:58:80: E501 line too long (82 > 79 characters)
            logger.error(f"Failed to initialize material recognition models: {e}")
                                                                               ^
src/agents/material_recognition.py:60:1: W293 blank line contains whitespace
    
^
src/agents/material_recognition.py:74:1: W293 blank line contains whitespace
            
^
src/agents/material_recognition.py:79:1: W293 blank line contains whitespace
        
^
src/agents/material_recognition.py:81:1: W293 blank line contains whitespace
    
^
src/agents/material_recognition.py:90:1: W293 blank line contains whitespace
            
^
src/agents/material_recognition.py:95:1: W293 blank line contains whitespace
        
^
src/agents/material_recognition.py:97:1: W293 blank line contains whitespace
    
^
src/agents/material_recognition.py:105:80: E501 line too long (87 > 79 characters)
                self.fc = nn.Linear(32, 8)  # Properties: roughness, reflectivity, etc.
                                                                               ^
src/agents/material_recognition.py:106:1: W293 blank line contains whitespace
            
^
src/agents/material_recognition.py:111:1: W293 blank line contains whitespace
        
^
src/agents/material_recognition.py:113:1: W293 blank line contains whitespace
    
^
src/agents/material_recognition.py:119:80: E501 line too long (83 > 79 characters)
                self.conv = nn.Conv2d(6, 64, 3, padding=1)  # image + material mask
                                                                               ^
src/agents/material_recognition.py:122:1: W293 blank line contains whitespace
            
^
src/agents/material_recognition.py:128:1: W293 blank line contains whitespace
        
^
src/agents/material_recognition.py:130:1: W293 blank line contains whitespace
    
^
src/agents/material_recognition.py:140:1: W293 blank line contains whitespace
            
^
src/agents/material_recognition.py:143:1: W293 blank line contains whitespace
            
^
src/agents/material_recognition.py:146:1: W293 blank line contains whitespace
            
^
src/agents/material_recognition.py:156:1: W293 blank line contains whitespace
            
^
src/agents/material_recognition.py:161:1: W293 blank line contains whitespace
                
^
src/agents/material_recognition.py:167:1: W293 blank line contains whitespace
            
^
src/agents/material_recognition.py:169:1: W293 blank line contains whitespace
            
^
src/agents/material_recognition.py:173:1: W293 blank line contains whitespace
    
^
src/agents/material_recognition.py:178:1: W293 blank line contains whitespace
        
^
src/agents/material_recognition.py:181:1: W293 blank line contains whitespace
        
^
src/agents/material_recognition.py:190:1: W293 blank line contains whitespace
        
^
src/agents/material_recognition.py:196:1: W293 blank line contains whitespace
    
^
src/agents/material_recognition.py:201:1: W293 blank line contains whitespace
        
^
src/agents/material_recognition.py:209:1: W293 blank line contains whitespace
        
^
src/agents/material_recognition.py:215:1: W293 blank line contains whitespace
    
^
src/agents/material_recognition.py:216:80: E501 line too long (82 > 79 characters)
    async def _detect_surface_properties(self, x: torch.Tensor) -> Dict[str, Any]:
                                                                               ^
src/agents/material_recognition.py:220:1: W293 blank line contains whitespace
        
^
src/agents/material_recognition.py:231:1: W293 blank line contains whitespace
        
^
src/agents/material_recognition.py:237:1: W293 blank line contains whitespace
    
^
src/agents/material_recognition.py:238:80: E501 line too long (108 > 79 characters)
    async def _full_material_analysis(self, x: torch.Tensor, original_image: Image.Image) -> Dict[str, Any]:
                                                                               ^
src/agents/material_recognition.py:242:1: W293 blank line contains whitespace
        
^
src/agents/material_recognition.py:245:1: W293 blank line contains whitespace
        
^
src/agents/material_recognition.py:248:1: W293 blank line contains whitespace
        
^
src/agents/material_recognition.py:250:80: E501 line too long (83 > 79 characters)
        restored_image = await self._apply_material_restoration(x, material_result)
                                                                               ^
src/agents/material_recognition.py:251:1: W293 blank line contains whitespace
        
^
src/agents/material_recognition.py:264:1: W293 blank line contains whitespace
    
^
src/agents/material_recognition.py:265:80: E501 line too long (113 > 79 characters)
    async def _apply_material_restoration(self, x: torch.Tensor, material_result: Dict[str, Any]) -> Image.Image:
                                                                               ^
src/agents/material_recognition.py:268:80: E501 line too long (81 > 79 characters)
        material_mask = torch.zeros(1, 3, x.shape[2], x.shape[3]).to(self.device)
                                                                               ^
src/agents/material_recognition.py:269:1: W293 blank line contains whitespace
        
^
src/agents/material_recognition.py:272:1: W293 blank line contains whitespace
        
^
src/agents/material_recognition.py:274:1: W293 blank line contains whitespace
    
^
src/agents/material_recognition.py:275:80: E501 line too long (136 > 79 characters)
    def _get_recommended_treatments(self, material: str, texture_props: Dict[str, float], surface_props: Dict[str, float]) -> List[str]:
                                                                               ^
src/agents/material_recognition.py:278:1: W293 blank line contains whitespace
        
^
src/agents/material_recognition.py:285:1: W293 blank line contains whitespace
                
^
src/agents/material_recognition.py:292:1: W293 blank line contains whitespace
                
^
src/agents/material_recognition.py:299:1: W293 blank line contains whitespace
                
^
src/agents/material_recognition.py:305:1: W293 blank line contains whitespace
        
^
src/agents/material_recognition.py:307:1: W293 blank line contains whitespace
    
^
src/agents/material_recognition.py:314:1: W293 blank line contains whitespace
    
^
src/agents/material_recognition.py:318:33: W291 trailing whitespace
        torch.cuda.empty_cache()                                 ^
src/agents/material_recognition.py:318:34: W292 no newline at end of file
        torch.cuda.empty_cache()                                  ^
src/agents/meta_correction.py:8:1: F401 'torch.nn.functional as F' imported but unused
import torch.nn.functional as F
^
src/agents/meta_correction.py:11:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, Optional, List, Tuple
^
src/agents/meta_correction.py:11:1: F401 'typing.List' imported but unused
from typing import Dict, Any, Optional, List, Tuple
^
src/agents/meta_correction.py:11:1: F401 'typing.Tuple' imported but unused
from typing import Dict, Any, Optional, List, Tuple
^
src/agents/meta_correction.py:12:1: F401 'cv2' imported but unused
import cv2
^
src/agents/meta_correction.py:18:1: E302 expected 2 blank lines, found 1
class MetaCorrectionAgent(BaseAgent):
^
src/agents/meta_correction.py:24:1: W293 blank line contains whitespace
        
^
src/agents/meta_correction.py:29:80: E501 line too long (81 > 79 characters)
            self.models['quality_assessor'] = await self._load_quality_assessor()
                                                                               ^
src/agents/meta_correction.py:30:1: W293 blank line contains whitespace
            
^
src/agents/meta_correction.py:33:1: W293 blank line contains whitespace
            
^
src/agents/meta_correction.py:36:1: W293 blank line contains whitespace
            
^
src/agents/meta_correction.py:38:80: E501 line too long (87 > 79 characters)
            self.models['consistency_checker'] = await self._load_consistency_checker()
                                                                               ^
src/agents/meta_correction.py:39:1: W293 blank line contains whitespace
            
^
src/agents/meta_correction.py:42:1: W293 blank line contains whitespace
            
^
src/agents/meta_correction.py:44:1: W293 blank line contains whitespace
            
^
src/agents/meta_correction.py:48:1: W293 blank line contains whitespace
    
^
src/agents/meta_correction.py:58:1: W293 blank line contains whitespace
                    
^
src/agents/meta_correction.py:64:1: W293 blank line contains whitespace
                    
^
src/agents/meta_correction.py:71:1: W293 blank line contains whitespace
                
^
src/agents/meta_correction.py:79:1: W293 blank line contains whitespace
            
^
src/agents/meta_correction.py:84:1: W293 blank line contains whitespace
        
^
src/agents/meta_correction.py:86:1: W293 blank line contains whitespace
    
^
src/agents/meta_correction.py:98:1: W293 blank line contains whitespace
                    
^
src/agents/meta_correction.py:104:1: W293 blank line contains whitespace
                    
^
src/agents/meta_correction.py:110:1: W293 blank line contains whitespace
                
^
src/agents/meta_correction.py:120:1: W293 blank line contains whitespace
            
^
src/agents/meta_correction.py:125:1: W293 blank line contains whitespace
        
^
src/agents/meta_correction.py:127:1: W293 blank line contains whitespace
    
^
src/agents/meta_correction.py:139:1: W293 blank line contains whitespace
                    
^
src/agents/meta_correction.py:145:1: W293 blank line contains whitespace
                    
^
src/agents/meta_correction.py:151:1: W293 blank line contains whitespace
                
^
src/agents/meta_correction.py:157:1: W293 blank line contains whitespace
                    
^
src/agents/meta_correction.py:162:1: W293 blank line contains whitespace
                    
^
src/agents/meta_correction.py:166:1: W293 blank line contains whitespace
            
^
src/agents/meta_correction.py:171:1: W293 blank line contains whitespace
        
^
src/agents/meta_correction.py:173:1: W293 blank line contains whitespace
    
^
src/agents/meta_correction.py:180:80: E501 line too long (82 > 79 characters)
                    nn.Conv2d(6, 64, 3, padding=1),  # 6 channels for before/after
                                                                               ^
src/agents/meta_correction.py:185:1: W293 blank line contains whitespace
                    
^
src/agents/meta_correction.py:192:1: W293 blank line contains whitespace
                
^
src/agents/meta_correction.py:199:1: W293 blank line contains whitespace
            
^
src/agents/meta_correction.py:203:80: E501 line too long (82 > 79 characters)
                consistency = self.classifier(features.view(features.size(0), -1))
                                                                               ^
src/agents/meta_correction.py:205:1: W293 blank line contains whitespace
        
^
src/agents/meta_correction.py:207:1: W293 blank line contains whitespace
    
^
src/agents/meta_correction.py:219:1: W293 blank line contains whitespace
                    
^
src/agents/meta_correction.py:225:1: W293 blank line contains whitespace
                    
^
src/agents/meta_correction.py:231:1: W293 blank line contains whitespace
                
^
src/agents/meta_correction.py:240:1: W293 blank line contains whitespace
            
^
src/agents/meta_correction.py:245:1: W293 blank line contains whitespace
        
^
src/agents/meta_correction.py:247:1: W293 blank line contains whitespace
    
^
src/agents/meta_correction.py:257:1: W293 blank line contains whitespace
            
^
src/agents/meta_correction.py:260:1: W293 blank line contains whitespace
            
^
src/agents/meta_correction.py:263:1: W293 blank line contains whitespace
            
^
src/agents/meta_correction.py:266:1: W293 blank line contains whitespace
            
^
src/agents/meta_correction.py:269:1: W293 blank line contains whitespace
            
^
src/agents/meta_correction.py:272:1: W293 blank line contains whitespace
            
^
src/agents/meta_correction.py:277:1: W293 blank line contains whitespace
                
^
src/agents/meta_correction.py:279:80: E501 line too long (85 > 79 characters)
                consistency_score = await self._check_consistency(x, corrected_image)
                                                                               ^
src/agents/meta_correction.py:280:1: W293 blank line contains whitespace
                
^
src/agents/meta_correction.py:283:1: W293 blank line contains whitespace
                
^
src/agents/meta_correction.py:290:1: W293 blank line contains whitespace
            
^
src/agents/meta_correction.py:296:1: W293 blank line contains whitespace
            
^
src/agents/meta_correction.py:302:80: E501 line too long (80 > 79 characters)
                'critique': critique.tolist() if critique is not None else None,
                                                                               ^
src/agents/meta_correction.py:306:80: E501 line too long (82 > 79 characters)
                'error_map': error_map.tolist() if error_map is not None else None
                                                                               ^
src/agents/meta_correction.py:308:1: W293 blank line contains whitespace
            
^
src/agents/meta_correction.py:312:1: W293 blank line contains whitespace
    
^
src/agents/meta_correction.py:317:1: W293 blank line contains whitespace
    
^
src/agents/meta_correction.py:322:1: W293 blank line contains whitespace
    
^
src/agents/meta_correction.py:327:1: W293 blank line contains whitespace
    
^
src/agents/meta_correction.py:328:80: E501 line too long (98 > 79 characters)
    async def _check_consistency(self, before: torch.Tensor, after: torch.Tensor) -> torch.Tensor:
                                                                               ^
src/agents/meta_correction.py:332:1: W293 blank line contains whitespace
    
^
src/agents/meta_correction.py:337:1: W293 blank line contains whitespace
    
^
src/agents/meta_correction.py:346:1: W293 blank line contains whitespace
    
^
src/agents/meta_correction.py:355:1: W293 blank line contains whitespace
    
^
src/agents/meta_correction.py:359:33: W291 trailing whitespace
        torch.cuda.empty_cache()                                 ^
src/agents/meta_correction.py:359:34: W292 no newline at end of file
        torch.cuda.empty_cache()                                  ^
src/agents/multi_agent_orchestrator.py:21:58: E999 SyntaxError: invalid syntax. Perhaps you forgot a comma?
        self, sender: str, receiver: str, message: Dict[e the sucess rate str, Any]
                                                         ^
src/agents/neural_radiance.py:11:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, Optional, Tuple
^
src/agents/neural_radiance.py:11:1: F401 'typing.Tuple' imported but unused
from typing import Dict, Any, Optional, Tuple
^
src/agents/neural_radiance.py:17:1: E302 expected 2 blank lines, found 1
class NeuralRadianceAgent(BaseAgent):
^
src/agents/neural_radiance.py:23:1: W293 blank line contains whitespace
        
^
src/agents/neural_radiance.py:28:80: E501 line too long (98 > 79 characters)
            logger.warning("NeRF models are placeholders. Implement real Neural Radiance Fields.")
                                                                               ^
src/agents/neural_radiance.py:29:1: W293 blank line contains whitespace
            
^
src/agents/neural_radiance.py:32:1: W293 blank line contains whitespace
            
^
src/agents/neural_radiance.py:34:80: E501 line too long (85 > 79 characters)
            self.models['pose_estimation'] = await self._load_pose_estimation_model()
                                                                               ^
src/agents/neural_radiance.py:35:1: W293 blank line contains whitespace
            
^
src/agents/neural_radiance.py:37:80: E501 line too long (85 > 79 characters)
            self.models['mesh_generation'] = await self._load_mesh_generation_model()
                                                                               ^
src/agents/neural_radiance.py:38:1: W293 blank line contains whitespace
            
^
src/agents/neural_radiance.py:44:27: E128 continuation line under-indented for visual indent
                          std=[0.229, 0.224, 0.225])
                          ^
src/agents/neural_radiance.py:46:1: W293 blank line contains whitespace
            
^
src/agents/neural_radiance.py:48:1: W293 blank line contains whitespace
            
^
src/agents/neural_radiance.py:52:1: W293 blank line contains whitespace
    
^
src/agents/neural_radiance.py:58:80: E501 line too long (86 > 79 characters)
                self.fc1 = nn.Linear(63, 256)  # 3D position + 2D direction + encoding
                                                                               ^
src/agents/neural_radiance.py:61:1: W293 blank line contains whitespace
            
^
src/agents/neural_radiance.py:66:1: W293 blank line contains whitespace
        
^
src/agents/neural_radiance.py:68:1: W293 blank line contains whitespace
    
^
src/agents/neural_radiance.py:75:1: W293 blank line contains whitespace
            
^
src/agents/neural_radiance.py:78:1: W293 blank line contains whitespace
        
^
src/agents/neural_radiance.py:80:1: W293 blank line contains whitespace
    
^
src/agents/neural_radiance.py:87:1: W293 blank line contains whitespace
            
^
src/agents/neural_radiance.py:90:1: W293 blank line contains whitespace
        
^
src/agents/neural_radiance.py:92:1: W293 blank line contains whitespace
    
^
src/agents/neural_radiance.py:97:1: W293 blank line contains whitespace
            
^
src/agents/neural_radiance.py:106:1: W293 blank line contains whitespace
                
^
src/agents/neural_radiance.py:110:1: W293 blank line contains whitespace
    
^
src/agents/neural_radiance.py:111:80: E501 line too long (89 > 79 characters)
    async def _single_image_reconstruction(self, task: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
src/agents/neural_radiance.py:114:1: W293 blank line contains whitespace
        
^
src/agents/neural_radiance.py:119:1: W293 blank line contains whitespace
        
^
src/agents/neural_radiance.py:121:1: W293 blank line contains whitespace
        
^
src/agents/neural_radiance.py:125:1: W293 blank line contains whitespace
        
^
src/agents/neural_radiance.py:128:1: W293 blank line contains whitespace
        
^
src/agents/neural_radiance.py:131:1: W293 blank line contains whitespace
        
^
src/agents/neural_radiance.py:136:1: W293 blank line contains whitespace
        
^
src/agents/neural_radiance.py:144:1: W293 blank line contains whitespace
    
^
src/agents/neural_radiance.py:145:80: E501 line too long (87 > 79 characters)
    async def _multi_view_reconstruction(self, task: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
src/agents/neural_radiance.py:148:1: W293 blank line contains whitespace
        
^
src/agents/neural_radiance.py:150:80: E501 line too long (80 > 79 characters)
            raise ValueError("No images provided for multi-view reconstruction")
                                                                               ^
src/agents/neural_radiance.py:151:1: W293 blank line contains whitespace
        
^
src/agents/neural_radiance.py:155:1: W293 blank line contains whitespace
        
^
src/agents/neural_radiance.py:161:1: W293 blank line contains whitespace
            
^
src/agents/neural_radiance.py:163:1: W293 blank line contains whitespace
            
^
src/agents/neural_radiance.py:168:1: W293 blank line contains whitespace
        
^
src/agents/neural_radiance.py:170:80: E501 line too long (80 > 79 characters)
        reconstruction = await self._generate_3d_reconstruction(features, poses)
                                                                               ^
src/agents/neural_radiance.py:171:1: W293 blank line contains whitespace
        
^
src/agents/neural_radiance.py:176:1: W293 blank line contains whitespace
        
^
src/agents/neural_radiance.py:183:1: W293 blank line contains whitespace
    
^
src/agents/neural_radiance.py:187:1: W293 blank line contains whitespace
        
^
src/agents/neural_radiance.py:192:1: W293 blank line contains whitespace
        
^
src/agents/neural_radiance.py:194:1: W293 blank line contains whitespace
        
^
src/agents/neural_radiance.py:197:1: W293 blank line contains whitespace
        
^
src/agents/neural_radiance.py:202:1: W293 blank line contains whitespace
        
^
src/agents/neural_radiance.py:208:1: W293 blank line contains whitespace
    
^
src/agents/neural_radiance.py:209:80: E501 line too long (99 > 79 characters)
    async def _generate_novel_views(self, image: torch.Tensor, pose: torch.Tensor) -> torch.Tensor:
                                                                               ^
src/agents/neural_radiance.py:213:1: W293 blank line contains whitespace
    
^
src/agents/neural_radiance.py:222:1: W293 blank line contains whitespace
    
^
src/agents/neural_radiance.py:223:80: E501 line too long (95 > 79 characters)
    async def _generate_3d_reconstruction(self, features: list, poses: list) -> Dict[str, Any]:
                                                                               ^
src/agents/neural_radiance.py:230:1: W293 blank line contains whitespace
    
^
src/agents/neural_radiance.py:234:33: W291 trailing whitespace
        torch.cuda.empty_cache()                                 ^
src/agents/neural_radiance.py:234:34: W292 no newline at end of file
        torch.cuda.empty_cache()                                  ^
src/agents/orchestrator.py:6:1: F401 'asyncio' imported but unused
import asyncio
^
src/agents/orchestrator.py:7:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, List, Optional
^
src/agents/orchestrator.py:35:1: E302 expected 2 blank lines, found 1
class ReasoningMode:
^
src/agents/orchestrator.py:38:1: F811 redefinition of unused 'HyperOrchestrator' from line 33
class HyperOrchestrator:
^
src/agents/orchestrator.py:38:1: E302 expected 2 blank lines, found 1
class HyperOrchestrator:
^
src/agents/orchestrator.py:44:5: E301 expected 1 blank line, found 0
    async def initialize(self):
    ^
src/agents/orchestrator.py:46:5: E301 expected 1 blank line, found 0
    async def register_agent(self, agent):
    ^
src/agents/orchestrator.py:48:5: E301 expected 1 blank line, found 0
    def get_orchestrator_status(self):
    ^
src/agents/orchestrator.py:49:80: E501 line too long (110 > 79 characters)
        return {"registered_agents": ["ImageRestorationAgent", "StyleAestheticAgent", "SemanticEditingAgent"]}
                                                                               ^
src/agents/orchestrator.py:50:5: E301 expected 1 blank line, found 0
    async def _analyze_task(self, desc, params):
    ^
src/agents/orchestrator.py:52:5: E301 expected 1 blank line, found 0
    async def _tree_of_thought_analysis(self, desc, params):
    ^
src/agents/orchestrator.py:53:53: E231 missing whitespace after ','
        return {"selected_path": [], "all_paths": [1,2,3], "reasoning_mode": "tree_of_thought"}
                                                    ^
src/agents/orchestrator.py:53:55: E231 missing whitespace after ','
        return {"selected_path": [], "all_paths": [1,2,3], "reasoning_mode": "tree_of_thought"}
                                                      ^
src/agents/orchestrator.py:53:80: E501 line too long (95 > 79 characters)
        return {"selected_path": [], "all_paths": [1,2,3], "reasoning_mode": "tree_of_thought"}
                                                                               ^
src/agents/orchestrator.py:54:5: E301 expected 1 blank line, found 0
    async def process(self, input_data):
    ^
src/agents/orchestrator.py:55:80: E501 line too long (90 > 79 characters)
        return {"status": "success", "results": {}, "execution_plan": {}, "reasoning": {}}
                                                                               ^
src/agents/orchestrator.py:56:5: E301 expected 1 blank line, found 0
    async def _self_correct_results(self, results, analysis):
    ^
src/agents/orchestrator.py:59:1: E302 expected 2 blank lines, found 1
class OrchestratorAgent(BaseAgent):
^
src/agents/orchestrator.py:64:1: W293 blank line contains whitespace
        
^
src/agents/orchestrator.py:69:1: W293 blank line contains whitespace
            
^
src/agents/orchestrator.py:83:80: E501 line too long (80 > 79 characters)
            self.agents['perspective_correction'] = PerspectiveCorrectionAgent()
                                                                               ^
src/agents/orchestrator.py:84:1: W293 blank line contains whitespace
            
^
src/agents/orchestrator.py:88:80: E501 line too long (80 > 79 characters)
            self.agents['hyperspectral_recovery'] = HyperspectralRecoveryAgent()
                                                                               ^
src/agents/orchestrator.py:89:80: E501 line too long (85 > 79 characters)
            self.agents['paint_layer_decomposition'] = PaintLayerDecompositionAgent()
                                                                               ^
src/agents/orchestrator.py:91:1: W293 blank line contains whitespace
            
^
src/agents/orchestrator.py:95:80: E501 line too long (85 > 79 characters)
            self.agents['context_aware_restoration'] = ContextAwareRestorationAgent()
                                                                               ^
src/agents/orchestrator.py:97:1: W293 blank line contains whitespace
            
^
src/agents/orchestrator.py:102:1: W293 blank line contains whitespace
            
^
src/agents/orchestrator.py:128:1: W293 blank line contains whitespace
            
^
src/agents/orchestrator.py:129:80: E501 line too long (83 > 79 characters)
            logger.info(f"Orchestrator initialized with {len(self.agents)} agents")
                                                                               ^
src/agents/orchestrator.py:130:1: W293 blank line contains whitespace
            
^
src/agents/orchestrator.py:134:1: W293 blank line contains whitespace
    
^
src/agents/orchestrator.py:141:1: W293 blank line contains whitespace
            
^
src/agents/orchestrator.py:143:1: W293 blank line contains whitespace
            
^
src/agents/orchestrator.py:153:1: W293 blank line contains whitespace
            
^
src/agents/orchestrator.py:155:1: W293 blank line contains whitespace
            
^
src/agents/orchestrator.py:160:1: W293 blank line contains whitespace
                    
^
src/agents/orchestrator.py:162:1: W293 blank line contains whitespace
                    
^
src/agents/orchestrator.py:170:1: W293 blank line contains whitespace
                    
^
src/agents/orchestrator.py:173:1: W293 blank line contains whitespace
                    
^
src/agents/orchestrator.py:177:1: W293 blank line contains whitespace
                    
^
src/agents/orchestrator.py:186:1: W293 blank line contains whitespace
                    
^
src/agents/orchestrator.py:189:1: W293 blank line contains whitespace
                    
^
src/agents/orchestrator.py:191:1: W293 blank line contains whitespace
            
^
src/agents/orchestrator.py:196:1: W293 blank line contains whitespace
            
^
src/agents/orchestrator.py:198:80: E501 line too long (81 > 79 characters)
            results['quality_metrics'] = self._calculate_overall_quality(results)
                                                                               ^
src/agents/orchestrator.py:199:1: W293 blank line contains whitespace
            
^
src/agents/orchestrator.py:201:1: W293 blank line contains whitespace
            
^
src/agents/orchestrator.py:203:1: W293 blank line contains whitespace
            
^
src/agents/orchestrator.py:207:1: W293 blank line contains whitespace
    
^
src/agents/orchestrator.py:208:80: E501 line too long (84 > 79 characters)
    def _calculate_overall_quality(self, results: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
src/agents/orchestrator.py:216:1: W293 blank line contains whitespace
        
^
src/agents/orchestrator.py:219:1: W293 blank line contains whitespace
        
^
src/agents/orchestrator.py:223:1: W293 blank line contains whitespace
            
^
src/agents/orchestrator.py:232:1: W293 blank line contains whitespace
            
^
src/agents/orchestrator.py:236:1: W293 blank line contains whitespace
            
^
src/agents/orchestrator.py:239:80: E501 line too long (91 > 79 characters)
                quality_metrics['improvements'][stage_name] = stage_metrics['improvements']
                                                                               ^
src/agents/orchestrator.py:240:1: W293 blank line contains whitespace
            
^
src/agents/orchestrator.py:243:80: E501 line too long (91 > 79 characters)
                quality_metrics['recommendations'].extend(stage_metrics['recommendations'])
                                                                               ^
src/agents/orchestrator.py:244:1: W293 blank line contains whitespace
        
^
src/agents/orchestrator.py:248:1: W293 blank line contains whitespace
        
^
src/agents/orchestrator.py:250:1: W293 blank line contains whitespace
    
^
src/agents/orchestrator.py:251:80: E501 line too long (98 > 79 characters)
    async def execute_single_agent(self, agent_name: str, task: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
src/agents/orchestrator.py:255:1: W293 blank line contains whitespace
        
^
src/agents/orchestrator.py:258:1: W293 blank line contains whitespace
    
^
src/agents/orchestrator.py:259:80: E501 line too long (105 > 79 characters)
    async def execute_custom_pipeline(self, pipeline: List[str], task: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
src/agents/orchestrator.py:267:1: W293 blank line contains whitespace
        
^
src/agents/orchestrator.py:269:1: W293 blank line contains whitespace
        
^
src/agents/orchestrator.py:273:1: W293 blank line contains whitespace
                
^
src/agents/orchestrator.py:279:1: W293 blank line contains whitespace
                
^
src/agents/orchestrator.py:281:1: W293 blank line contains whitespace
                
^
src/agents/orchestrator.py:284:1: W293 blank line contains whitespace
                
^
src/agents/orchestrator.py:290:1: W293 blank line contains whitespace
        
^
src/agents/orchestrator.py:293:1: W293 blank line contains whitespace
        
^
src/agents/orchestrator.py:295:1: W293 blank line contains whitespace
    
^
src/agents/orchestrator.py:299:1: W293 blank line contains whitespace
    
^
src/agents/orchestrator.py:304:1: W293 blank line contains whitespace
        
^
src/agents/orchestrator.py:311:80: E501 line too long (82 > 79 characters)
            'status': 'initialized' if agent.is_initialized else 'not_initialized'
                                                                               ^
src/agents/orchestrator.py:313:1: W293 blank line contains whitespace
    
^
src/agents/orchestrator.py:322:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:3:80: E501 line too long (137 > 79 characters)
"""
Paint Layer Decomposition Agent
Deconstructs paintings into base layers: underdrawings, overpaint, retouches using tensor decomposition + pigment stratification modeling
"""
   
                               
                                           ^
src/agents/paint_layer_decomposition.py:11:1: F401 'typing.Tuple' imported but unused
from typing import Dict, Any, List, Tuple
^
src/agents/paint_layer_decomposition.py:17:1: E302 expected 2 blank lines, found 1
class PaintLayerDecompositionAgent(BaseAgent):
^
src/agents/paint_layer_decomposition.py:24:71: W291 trailing whitespace
            'ground_layer', 'underdrawing', 'base_paint', 'overpaint', 
                                                                      ^
src/agents/paint_layer_decomposition.py:28:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:33:80: E501 line too long (103 > 79 characters)
            logger.warning("Paint layer decomposition models are placeholders. Implement real models.")
                                                                               ^
src/agents/paint_layer_decomposition.py:34:1: W293 blank line contains whitespace
            
^
src/agents/paint_layer_decomposition.py:37:1: W293 blank line contains whitespace
            
^
src/agents/paint_layer_decomposition.py:39:80: E501 line too long (85 > 79 characters)
            self.models['pigment_identifier'] = await self._load_pigment_identifier()
                                                                               ^
src/agents/paint_layer_decomposition.py:40:1: W293 blank line contains whitespace
            
^
src/agents/paint_layer_decomposition.py:42:80: E501 line too long (95 > 79 characters)
            self.models['stratification_analyzer'] = await self._load_stratification_analyzer()
                                                                               ^
src/agents/paint_layer_decomposition.py:43:1: W293 blank line contains whitespace
            
^
src/agents/paint_layer_decomposition.py:45:80: E501 line too long (87 > 79 characters)
            self.models['layer_reconstructor'] = await self._load_layer_reconstructor()
                                                                               ^
src/agents/paint_layer_decomposition.py:46:1: W293 blank line contains whitespace
            
^
src/agents/paint_layer_decomposition.py:52:27: E128 continuation line under-indented for visual indent
                          std=[0.229, 0.224, 0.225])
                          ^
src/agents/paint_layer_decomposition.py:54:1: W293 blank line contains whitespace
            
^
src/agents/paint_layer_decomposition.py:56:1: W293 blank line contains whitespace
            
^
src/agents/paint_layer_decomposition.py:58:80: E501 line too long (87 > 79 characters)
            logger.error(f"Failed to initialize paint layer decomposition models: {e}")
                                                                               ^
src/agents/paint_layer_decomposition.py:60:1: W293 blank line contains whitespace
    
^
src/agents/paint_layer_decomposition.py:84:1: W293 blank line contains whitespace
            
^
src/agents/paint_layer_decomposition.py:89:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:91:1: W293 blank line contains whitespace
    
^
src/agents/paint_layer_decomposition.py:100:1: W293 blank line contains whitespace
            
^
src/agents/paint_layer_decomposition.py:105:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:107:1: W293 blank line contains whitespace
    
^
src/agents/paint_layer_decomposition.py:113:80: E501 line too long (84 > 79 characters)
                self.conv = nn.Conv2d(24, 64, 3, padding=1)  # 8 layers * 3 channels
                                                                               ^
src/agents/paint_layer_decomposition.py:116:1: W293 blank line contains whitespace
            
^
src/agents/paint_layer_decomposition.py:121:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:123:1: W293 blank line contains whitespace
    
^
src/agents/paint_layer_decomposition.py:129:80: E501 line too long (85 > 79 characters)
                self.conv = nn.Conv2d(27, 64, 3, padding=1)  # 3 original + 24 layers
                                                                               ^
src/agents/paint_layer_decomposition.py:132:1: W293 blank line contains whitespace
            
^
src/agents/paint_layer_decomposition.py:135:80: E501 line too long (96 > 79 characters)
                layers_flat = layers.view(layers.shape[0], -1, layers.shape[3], layers.shape[4])
                                                                               ^
src/agents/paint_layer_decomposition.py:140:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:142:1: W293 blank line contains whitespace
    
^
src/agents/paint_layer_decomposition.py:187:1: W293 blank line contains whitespace
    
^
src/agents/paint_layer_decomposition.py:197:1: W293 blank line contains whitespace
            
^
src/agents/paint_layer_decomposition.py:200:1: W293 blank line contains whitespace
            
^
src/agents/paint_layer_decomposition.py:203:1: W293 blank line contains whitespace
            
^
src/agents/paint_layer_decomposition.py:213:1: W293 blank line contains whitespace
            
^
src/agents/paint_layer_decomposition.py:215:1: W293 blank line contains whitespace
            
^
src/agents/paint_layer_decomposition.py:219:1: W293 blank line contains whitespace
    
^
src/agents/paint_layer_decomposition.py:224:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:234:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:240:1: W293 blank line contains whitespace
    
^
src/agents/paint_layer_decomposition.py:245:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:248:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:251:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:258:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:264:1: W293 blank line contains whitespace
    
^
src/agents/paint_layer_decomposition.py:269:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:271:80: E501 line too long (95 > 79 characters)
        layers_tensor = torch.tensor(layers['layer_data'], dtype=torch.float32).to(self.device)
                                                                               ^
src/agents/paint_layer_decomposition.py:272:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:274:80: E501 line too long (88 > 79 characters)
            stratification_props = self.models['stratification_analyzer'](layers_tensor)
                                                                               ^
src/agents/paint_layer_decomposition.py:275:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:277:80: E501 line too long (83 > 79 characters)
            'layer_thickness': stratification_props[0, 0:8].cpu().numpy().tolist(),
                                                                               ^
src/agents/paint_layer_decomposition.py:278:80: E501 line too long (82 > 79 characters)
            'layer_opacity': stratification_props[0, 8:16].cpu().numpy().tolist(),
                                                                               ^
src/agents/paint_layer_decomposition.py:279:40: E741 ambiguous variable name 'l'
            'total_layers': len([l for l in layers['layers'] if l['visibility_score'] > 0.1]),
                                       ^
src/agents/paint_layer_decomposition.py:279:80: E501 line too long (94 > 79 characters)
            'total_layers': len([l for l in layers['layers'] if l['visibility_score'] > 0.1]),
                                                                               ^
src/agents/paint_layer_decomposition.py:281:80: E501 line too long (85 > 79 characters)
            'restoration_history': self._detect_restoration_history(layers['layers'])
                                                                               ^
src/agents/paint_layer_decomposition.py:283:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:289:1: W293 blank line contains whitespace
    
^
src/agents/paint_layer_decomposition.py:290:80: E501 line too long (110 > 79 characters)
    async def _full_layer_decomposition(self, x: torch.Tensor, original_image: Image.Image) -> Dict[str, Any]:
                                                                               ^
src/agents/paint_layer_decomposition.py:294:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:297:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:300:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:303:80: E501 line too long (105 > 79 characters)
            layers_tensor = torch.tensor(layer_result['layer_data'], dtype=torch.float32).to(self.device)
                                                                               ^
src/agents/paint_layer_decomposition.py:304:80: E501 line too long (80 > 79 characters)
            reconstructed = self.models['layer_reconstructor'](x, layers_tensor)
                                                                               ^
src/agents/paint_layer_decomposition.py:305:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:310:80: E501 line too long (88 > 79 characters)
            'stratification_analysis': stratification_result['stratification_analysis'],
                                                                               ^
src/agents/paint_layer_decomposition.py:312:80: E501 line too long (95 > 79 characters)
            'decomposition_accuracy': self._calculate_decomposition_accuracy(x, reconstructed),
                                                                               ^
src/agents/paint_layer_decomposition.py:313:80: E501 line too long (86 > 79 characters)
            'restoration_recommendations': self._generate_restoration_recommendations(
                                                                               ^
src/agents/paint_layer_decomposition.py:319:1: W293 blank line contains whitespace
    
^
src/agents/paint_layer_decomposition.py:320:80: E501 line too long (80 > 79 characters)
    def _determine_layer_order(self, layers: List[Dict[str, Any]]) -> List[str]:
                                                                               ^
src/agents/paint_layer_decomposition.py:323:80: E501 line too long (89 > 79 characters)
        sorted_layers = sorted(layers, key=lambda x: x['visibility_score'], reverse=True)
                                                                               ^
src/agents/paint_layer_decomposition.py:325:1: W293 blank line contains whitespace
    
^
src/agents/paint_layer_decomposition.py:326:80: E501 line too long (85 > 79 characters)
    def _detect_restoration_history(self, layers: List[Dict[str, Any]]) -> List[str]:
                                                                               ^
src/agents/paint_layer_decomposition.py:329:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:331:37: E741 ambiguous variable name 'l'
        retouch_layer = next((l for l in layers if l['layer_type'] == 'retouch'), None)
                                    ^
src/agents/paint_layer_decomposition.py:331:80: E501 line too long (87 > 79 characters)
        retouch_layer = next((l for l in layers if l['layer_type'] == 'retouch'), None)
                                                                               ^
src/agents/paint_layer_decomposition.py:334:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:336:37: E741 ambiguous variable name 'l'
        varnish_layer = next((l for l in layers if l['layer_type'] == 'varnish'), None)
                                    ^
src/agents/paint_layer_decomposition.py:336:80: E501 line too long (87 > 79 characters)
        varnish_layer = next((l for l in layers if l['layer_type'] == 'varnish'), None)
                                                                               ^
src/agents/paint_layer_decomposition.py:339:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:341:34: E741 ambiguous variable name 'l'
        dirt_layer = next((l for l in layers if l['layer_type'] == 'dirt_layer'), None)
                                 ^
src/agents/paint_layer_decomposition.py:341:80: E501 line too long (87 > 79 characters)
        dirt_layer = next((l for l in layers if l['layer_type'] == 'dirt_layer'), None)
                                                                               ^
src/agents/paint_layer_decomposition.py:344:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:346:1: W293 blank line contains whitespace
    
^
src/agents/paint_layer_decomposition.py:347:80: E501 line too long (110 > 79 characters)
    def _calculate_decomposition_accuracy(self, original: torch.Tensor, reconstructed: torch.Tensor) -> float:
                                                                               ^
src/agents/paint_layer_decomposition.py:353:1: W293 blank line contains whitespace
    
^
src/agents/paint_layer_decomposition.py:354:80: E501 line too long (81 > 79 characters)
    def _generate_restoration_recommendations(self, layers: List[Dict[str, Any]], 
                                                                               ^
src/agents/paint_layer_decomposition.py:354:82: W291 trailing whitespace
    def _generate_restoration_recommendations(self, layers: List[Dict[str, Any]], 
                                                                                 ^
src/agents/paint_layer_decomposition.py:355:44: E128 continuation line under-indented for visual indent
                                           pigments: List[Dict[str, Any]], 
                                           ^
src/agents/paint_layer_decomposition.py:355:75: W291 trailing whitespace
                                           pigments: List[Dict[str, Any]], 
                                                                          ^
src/agents/paint_layer_decomposition.py:356:44: E128 continuation line under-indented for visual indent
                                           stratification: Dict[str, Any]) -> List[str]:
                                           ^
src/agents/paint_layer_decomposition.py:356:80: E501 line too long (88 > 79 characters)
                                           stratification: Dict[str, Any]) -> List[str]:
                                                                               ^
src/agents/paint_layer_decomposition.py:359:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:361:9: F841 local variable 'unstable_pigments' is assigned to but never used
        unstable_pigments = ['vermilion', 'lead_white']
        ^
src/agents/paint_layer_decomposition.py:364:80: E501 line too long (112 > 79 characters)
                recommendations.append(f"Caution: {pigment.get('chemical_formula', 'Unknown')} may be unstable")
                                                                               ^
src/agents/paint_layer_decomposition.py:365:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:368:80: E501 line too long (102 > 79 characters)
            recommendations.append("Multiple paint layers detected - careful layer separation needed")
                                                                               ^
src/agents/paint_layer_decomposition.py:369:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:372:80: E501 line too long (101 > 79 characters)
            recommendations.append("Previous restoration detected - document existing interventions")
                                                                               ^
src/agents/paint_layer_decomposition.py:373:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:376:80: E501 line too long (100 > 79 characters)
            recommendations.append("Lead-based pigments detected - use appropriate safety measures")
                                                                               ^
src/agents/paint_layer_decomposition.py:377:1: W293 blank line contains whitespace
        
^
src/agents/paint_layer_decomposition.py:379:1: W293 blank line contains whitespace
    
^
src/agents/paint_layer_decomposition.py:386:1: W293 blank line contains whitespace
    
^
src/agents/paint_layer_decomposition.py:390:33: W291 trailing whitespace
        torch.cuda.empty_cache()                                 ^
src/agents/paint_layer_decomposition.py:390:34: W292 no newline at end of file
        torch.cuda.empty_cache()                                  ^
src/agents/perspective_correction.py:12:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, List, Tuple, Optional
^
src/agents/perspective_correction.py:18:1: E302 expected 2 blank lines, found 1
class PerspectiveCorrectionAgent(BaseAgent):
^
src/agents/perspective_correction.py:24:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:29:80: E501 line too long (100 > 79 characters)
            logger.warning("Perspective correction models are placeholders. Implement real models.")
                                                                               ^
src/agents/perspective_correction.py:30:1: W293 blank line contains whitespace
            
^
src/agents/perspective_correction.py:32:80: E501 line too long (89 > 79 characters)
            self.models['perspective_detector'] = await self._load_perspective_detector()
                                                                               ^
src/agents/perspective_correction.py:33:1: W293 blank line contains whitespace
            
^
src/agents/perspective_correction.py:36:1: W293 blank line contains whitespace
            
^
src/agents/perspective_correction.py:38:80: E501 line too long (89 > 79 characters)
            self.models['homography_estimator'] = await self._load_homography_estimator()
                                                                               ^
src/agents/perspective_correction.py:39:1: W293 blank line contains whitespace
            
^
src/agents/perspective_correction.py:42:1: W293 blank line contains whitespace
            
^
src/agents/perspective_correction.py:48:27: E128 continuation line under-indented for visual indent
                          std=[0.229, 0.224, 0.225])
                          ^
src/agents/perspective_correction.py:50:1: W293 blank line contains whitespace
            
^
src/agents/perspective_correction.py:52:1: W293 blank line contains whitespace
            
^
src/agents/perspective_correction.py:54:80: E501 line too long (84 > 79 characters)
            logger.error(f"Failed to initialize perspective correction models: {e}")
                                                                               ^
src/agents/perspective_correction.py:56:1: W293 blank line contains whitespace
    
^
src/agents/perspective_correction.py:65:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:70:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:72:1: W293 blank line contains whitespace
    
^
src/agents/perspective_correction.py:81:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:86:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:88:1: W293 blank line contains whitespace
    
^
src/agents/perspective_correction.py:97:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:103:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:105:1: W293 blank line contains whitespace
    
^
src/agents/perspective_correction.py:114:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:119:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:121:1: W293 blank line contains whitespace
    
^
src/agents/perspective_correction.py:131:1: W293 blank line contains whitespace
            
^
src/agents/perspective_correction.py:134:1: W293 blank line contains whitespace
            
^
src/agents/perspective_correction.py:137:1: W293 blank line contains whitespace
            
^
src/agents/perspective_correction.py:150:1: W293 blank line contains whitespace
            
^
src/agents/perspective_correction.py:155:1: W293 blank line contains whitespace
                
^
src/agents/perspective_correction.py:161:1: W293 blank line contains whitespace
            
^
src/agents/perspective_correction.py:163:1: W293 blank line contains whitespace
            
^
src/agents/perspective_correction.py:167:1: W293 blank line contains whitespace
    
^
src/agents/perspective_correction.py:172:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:178:1: W293 blank line contains whitespace
    
^
src/agents/perspective_correction.py:183:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:186:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:192:1: W293 blank line contains whitespace
    
^
src/agents/perspective_correction.py:197:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:202:1: W293 blank line contains whitespace
    
^
src/agents/perspective_correction.py:203:80: E501 line too long (110 > 79 characters)
    async def _auto_perspective_correct(self, x: torch.Tensor, original_image: Image.Image) -> Dict[str, Any]:
                                                                               ^
src/agents/perspective_correction.py:207:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:210:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:213:80: E501 line too long (104 > 79 characters)
            corrected_image = await self._correct_with_corners(original_image, corner_result['corners'])
                                                                               ^
src/agents/perspective_correction.py:216:80: E501 line too long (127 > 79 characters)
            corrected_image = await self._correct_with_parameters(original_image, perspective_result['perspective_parameters'])
                                                                               ^
src/agents/perspective_correction.py:217:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:221:80: E501 line too long (83 > 79 characters)
            'perspective_parameters': perspective_result['perspective_parameters'],
                                                                               ^
src/agents/perspective_correction.py:224:1: W293 blank line contains whitespace
    
^
src/agents/perspective_correction.py:225:80: E501 line too long (118 > 79 characters)
    async def _manual_perspective_correct(self, image: Image.Image, corners: List[Tuple[int, int]]) -> Dict[str, Any]:
                                                                               ^
src/agents/perspective_correction.py:228:80: E501 line too long (85 > 79 characters)
            raise ValueError("Exactly 4 corners required for perspective correction")
                                                                               ^
src/agents/perspective_correction.py:229:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:231:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:237:1: W293 blank line contains whitespace
    
^
src/agents/perspective_correction.py:238:80: E501 line too long (109 > 79 characters)
    async def _correct_with_corners(self, image: Image.Image, corners: List[Tuple[int, int]]) -> Image.Image:
                                                                               ^
src/agents/perspective_correction.py:242:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:247:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:249:80: E501 line too long (80 > 79 characters)
        homography = cv2.getPerspectiveTransform(source_corners, target_corners)
                                                                               ^
src/agents/perspective_correction.py:250:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:253:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:255:80: E501 line too long (88 > 79 characters)
        corrected_image = Image.fromarray(cv2.cvtColor(corrected_cv, cv2.COLOR_BGR2RGB))
                                                                               ^
src/agents/perspective_correction.py:256:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:258:1: W293 blank line contains whitespace
    
^
src/agents/perspective_correction.py:259:80: E501 line too long (100 > 79 characters)
    async def _correct_with_parameters(self, image: Image.Image, params: np.ndarray) -> Image.Image:
                                                                               ^
src/agents/perspective_correction.py:263:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:265:80: E501 line too long (89 > 79 characters)
        # This is a simplified approach - real implementation would be more sophisticated
                                                                               ^
src/agents/perspective_correction.py:267:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:273:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:275:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:277:80: E501 line too long (88 > 79 characters)
        corrected_image = Image.fromarray(cv2.cvtColor(corrected_cv, cv2.COLOR_BGR2RGB))
                                                                               ^
src/agents/perspective_correction.py:278:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:280:1: W293 blank line contains whitespace
    
^
src/agents/perspective_correction.py:281:80: E501 line too long (106 > 79 characters)
    def _heatmap_to_corners(self, heatmap: torch.Tensor, threshold: float = 0.5) -> List[Tuple[int, int]]:
                                                                               ^
src/agents/perspective_correction.py:284:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:288:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:293:80: E501 line too long (80 > 79 characters)
                    if (heatmap_np[i, j] >= heatmap_np[i-1:i+2, j-1:j+2]).all():
                                                                               ^
src/agents/perspective_correction.py:298:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:300:80: E501 line too long (89 > 79 characters)
        corners = sorted(corners, key=lambda c: heatmap_np[c[1], c[0]], reverse=True)[:4]
                                                                               ^
src/agents/perspective_correction.py:301:1: W293 blank line contains whitespace
        
^
src/agents/perspective_correction.py:303:1: W293 blank line contains whitespace
    
^
src/agents/perspective_correction.py:307:33: W291 trailing whitespace
        torch.cuda.empty_cache()                                 ^
src/agents/perspective_correction.py:307:34: W292 no newline at end of file
        torch.cuda.empty_cache()                                  ^
src/agents/self_critique.py:8:1: F401 'torch.nn.functional as F' imported but unused
import torch.nn.functional as F
^
src/agents/self_critique.py:11:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, Optional, List, Tuple
^
src/agents/self_critique.py:11:1: F401 'typing.Tuple' imported but unused
from typing import Dict, Any, Optional, List, Tuple
^
src/agents/self_critique.py:12:1: F401 'cv2' imported but unused
import cv2
^
src/agents/self_critique.py:18:1: E302 expected 2 blank lines, found 1
class SelfCritiqueAgent(BaseAgent):
^
src/agents/self_critique.py:25:80: E501 line too long (83 > 79 characters)
            'detail_preservation', 'artifacts', 'consistency', 'aesthetic_quality',
                                                                               ^
src/agents/self_critique.py:28:1: W293 blank line contains whitespace
        
^
src/agents/self_critique.py:33:80: E501 line too long (81 > 79 characters)
            self.models['critique_network'] = await self._load_critique_network()
                                                                               ^
src/agents/self_critique.py:34:1: W293 blank line contains whitespace
            
^
src/agents/self_critique.py:36:80: E501 line too long (91 > 79 characters)
            self.models['improvement_predictor'] = await self._load_improvement_predictor()
                                                                               ^
src/agents/self_critique.py:37:1: W293 blank line contains whitespace
            
^
src/agents/self_critique.py:39:80: E501 line too long (85 > 79 characters)
            self.models['feedback_generator'] = await self._load_feedback_generator()
                                                                               ^
src/agents/self_critique.py:40:1: W293 blank line contains whitespace
            
^
src/agents/self_critique.py:42:80: E501 line too long (85 > 79 characters)
            self.models['iterative_improver'] = await self._load_iterative_improver()
                                                                               ^
src/agents/self_critique.py:43:1: W293 blank line contains whitespace
            
^
src/agents/self_critique.py:45:1: W293 blank line contains whitespace
            
^
src/agents/self_critique.py:49:1: W293 blank line contains whitespace
    
^
src/agents/self_critique.py:60:1: W293 blank line contains whitespace
                    
^
src/agents/self_critique.py:68:1: W293 blank line contains whitespace
                    
^
src/agents/self_critique.py:76:1: W293 blank line contains whitespace
                    
^
src/agents/self_critique.py:85:1: W293 blank line contains whitespace
                
^
src/agents/self_critique.py:97:1: W293 blank line contains whitespace
            
^
src/agents/self_critique.py:101:1: W293 blank line contains whitespace
                
^
src/agents/self_critique.py:106:1: W293 blank line contains whitespace
                
^
src/agents/self_critique.py:108:1: W293 blank line contains whitespace
        
^
src/agents/self_critique.py:110:1: W293 blank line contains whitespace
    
^
src/agents/self_critique.py:122:1: W293 blank line contains whitespace
                    
^
src/agents/self_critique.py:128:1: W293 blank line contains whitespace
                    
^
src/agents/self_critique.py:135:1: W293 blank line contains whitespace
                
^
src/agents/self_critique.py:144:1: W293 blank line contains whitespace
            
^
src/agents/self_critique.py:149:1: W293 blank line contains whitespace
        
^
src/agents/self_critique.py:151:1: W293 blank line contains whitespace
    
^
src/agents/self_critique.py:163:1: W293 blank line contains whitespace
                    
^
src/agents/self_critique.py:169:1: W293 blank line contains whitespace
                    
^
src/agents/self_critique.py:175:1: W293 blank line contains whitespace
                
^
src/agents/self_critique.py:186:1: W293 blank line contains whitespace
            
^
src/agents/self_critique.py:191:1: W293 blank line contains whitespace
        
^
src/agents/self_critique.py:193:1: W293 blank line contains whitespace
    
^
src/agents/self_critique.py:205:1: W293 blank line contains whitespace
                    
^
src/agents/self_critique.py:211:1: W293 blank line contains whitespace
                    
^
src/agents/self_critique.py:217:1: W293 blank line contains whitespace
                
^
src/agents/self_critique.py:223:1: W293 blank line contains whitespace
                    
^
src/agents/self_critique.py:228:1: W293 blank line contains whitespace
                    
^
src/agents/self_critique.py:232:1: W293 blank line contains whitespace
            
^
src/agents/self_critique.py:237:1: W293 blank line contains whitespace
        
^
src/agents/self_critique.py:239:1: W293 blank line contains whitespace
    
^
src/agents/self_critique.py:249:1: W293 blank line contains whitespace
            
^
src/agents/self_critique.py:252:1: W293 blank line contains whitespace
            
^
src/agents/self_critique.py:255:1: W293 blank line contains whitespace
            
^
src/agents/self_critique.py:258:1: W293 blank line contains whitespace
            
^
src/agents/self_critique.py:261:1: W293 blank line contains whitespace
            
^
src/agents/self_critique.py:264:1: W293 blank line contains whitespace
            
^
src/agents/self_critique.py:267:1: W293 blank line contains whitespace
            
^
src/agents/self_critique.py:272:1: W293 blank line contains whitespace
                
^
src/agents/self_critique.py:274:80: E501 line too long (80 > 79 characters)
                improved_critique = await self._perform_critique(improved_image)
                                                                               ^
src/agents/self_critique.py:275:1: W293 blank line contains whitespace
                
^
src/agents/self_critique.py:281:1: W293 blank line contains whitespace
            
^
src/agents/self_critique.py:286:1: W293 blank line contains whitespace
            
^
src/agents/self_critique.py:292:1: W293 blank line contains whitespace
            
^
src/agents/self_critique.py:302:80: E501 line too long (107 > 79 characters)
                'improved_critique': improved_critique.tolist() if improved_critique is not None else None,
                                                                               ^
src/agents/self_critique.py:305:1: W293 blank line contains whitespace
            
^
src/agents/self_critique.py:309:1: W293 blank line contains whitespace
    
^
src/agents/self_critique.py:314:1: W293 blank line contains whitespace
    
^
src/agents/self_critique.py:319:1: W293 blank line contains whitespace
    
^
src/agents/self_critique.py:324:1: W293 blank line contains whitespace
    
^
src/agents/self_critique.py:325:80: E501 line too long (82 > 79 characters)
    async def _apply_iterative_improvement(self, x: torch.Tensor) -> torch.Tensor:
                                                                               ^
src/agents/self_critique.py:329:1: W293 blank line contains whitespace
    
^
src/agents/self_critique.py:330:69: W291 trailing whitespace
    def _create_feedback_report(self, critique_scores: torch.Tensor, 
                                                                    ^
src/agents/self_critique.py:331:32: E128 continuation line under-indented for visual indent
                               improvement_scores: torch.Tensor, 
                               ^
src/agents/self_critique.py:331:65: W291 trailing whitespace
                               improvement_scores: torch.Tensor, 
                                                                ^
src/agents/self_critique.py:332:32: E128 continuation line under-indented for visual indent
                               dimensions: List[str]) -> Dict[str, Any]:
                               ^
src/agents/self_critique.py:339:1: W293 blank line contains whitespace
        
^
src/agents/self_critique.py:343:1: W293 blank line contains whitespace
            
^
src/agents/self_critique.py:349:1: W293 blank line contains whitespace
            
^
src/agents/self_critique.py:352:80: E501 line too long (80 > 79 characters)
                    f"Improve {dimension}: Current score {critique_score:.2f}, "
                                                                               ^
src/agents/self_critique.py:355:1: W293 blank line contains whitespace
        
^
src/agents/self_critique.py:357:1: W293 blank line contains whitespace
    
^
src/agents/self_critique.py:358:80: E501 line too long (82 > 79 characters)
    def _get_status(self, critique_score: float, improvement_score: float) -> str:
                                                                               ^
src/agents/self_critique.py:368:1: W293 blank line contains whitespace
    
^
src/agents/self_critique.py:377:1: W293 blank line contains whitespace
    
^
src/agents/self_critique.py:386:1: W293 blank line contains whitespace
    
^
src/agents/self_critique.py:390:33: W291 trailing whitespace
        torch.cuda.empty_cache()                                 ^
src/agents/self_critique.py:390:34: W292 no newline at end of file
        torch.cuda.empty_cache()                                  ^
src/agents/semantic_editing.py:11:1: F401 'typing.List' imported but unused
from typing import Dict, Any, List, Tuple
^
src/agents/semantic_editing.py:11:1: F401 'typing.Tuple' imported but unused
from typing import Dict, Any, List, Tuple
^
src/agents/semantic_editing.py:17:1: E302 expected 2 blank lines, found 1
class SemanticEditingAgent(BaseAgent):
^
src/agents/semantic_editing.py:28:1: W293 blank line contains whitespace
    
^
src/agents/semantic_editing.py:33:80: E501 line too long (85 > 79 characters)
            self.models['vision_language'] = await self._load_vision_language_model()
                                                                               ^
src/agents/semantic_editing.py:34:1: W293 blank line contains whitespace
            
^
src/agents/semantic_editing.py:37:1: W293 blank line contains whitespace
            
^
src/agents/semantic_editing.py:40:1: W293 blank line contains whitespace
            
^
src/agents/semantic_editing.py:46:27: E128 continuation line under-indented for visual indent
                          std=[0.229, 0.224, 0.225])
                          ^
src/agents/semantic_editing.py:48:1: W293 blank line contains whitespace
            
^
src/agents/semantic_editing.py:50:1: W293 blank line contains whitespace
            
^
src/agents/semantic_editing.py:54:1: W293 blank line contains whitespace
    
^
src/agents/semantic_editing.py:62:1: W293 blank line contains whitespace
            
^
src/agents/semantic_editing.py:66:1: W293 blank line contains whitespace
            
^
src/agents/semantic_editing.py:69:55: F821 undefined name 'x'
                return torch.randn(len(text), 512).to(x.device)
                                                      ^
src/agents/semantic_editing.py:70:1: W293 blank line contains whitespace
        
^
src/agents/semantic_editing.py:72:1: W293 blank line contains whitespace
    
^
src/agents/semantic_editing.py:79:1: W293 blank line contains whitespace
            
^
src/agents/semantic_editing.py:82:1: W293 blank line contains whitespace
        
^
src/agents/semantic_editing.py:84:1: W293 blank line contains whitespace
    
^
src/agents/semantic_editing.py:91:1: W293 blank line contains whitespace
            
^
src/agents/semantic_editing.py:94:1: W293 blank line contains whitespace
        
^
src/agents/semantic_editing.py:96:1: W293 blank line contains whitespace
    
^
src/agents/semantic_editing.py:106:1: W293 blank line contains whitespace
            
^
src/agents/semantic_editing.py:109:1: W293 blank line contains whitespace
            
^
src/agents/semantic_editing.py:113:1: W293 blank line contains whitespace
            
^
src/agents/semantic_editing.py:116:1: W293 blank line contains whitespace
            
^
src/agents/semantic_editing.py:119:1: W293 blank line contains whitespace
            
^
src/agents/semantic_editing.py:122:1: W293 blank line contains whitespace
            
^
src/agents/semantic_editing.py:128:1: W293 blank line contains whitespace
            
^
src/agents/semantic_editing.py:136:1: W293 blank line contains whitespace
            
^
src/agents/semantic_editing.py:140:1: W293 blank line contains whitespace
    
^
src/agents/semantic_editing.py:146:1: W293 blank line contains whitespace
        
^
src/agents/semantic_editing.py:152:1: W293 blank line contains whitespace
        
^
src/agents/semantic_editing.py:164:1: W293 blank line contains whitespace
        
^
src/agents/semantic_editing.py:166:1: W293 blank line contains whitespace
    
^
src/agents/semantic_editing.py:172:1: W293 blank line contains whitespace
    
^
src/agents/semantic_editing.py:183:1: W293 blank line contains whitespace
    
^
src/agents/semantic_editing.py:190:1: W293 blank line contains whitespace
    
^
src/agents/semantic_editing.py:201:80: E501 line too long (145 > 79 characters)
        return {"status": "success", "output_image": input_data.get("image"), "parsed_instruction": {}, "scene_analysis": {}, "editing_plan": {}}
                                                                               ^
src/agents/semantic_editing.py:207:80: E501 line too long (100 > 79 characters)
        return {"operation_type": "edit", "target_objects": [], "attributes": {}, "confidence": 1.0}
                                                                               ^
src/agents/semantic_editing.py:210:80: E501 line too long (112 > 79 characters)
        return {"scene_classification": {"top_scenes": ["outdoor"]}, "detected_objects": [], "segmentation": {}}
                                                                               ^
src/agents/style_aesthetic.py:7:1: F401 'torchvision.transforms as T' imported but unused
import torchvision.transforms as T
^
src/agents/style_aesthetic.py:8:1: F401 'PIL.Image' imported but unused
from PIL import Image
^
src/agents/style_aesthetic.py:9:1: F401 'numpy as np' imported but unused
import numpy as np
^
src/agents/style_aesthetic.py:10:1: F401 'typing.Dict' imported but unused
from typing import Dict, Any, List, Optional, Union
^
src/agents/style_aesthetic.py:10:1: F401 'typing.Any' imported but unused
from typing import Dict, Any, List, Optional, Union
^
src/agents/style_aesthetic.py:10:1: F401 'typing.List' imported but unused
from typing import Dict, Any, List, Optional, Union
^
src/agents/style_aesthetic.py:10:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, List, Optional, Union
^
src/agents/style_aesthetic.py:10:1: F401 'typing.Union' imported but unused
from typing import Dict, Any, List, Optional, Union
^
src/agents/style_aesthetic.py:11:1: F401 'loguru.logger' imported but unused
from loguru import logger
^
src/agents/style_aesthetic.py:14:1: F401 '..core.gpu_utils.gpu_manager' imported but unused
from ..core.gpu_utils import gpu_manager
^
src/agents/style_aesthetic.py:16:1: E302 expected 2 blank lines, found 1
class StyleAestheticAgent(BaseAgent):
^
src/agents/style_aesthetic.py:24:1: W293 blank line contains whitespace
    
^
src/agents/style_aesthetic.py:28:1: W293 blank line contains whitespace
    
^
src/agents/style_aesthetic.py:59:80: E501 line too long (164 > 79 characters)
        return {"overall_score": 1, "composition": {"rule_of_thirds": 1, "golden_ratio": 1, "symmetry": 1, "balance": 1}, "color": 1, "lighting": 1, "technical": 1}
                                                                               ^
src/agents/style_aesthetic.py:61:1: E302 expected 2 blank lines, found 1
class SemanticEditingAgent(BaseAgent):
^
src/agents/style_aesthetic.py:72:9: F841 local variable 'instruction' is assigned to but never used
        instruction = input_data.get("instruction", "")
        ^
src/agents/style_aesthetic.py:78:80: E501 line too long (80 > 79 characters)
            "parsed_instruction": {"operation_type": "edit", "confidence": 1.0},
                                                                               ^
src/agents/style_aesthetic.py:79:80: E501 line too long (84 > 79 characters)
            "scene_analysis": {"scene_classification": {"top_scenes": ["outdoor"]}},
                                                                               ^
src/agents/style_aesthetic.py:84:80: E501 line too long (100 > 79 characters)
        return {"operation_type": "edit", "target_objects": [], "attributes": {}, "confidence": 1.0}
                                                                               ^
src/agents/style_aesthetic.py:87:80: E501 line too long (112 > 79 characters)
        return {"scene_classification": {"top_scenes": ["outdoor"]}, "detected_objects": [], "segmentation": {}}
                                                                               ^
src/agents/style_aesthetic.py:96:1: E302 expected 2 blank lines, found 1
class StyleTransferAgent(BaseAgent):
^
src/agents/style_aesthetic.py:123:1: E302 expected 2 blank lines, found 1
class VisionLanguageAgent(BaseAgent):
^
src/agents/style_transfer.py:5:1: E302 expected 2 blank lines, found 1
class StyleTransferAgent(BaseAgent):
^
src/agents/style_transfer.py:33:80: E501 line too long (102 > 79 characters)
        return {'output_image': image or Image.new('RGB', (64, 64)), 'style': style, 'status': 'stub'}
                                                                               ^
src/agents/style_transfer.py:36:59: W291 trailing whitespace
        return {"status": "success", "output_image": None}                                                           ^
src/agents/style_transfer.py:36:60: W292 no newline at end of file
        return {"status": "success", "output_image": None}                                                            ^
src/agents/super_resolution.py:7:1: F401 'torch.nn' imported but unused
import torch.nn as nn
^
src/agents/super_resolution.py:11:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, Optional
^
src/agents/super_resolution.py:60:1: E302 expected 2 blank lines, found 1
class SuperResolutionAgent(BaseAgent):
^
src/agents/super_resolution.py:62:80: E501 line too long (80 > 79 characters)
    """
    SuperResolutionAgent supporting 10 real super-resolution/restoration models:
    - Real-ESRGAN, ESRGAN, BSRGAN, RRDBNet, SwinIR, Restormer, Uformer, NAFNet, Swin2SR, IPT
    """
       
                                                                       ^
src/agents/super_resolution.py:63:80: E501 line too long (92 > 79 characters)
    """
    SuperResolutionAgent supporting 10 real super-resolution/restoration models:
    - Real-ESRGAN, ESRGAN, BSRGAN, RRDBNet, SwinIR, Restormer, Uformer, NAFNet, Swin2SR, IPT
    """
       
                                                                       ^
src/agents/super_resolution.py:76:1: W293 blank line contains whitespace
        
^
src/agents/super_resolution.py:95:1: W293 blank line contains whitespace
    
^
src/agents/super_resolution.py:103:80: E501 line too long (105 > 79 characters)
            model = torch.hub.load('xinntao/Real-ESRGAN', 'real_esrgan', pretrained=True).to(self.device)
                                                                               ^
src/agents/super_resolution.py:110:1: W293 blank line contains whitespace
    
^
src/agents/super_resolution.py:118:80: E501 line too long (95 > 79 characters)
            model = torch.hub.load('xinntao/ESRGAN', 'esrgan', pretrained=True).to(self.device)
                                                                               ^
src/agents/super_resolution.py:125:1: W293 blank line contains whitespace
    
^
src/agents/super_resolution.py:134:80: E501 line too long (93 > 79 characters)
                raise ImportError("basicsr not installed. BSRGAN and RRDBNet will not work.")
                                                                               ^
src/agents/super_resolution.py:136:80: E501 line too long (92 > 79 characters)
            weights_url = 'https://github.com/cszn/BSRGAN/releases/download/v0.1/BSRGAN.pth'
                                                                               ^
src/agents/super_resolution.py:150:1: W293 blank line contains whitespace
    
^
src/agents/super_resolution.py:158:80: E501 line too long (93 > 79 characters)
                raise ImportError("basicsr not installed. BSRGAN and RRDBNet will not work.")
                                                                               ^
src/agents/super_resolution.py:160:80: E501 line too long (103 > 79 characters)
            weights_url = 'https://github.com/xinntao/ESRGAN/releases/download/v0.1/RRDB_ESRGAN_x4.pth'
                                                                               ^
src/agents/super_resolution.py:174:1: W293 blank line contains whitespace
    
^
src/agents/super_resolution.py:182:80: E501 line too long (80 > 79 characters)
                raise ImportError("swinir not installed. SwinIR will not work.")
                                                                               ^
src/agents/super_resolution.py:183:80: E501 line too long (218 > 79 characters)
            model = SwinIR(upscale=4, in_chans=3, img_size=64, window_size=8, img_range=1.0, depths=[6,6,6,6,6,6], embed_dim=180, num_heads=[6,6,6,6,6,6], mlp_ratio=2, upsampler='pixelshuffle', resi_connection='1conv')
                                                                               ^
src/agents/super_resolution.py:183:103: E231 missing whitespace after ','
            model = SwinIR(upscale=4, in_chans=3, img_size=64, window_size=8, img_range=1.0, depths=[6,6,6,6,6,6], embed_dim=180, num_heads=[6,6,6,6,6,6], mlp_ratio=2, upsampler='pixelshuffle', resi_connection='1conv')
                                                                                                      ^
src/agents/super_resolution.py:183:105: E231 missing whitespace after ','
            model = SwinIR(upscale=4, in_chans=3, img_size=64, window_size=8, img_range=1.0, depths=[6,6,6,6,6,6], embed_dim=180, num_heads=[6,6,6,6,6,6], mlp_ratio=2, upsampler='pixelshuffle', resi_connection='1conv')
                                                                                                        ^
src/agents/super_resolution.py:183:107: E231 missing whitespace after ','
            model = SwinIR(upscale=4, in_chans=3, img_size=64, window_size=8, img_range=1.0, depths=[6,6,6,6,6,6], embed_dim=180, num_heads=[6,6,6,6,6,6], mlp_ratio=2, upsampler='pixelshuffle', resi_connection='1conv')
                                                                                                          ^
src/agents/super_resolution.py:183:109: E231 missing whitespace after ','
            model = SwinIR(upscale=4, in_chans=3, img_size=64, window_size=8, img_range=1.0, depths=[6,6,6,6,6,6], embed_dim=180, num_heads=[6,6,6,6,6,6], mlp_ratio=2, upsampler='pixelshuffle', resi_connection='1conv')
                                                                                                            ^
src/agents/super_resolution.py:183:111: E231 missing whitespace after ','
            model = SwinIR(upscale=4, in_chans=3, img_size=64, window_size=8, img_range=1.0, depths=[6,6,6,6,6,6], embed_dim=180, num_heads=[6,6,6,6,6,6], mlp_ratio=2, upsampler='pixelshuffle', resi_connection='1conv')
                                                                                                              ^
src/agents/super_resolution.py:183:143: E231 missing whitespace after ','
            model = SwinIR(upscale=4, in_chans=3, img_size=64, window_size=8, img_range=1.0, depths=[6,6,6,6,6,6], embed_dim=180, num_heads=[6,6,6,6,6,6], mlp_ratio=2, upsampler='pixelshuffle', resi_connection='1conv')
                                                                                                                                              ^
src/agents/super_resolution.py:183:145: E231 missing whitespace after ','
            model = SwinIR(upscale=4, in_chans=3, img_size=64, window_size=8, img_range=1.0, depths=[6,6,6,6,6,6], embed_dim=180, num_heads=[6,6,6,6,6,6], mlp_ratio=2, upsampler='pixelshuffle', resi_connection='1conv')
                                                                                                                                                ^
src/agents/super_resolution.py:183:147: E231 missing whitespace after ','
            model = SwinIR(upscale=4, in_chans=3, img_size=64, window_size=8, img_range=1.0, depths=[6,6,6,6,6,6], embed_dim=180, num_heads=[6,6,6,6,6,6], mlp_ratio=2, upsampler='pixelshuffle', resi_connection='1conv')
                                                                                                                                                  ^
src/agents/super_resolution.py:183:149: E231 missing whitespace after ','
            model = SwinIR(upscale=4, in_chans=3, img_size=64, window_size=8, img_range=1.0, depths=[6,6,6,6,6,6], embed_dim=180, num_heads=[6,6,6,6,6,6], mlp_ratio=2, upsampler='pixelshuffle', resi_connection='1conv')
                                                                                                                                                    ^
src/agents/super_resolution.py:183:151: E231 missing whitespace after ','
            model = SwinIR(upscale=4, in_chans=3, img_size=64, window_size=8, img_range=1.0, depths=[6,6,6,6,6,6], embed_dim=180, num_heads=[6,6,6,6,6,6], mlp_ratio=2, upsampler='pixelshuffle', resi_connection='1conv')
                                                                                                                                                      ^
src/agents/super_resolution.py:184:80: E501 line too long (127 > 79 characters)
            weights_url = 'https://github.com/JingyunLiang/SwinIR/releases/download/v0.0/swinir_sr_classical_patch64_x4_48.pth'
                                                                               ^
src/agents/super_resolution.py:198:1: W293 blank line contains whitespace
    
^
src/agents/super_resolution.py:206:80: E501 line too long (86 > 79 characters)
                raise ImportError("restormer not installed. Restormer will not work.")
                                                                               ^
src/agents/super_resolution.py:208:80: E501 line too long (109 > 79 characters)
            weights_url = 'https://github.com/swz30/Restormer/releases/download/v0.0/Restormer_Denoising.pth'
                                                                               ^
src/agents/super_resolution.py:222:1: W293 blank line contains whitespace
    
^
src/agents/super_resolution.py:230:80: E501 line too long (82 > 79 characters)
                raise ImportError("uformer not installed. Uformer will not work.")
                                                                               ^
src/agents/super_resolution.py:231:80: E501 line too long (161 > 79 characters)
            model = Uformer(img_size=128, embed_dim=32, win_size=8, token_projection='linear', token_mlp='leff', modulator=True, depths=[2,2,2,2,2,2,2], dd_in=3)
                                                                               ^
src/agents/super_resolution.py:231:139: E231 missing whitespace after ','
            model = Uformer(img_size=128, embed_dim=32, win_size=8, token_projection='linear', token_mlp='leff', modulator=True, depths=[2,2,2,2,2,2,2], dd_in=3)
                                                                                                                                          ^
src/agents/super_resolution.py:231:141: E231 missing whitespace after ','
            model = Uformer(img_size=128, embed_dim=32, win_size=8, token_projection='linear', token_mlp='leff', modulator=True, depths=[2,2,2,2,2,2,2], dd_in=3)
                                                                                                                                            ^
src/agents/super_resolution.py:231:143: E231 missing whitespace after ','
            model = Uformer(img_size=128, embed_dim=32, win_size=8, token_projection='linear', token_mlp='leff', modulator=True, depths=[2,2,2,2,2,2,2], dd_in=3)
                                                                                                                                              ^
src/agents/super_resolution.py:231:145: E231 missing whitespace after ','
            model = Uformer(img_size=128, embed_dim=32, win_size=8, token_projection='linear', token_mlp='leff', modulator=True, depths=[2,2,2,2,2,2,2], dd_in=3)
                                                                                                                                                ^
src/agents/super_resolution.py:231:147: E231 missing whitespace after ','
            model = Uformer(img_size=128, embed_dim=32, win_size=8, token_projection='linear', token_mlp='leff', modulator=True, depths=[2,2,2,2,2,2,2], dd_in=3)
                                                                                                                                                  ^
src/agents/super_resolution.py:231:149: E231 missing whitespace after ','
            model = Uformer(img_size=128, embed_dim=32, win_size=8, token_projection='linear', token_mlp='leff', modulator=True, depths=[2,2,2,2,2,2,2], dd_in=3)
                                                                                                                                                    ^
src/agents/super_resolution.py:232:80: E501 line too long (103 > 79 characters)
            weights_url = 'https://github.com/zhanghanwei/Uformer/releases/download/v0.0/uformer_b.pth'
                                                                               ^
src/agents/super_resolution.py:246:1: W293 blank line contains whitespace
    
^
src/agents/super_resolution.py:254:80: E501 line too long (80 > 79 characters)
                raise ImportError("nafnet not installed. NAFNet will not work.")
                                                                               ^
src/agents/super_resolution.py:256:80: E501 line too long (103 > 79 characters)
            weights_url = 'https://github.com/megvii-research/NAFNet/releases/download/v0.0/NAFNet.pth'
                                                                               ^
src/agents/super_resolution.py:270:1: W293 blank line contains whitespace
    
^
src/agents/super_resolution.py:278:80: E501 line too long (82 > 79 characters)
                raise ImportError("swin2sr not installed. Swin2SR will not work.")
                                                                               ^
src/agents/super_resolution.py:280:80: E501 line too long (102 > 79 characters)
            weights_url = 'https://github.com/JingyunLiang/Swin2SR/releases/download/v0.0/swin2sr.pth'
                                                                               ^
src/agents/super_resolution.py:294:1: W293 blank line contains whitespace
    
^
src/agents/super_resolution.py:304:80: E501 line too long (104 > 79 characters)
            weights_url = 'https://github.com/huawei-noah/Pretrained-IPT/releases/download/v0.0/ipt.pth'
                                                                               ^
src/agents/super_resolution.py:318:1: W293 blank line contains whitespace
    
^
src/agents/super_resolution.py:354:1: W293 blank line contains whitespace
    
^
src/agents/super_resolution.py:360:1: W293 blank line contains whitespace
    
^
src/agents/super_resolution.py:368:1: E305 expected 2 blank lines after class or function definition, found 1
"""
Real-ESRGAN: No manual download needed if using torch.hub. For custom weights, see https://github.com/xinntao/Real-ESRGAN#model-zoo
ESRGAN: https://github.com/xinntao/ESRGAN#model-zoo
BSRGAN: https://github.com/cszn/BSRGAN#pre-trained-models
RRDBNet: https://github.com/xinntao/ESRGAN#rrdb-models
SwinIR: https://github.com/JingyunLiang/SwinIR#pre-trained-models
Restormer: https://github.com/swz30/Restormer#pre-trained-models
Uformer: https://github.com/zhanghanwei/Uformer#pretrained-models
NAFNet: https://github.com/megvii-research/NAFNet#pretrained-models
Swin2SR: https://github.com/JingyunLiang/Swin2SR#pre-trained-models
IPT: https://github.com/huawei-noah/Pretrained-IPT#pre-trained-models
"""
^
src/agents/super_resolution.py:369:80: E501 line too long (131 > 79 characters)
"""
Real-ESRGAN: No manual download needed if using torch.hub. For custom weights, see https://github.com/xinntao/Real-ESRGAN#model-zoo
ESRGAN: https://github.com/xinntao/ESRGAN#model-zoo
BSRGAN: https://github.com/cszn/BSRGAN#pre-trained-models
RRDBNet: https://github.com/xinntao/ESRGAN#rrdb-models
SwinIR: https://github.com/JingyunLiang/SwinIR#pre-trained-models
Restormer: https://github.com/swz30/Restormer#pre-trained-models
Uformer: https://github.com/zhanghanwei/Uformer#pretrained-models
NAFNet: https://github.com/megvii-research/NAFNet#pretrained-models
Swin2SR: https://github.com/JingyunLiang/Swin2SR#pre-trained-models
IPT: https://github.com/huawei-noah/Pretrained-IPT#pre-trained-models
"""
   
                                                                           ^
src/agents/super_resolution.py:388:5: E301 expected 1 blank line, found 0
    async def test():
    ^
src/agents/super_resolution.py:396:80: E501 line too long (90 > 79 characters)
        print(f"Test result: {result['status']}, output saved to {result['output_path']}")
                                                                               ^
src/agents/super_resolution.py:397:24: W291 trailing whitespace
    asyncio.run(test())                        ^
src/agents/super_resolution.py:397:25: W292 no newline at end of file
    asyncio.run(test())                         ^
src/agents/text_recovery.py:11:1: F401 'typing.List' imported but unused
from typing import Dict, Any, List, Optional
^
src/agents/text_recovery.py:11:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, List, Optional
^
src/agents/text_recovery.py:17:1: E302 expected 2 blank lines, found 1
class TextRecoveryAgent(BaseAgent):
^
src/agents/text_recovery.py:23:1: W293 blank line contains whitespace
        
^
src/agents/text_recovery.py:28:80: E501 line too long (91 > 79 characters)
            logger.warning("Text recovery models are placeholders. Implement real models.")
                                                                               ^
src/agents/text_recovery.py:29:1: W293 blank line contains whitespace
            
^
src/agents/text_recovery.py:32:1: W293 blank line contains whitespace
            
^
src/agents/text_recovery.py:35:1: W293 blank line contains whitespace
            
^
src/agents/text_recovery.py:38:1: W293 blank line contains whitespace
            
^
src/agents/text_recovery.py:40:80: E501 line too long (99 > 79 characters)
            self.models['calligraphy_reconstructor'] = await self._load_calligraphy_reconstructor()
                                                                               ^
src/agents/text_recovery.py:41:1: W293 blank line contains whitespace
            
^
src/agents/text_recovery.py:44:1: W293 blank line contains whitespace
            
^
src/agents/text_recovery.py:50:27: E128 continuation line under-indented for visual indent
                          std=[0.229, 0.224, 0.225])
                          ^
src/agents/text_recovery.py:52:1: W293 blank line contains whitespace
            
^
src/agents/text_recovery.py:54:1: W293 blank line contains whitespace
            
^
src/agents/text_recovery.py:58:1: W293 blank line contains whitespace
    
^
src/agents/text_recovery.py:65:1: W293 blank line contains whitespace
            
^
src/agents/text_recovery.py:68:1: W293 blank line contains whitespace
        
^
src/agents/text_recovery.py:70:1: W293 blank line contains whitespace
    
^
src/agents/text_recovery.py:79:1: W293 blank line contains whitespace
        
^
src/agents/text_recovery.py:87:1: W293 blank line contains whitespace
        
^
src/agents/text_recovery.py:89:1: W293 blank line contains whitespace
    
^
src/agents/text_recovery.py:98:1: W293 blank line contains whitespace
            
^
src/agents/text_recovery.py:103:1: W293 blank line contains whitespace
        
^
src/agents/text_recovery.py:105:1: W293 blank line contains whitespace
    
^
src/agents/text_recovery.py:112:1: W293 blank line contains whitespace
            
^
src/agents/text_recovery.py:115:1: W293 blank line contains whitespace
        
^
src/agents/text_recovery.py:117:1: W293 blank line contains whitespace
    
^
src/agents/text_recovery.py:126:1: W293 blank line contains whitespace
            
^
src/agents/text_recovery.py:131:1: W293 blank line contains whitespace
        
^
src/agents/text_recovery.py:133:1: W293 blank line contains whitespace
    
^
src/agents/text_recovery.py:143:1: W293 blank line contains whitespace
            
^
src/agents/text_recovery.py:146:1: W293 blank line contains whitespace
            
^
src/agents/text_recovery.py:149:1: W293 blank line contains whitespace
            
^
src/agents/text_recovery.py:163:1: W293 blank line contains whitespace
            
^
src/agents/text_recovery.py:168:1: W293 blank line contains whitespace
                
^
src/agents/text_recovery.py:174:1: W293 blank line contains whitespace
            
^
src/agents/text_recovery.py:176:1: W293 blank line contains whitespace
            
^
src/agents/text_recovery.py:180:1: W293 blank line contains whitespace
    
^
src/agents/text_recovery.py:185:1: W293 blank line contains whitespace
        
^
src/agents/text_recovery.py:191:1: W293 blank line contains whitespace
    
^
src/agents/text_recovery.py:195:13: F841 local variable 'ocr_output' is assigned to but never used
            ocr_output = self.models['ocr'](x)
            ^
src/agents/text_recovery.py:196:1: W293 blank line contains whitespace
        
^
src/agents/text_recovery.py:199:1: W293 blank line contains whitespace
        
^
src/agents/text_recovery.py:205:1: W293 blank line contains whitespace
    
^
src/agents/text_recovery.py:210:1: W293 blank line contains whitespace
        
^
src/agents/text_recovery.py:215:1: W293 blank line contains whitespace
    
^
src/agents/text_recovery.py:216:80: E501 line too long (80 > 79 characters)
    async def _reconstruct_calligraphy(self, x: torch.Tensor) -> Dict[str, Any]:
                                                                               ^
src/agents/text_recovery.py:220:1: W293 blank line contains whitespace
        
^
src/agents/text_recovery.py:225:1: W293 blank line contains whitespace
    
^
src/agents/text_recovery.py:230:1: W293 blank line contains whitespace
        
^
src/agents/text_recovery.py:234:1: W293 blank line contains whitespace
        
^
src/agents/text_recovery.py:241:1: W293 blank line contains whitespace
    
^
src/agents/text_recovery.py:246:1: W293 blank line contains whitespace
        
^
src/agents/text_recovery.py:249:1: W293 blank line contains whitespace
        
^
src/agents/text_recovery.py:252:1: W293 blank line contains whitespace
        
^
src/agents/text_recovery.py:255:1: W293 blank line contains whitespace
        
^
src/agents/text_recovery.py:264:1: W293 blank line contains whitespace
    
^
src/agents/text_recovery.py:271:1: W293 blank line contains whitespace
    
^
src/agents/text_recovery.py:275:33: W291 trailing whitespace
        torch.cuda.empty_cache()                                 ^
src/agents/text_recovery.py:275:34: W292 no newline at end of file
        torch.cuda.empty_cache()                                  ^
src/agents/tile_stitching.py:3:80: E501 line too long (80 > 79 characters)
"""
Tile Stitching & Seam Fusion Agent
Handles tiling, overlapping, feathering, and seamless blending of image segments
"""
   
                                  
                                        ^
src/agents/tile_stitching.py:17:1: E302 expected 2 blank lines, found 1
class TileStitchingAgent(BaseAgent):
^
src/agents/tile_stitching.py:23:1: W293 blank line contains whitespace
        
^
src/agents/tile_stitching.py:28:80: E501 line too long (92 > 79 characters)
            logger.warning("Tile stitching models are placeholders. Implement real models.")
                                                                               ^
src/agents/tile_stitching.py:29:1: W293 blank line contains whitespace
            
^
src/agents/tile_stitching.py:32:1: W293 blank line contains whitespace
            
^
src/agents/tile_stitching.py:35:1: W293 blank line contains whitespace
            
^
src/agents/tile_stitching.py:38:1: W293 blank line contains whitespace
            
^
src/agents/tile_stitching.py:40:80: E501 line too long (81 > 79 characters)
            self.models['overlap_detector'] = await self._load_overlap_detector()
                                                                               ^
src/agents/tile_stitching.py:41:1: W293 blank line contains whitespace
            
^
src/agents/tile_stitching.py:46:27: E128 continuation line under-indented for visual indent
                          std=[0.229, 0.224, 0.225])
                          ^
src/agents/tile_stitching.py:48:1: W293 blank line contains whitespace
            
^
src/agents/tile_stitching.py:50:1: W293 blank line contains whitespace
            
^
src/agents/tile_stitching.py:54:1: W293 blank line contains whitespace
    
^
src/agents/tile_stitching.py:61:1: W293 blank line contains whitespace
            
^
src/agents/tile_stitching.py:64:1: W293 blank line contains whitespace
        
^
src/agents/tile_stitching.py:66:1: W293 blank line contains whitespace
    
^
src/agents/tile_stitching.py:73:1: W293 blank line contains whitespace
            
^
src/agents/tile_stitching.py:76:1: W293 blank line contains whitespace
        
^
src/agents/tile_stitching.py:78:1: W293 blank line contains whitespace
    
^
src/agents/tile_stitching.py:85:1: W293 blank line contains whitespace
        
^
src/agents/tile_stitching.py:89:1: W293 blank line contains whitespace
        
^
src/agents/tile_stitching.py:91:1: W293 blank line contains whitespace
    
^
src/agents/tile_stitching.py:98:1: W293 blank line contains whitespace
            
^
src/agents/tile_stitching.py:101:1: W293 blank line contains whitespace
        
^
src/agents/tile_stitching.py:103:1: W293 blank line contains whitespace
    
^
src/agents/tile_stitching.py:111:1: W293 blank line contains whitespace
            
^
src/agents/tile_stitching.py:115:1: W293 blank line contains whitespace
            
^
src/agents/tile_stitching.py:125:1: W293 blank line contains whitespace
                
^
src/agents/tile_stitching.py:128:1: W293 blank line contains whitespace
            
^
src/agents/tile_stitching.py:130:80: E501 line too long (85 > 79 characters)
            stitched = await self._stitch_tiles(tile_tensors, overlap, feather_width)
                                                                               ^
src/agents/tile_stitching.py:131:1: W293 blank line contains whitespace
            
^
src/agents/tile_stitching.py:134:1: W293 blank line contains whitespace
            
^
src/agents/tile_stitching.py:140:1: W293 blank line contains whitespace
            
^
src/agents/tile_stitching.py:149:1: W293 blank line contains whitespace
            
^
src/agents/tile_stitching.py:153:1: W293 blank line contains whitespace
    
^
src/agents/tile_stitching.py:154:80: E501 line too long (111 > 79 characters)
    async def _stitch_tiles(self, tiles: List[torch.Tensor], overlap: int, feather_width: int) -> torch.Tensor:
                                                                               ^
src/agents/tile_stitching.py:158:1: W293 blank line contains whitespace
        
^
src/agents/tile_stitching.py:161:1: W293 blank line contains whitespace
        
^
src/agents/tile_stitching.py:167:1: W293 blank line contains whitespace
        
^
src/agents/tile_stitching.py:172:80: E501 line too long (82 > 79 characters)
            row = await self._stitch_horizontal(row_tiles, overlap, feather_width)
                                                                               ^
src/agents/tile_stitching.py:174:1: W293 blank line contains whitespace
        
^
src/agents/tile_stitching.py:177:1: W293 blank line contains whitespace
    
^
src/agents/tile_stitching.py:178:80: E501 line too long (116 > 79 characters)
    async def _stitch_horizontal(self, tiles: List[torch.Tensor], overlap: int, feather_width: int) -> torch.Tensor:
                                                                               ^
src/agents/tile_stitching.py:182:1: W293 blank line contains whitespace
        
^
src/agents/tile_stitching.py:185:80: E501 line too long (100 > 79 characters)
            result = await self._blend_tiles(result, tiles[i], overlap, feather_width, 'horizontal')
                                                                               ^
src/agents/tile_stitching.py:186:1: W293 blank line contains whitespace
        
^
src/agents/tile_stitching.py:188:1: W293 blank line contains whitespace
    
^
src/agents/tile_stitching.py:189:80: E501 line too long (114 > 79 characters)
    async def _stitch_vertical(self, tiles: List[torch.Tensor], overlap: int, feather_width: int) -> torch.Tensor:
                                                                               ^
src/agents/tile_stitching.py:193:1: W293 blank line contains whitespace
        
^
src/agents/tile_stitching.py:196:80: E501 line too long (98 > 79 characters)
            result = await self._blend_tiles(result, tiles[i], overlap, feather_width, 'vertical')
                                                                               ^
src/agents/tile_stitching.py:197:1: W293 blank line contains whitespace
        
^
src/agents/tile_stitching.py:199:1: W293 blank line contains whitespace
    
^
src/agents/tile_stitching.py:200:80: E501 line too long (141 > 79 characters)
    async def _blend_tiles(self, tile1: torch.Tensor, tile2: torch.Tensor, overlap: int, feather_width: int, direction: str) -> torch.Tensor:
                                                                               ^
src/agents/tile_stitching.py:203:80: E501 line too long (97 > 79 characters)
        mask = await self._create_feathering_mask(tile1.shape, overlap, feather_width, direction)
                                                                               ^
src/agents/tile_stitching.py:204:1: W293 blank line contains whitespace
        
^
src/agents/tile_stitching.py:208:1: W293 blank line contains whitespace
        
^
src/agents/tile_stitching.py:211:1: W293 blank line contains whitespace
        
^
src/agents/tile_stitching.py:213:1: W293 blank line contains whitespace
    
^
src/agents/tile_stitching.py:214:80: E501 line too long (134 > 79 characters)
    async def _create_feathering_mask(self, shape: Tuple[int, ...], overlap: int, feather_width: int, direction: str) -> torch.Tensor:
                                                                               ^
src/agents/tile_stitching.py:217:1: W293 blank line contains whitespace
        
^
src/agents/tile_stitching.py:220:80: E501 line too long (85 > 79 characters)
            mask[:, :, :, :overlap] = torch.linspace(0, 1, overlap).view(1, 1, 1, -1)
                                                                               ^
src/agents/tile_stitching.py:223:80: E501 line too long (85 > 79 characters)
            mask[:, :, :overlap, :] = torch.linspace(0, 1, overlap).view(1, 1, -1, 1)
                                                                               ^
src/agents/tile_stitching.py:224:1: W293 blank line contains whitespace
        
^
src/agents/tile_stitching.py:226:1: W293 blank line contains whitespace
    
^
src/agents/tile_stitching.py:227:80: E501 line too long (94 > 79 characters)
    async def _apply_feathering(self, tile: torch.Tensor, mask: torch.Tensor) -> torch.Tensor:
                                                                               ^
src/agents/tile_stitching.py:231:1: W293 blank line contains whitespace
    
^
src/agents/tile_stitching.py:232:80: E501 line too long (116 > 79 characters)
    async def _blend_with_model(self, tile1: torch.Tensor, tile2: torch.Tensor, mask: torch.Tensor) -> torch.Tensor:
                                                                               ^
src/agents/tile_stitching.py:236:1: W293 blank line contains whitespace
    
^
src/agents/tile_stitching.py:243:1: W293 blank line contains whitespace
    
^
src/agents/tile_stitching.py:247:33: W291 trailing whitespace
        torch.cuda.empty_cache()                                 ^
src/agents/tile_stitching.py:247:34: W292 no newline at end of file
        torch.cuda.empty_cache()                                  ^
src/agents/vision_language.py:5:1: E302 expected 2 blank lines, found 1
class VisionLanguageAgent(BaseAgent):
^
src/agents/vision_language.py:7:80: E501 line too long (88 > 79 characters)
    """
    Agent for vision-language tasks (e.g., image captioning, CLIP/BLIP-style retrieval).
    """
       
                                                                       ^
src/agents/vision_language.py:29:9: F841 local variable 'image' is assigned to but never used
        image: Image.Image = task.get('image')
        ^
src/agents/vision_language.py:35:5: F811 redefinition of unused 'process' from line 21
    async def process(self, input_data):
    ^
src/agents/vision_language.py:36:53: W291 trailing whitespace
        return {"status": "success", "output": None}                                                     ^
src/agents/vision_language.py:36:54: W292 no newline at end of file
        return {"status": "success", "output": None}                                                      ^
src/agents/workflow_builder.py:9:1: E302 expected 2 blank lines, found 1
class WorkflowBuilder:
^
src/agents/workflow_builder.py:17:80: E501 line too long (99 > 79 characters)
    def build_workflow(self, command: str, context: Dict[str, Any] = None) -> List[Dict[str, Any]]:
                                                                               ^
src/agents/workflow_builder.py:37:80: E501 line too long (94 > 79 characters)
                workflow.append({"agent": "integration", "params": {"recipient": m.group(1)}})
                                                                               ^
src/agents/workflow_builder.py:50:80: E501 line too long (81 > 79 characters)
# tasks = builder.build_workflow("Restore this image, upscale, and send to John") 
                                                                               ^
src/agents/workflow_builder.py:50:82: W291 trailing whitespace
# tasks = builder.build_workflow("Restore this image, upscale, and send to John") 
                                                                                 ^
src/agents/workflow_builder.py:52:1: E302 expected 2 blank lines, found 1
def main():
^
src/agents/workflow_builder.py:53:5: F821 undefined name 'setup_logging'
    setup_logging()
    ^
src/agents/workflow_builder.py:54:5: F821 undefined name 'logger'
    logger.info("Starting AISIS")
    ^
src/agents/workflow_builder.py:55:11: F821 undefined name 'QApplication'
    app = QApplication(sys.argv)
          ^
src/agents/workflow_builder.py:55:24: F821 undefined name 'sys'
    app = QApplication(sys.argv)
                       ^
src/agents/workflow_builder.py:56:14: F821 undefined name 'MainWindow'
    window = MainWindow()
             ^
src/agents/workflow_builder.py:58:22: W291 trailing whitespace
    return app.exec() 
                     ^
src/agents/workflow_builder.py:60:1: E302 expected 2 blank lines, found 1
class AISISApplication:
^
src/agents/workflow_builder.py:65:46: W291 trailing whitespace
        await self._initialize_integrations() 
                                             ^
src/agents/workflow_builder.py:67:1: E302 expected 2 blank lines, found 1
class PluginBase:
^
src/agents/workflow_builder.py:73:9: F821 undefined name 'logger'
        logger.warning("Plugin sandboxing not yet implemented.")
        ^
src/agents/workflow_builder.py:78:9: F821 undefined name 'logger'
        logger.warning("Permission checking not yet implemented.")
        ^
src/agents/workflow_builder.py:79:20: W291 trailing whitespace
        return True 
                   ^
src/agents/workflow_builder.py:81:80: E501 line too long (83 > 79 characters)
    def _save_crash_report(self, error: Exception, context: Dict[str, Any]) -> str:
                                                                               ^
src/agents/workflow_builder.py:83:19: F821 undefined name 'report_file'
        with open(report_file, "w") as f:
                  ^
src/agents/workflow_builder.py:84:23: F821 undefined name 'report'
            json.dump(report, f, indent=2) 
                      ^
src/agents/workflow_builder.py:84:43: W291 trailing whitespace
            json.dump(report, f, indent=2) 
                                          ^
src/agents/workflow_builder.py:89:37: W291 trailing whitespace
            torch.cuda.empty_cache() 
                                    ^
src/agents/workflow_builder.py:91:1: E305 expected 2 blank lines after class or function definition, found 1
"""Predictive Editing Stub
Future implementation for predictive image editing using AI.
""" 
^
src/agents/workflow_builder.py:93:4: W291 trailing whitespace
"""Predictive Editing Stub
Future implementation for predictive image editing using AI.
""" 
   ^
src/agents/workflow_builder.py:95:1: E302 expected 2 blank lines, found 1
class ModelManager:
^
src/agents/workflow_builder.py:98:9: F841 local variable 'response' is assigned to but never used
        response = requests.get(model_version.url, stream=True)
        ^
src/agents/workflow_builder.py:98:33: F821 undefined name 'model_version'
        response = requests.get(model_version.url, stream=True)
                                ^
src/agents/workflow_builder.py:101:16: W291 trailing whitespace
            ... 
               ^
src/agents/workflow_builder.py:103:1: E302 expected 2 blank lines, found 1
class BaseAgent:
^
src/agents/workflow_builder.py:107:5: E301 expected 1 blank line, found 0
    async def _process(self, task: Dict[str, Any]) -> Dict[str, Any]:
    ^
src/agents/workflow_builder.py:108:34: W291 trailing whitespace
        raise NotImplementedError 
                                 ^
src/agents/workflow_builder.py:110:1: E302 expected 2 blank lines, found 1
def llm_parse(self, command: str, context: Dict[str, Any], history: List[str] = None) -> List[Dict[str, Any]]:
^
src/agents/workflow_builder.py:110:80: E501 line too long (110 > 79 characters)
def llm_parse(self, command: str, context: Dict[str, Any], history: List[str] = None) -> List[Dict[str, Any]]:
                                                                               ^
src/agents/workflow_builder.py:115:41: W291 trailing whitespace
        return self._llama_parse(prompt) 
                                        ^
src/agents/workflow_builder.py:117:1: E302 expected 2 blank lines, found 1
def with_recovery(self, context: Dict[str, Any] = None):
^
src/agents/workflow_builder.py:125:36: F821 undefined name 'error_context'
                if self.recover(e, error_context):
                                   ^
src/agents/workflow_builder.py:130:21: W291 trailing whitespace
    return decorator 
                    ^
src/agents/workflow_builder.py:132:1: E305 expected 2 blank lines after class or function definition, found 1
from PyQt6.QtWidgets import QDialog, QVBoxLayout, QLabel, QTextEdit, QComboBox, QPushButton
^
src/agents/workflow_builder.py:132:1: E402 module level import not at top of file
from PyQt6.QtWidgets import QDialog, QVBoxLayout, QLabel, QTextEdit, QComboBox, QPushButton
^
src/agents/workflow_builder.py:132:80: E501 line too long (91 > 79 characters)
from PyQt6.QtWidgets import QDialog, QVBoxLayout, QLabel, QTextEdit, QComboBox, QPushButton
                                                                               ^
src/agents/workflow_builder.py:134:1: E302 expected 2 blank lines, found 1
class AgentExplainDialog(QDialog):
^
src/agents/workflow_builder.py:145:47: F821 undefined name 'QApplication'
        self.copy_btn.clicked.connect(lambda: QApplication.clipboard().setText(self.explanation.toPlainText()))
                                              ^
src/agents/workflow_builder.py:145:80: E501 line too long (111 > 79 characters)
        self.copy_btn.clicked.connect(lambda: QApplication.clipboard().setText(self.explanation.toPlainText()))
                                                                               ^
src/agents/workflow_builder.py:157:38: W291 trailing whitespace
        self.explanation.setText(doc)                                      ^
src/agents/workflow_builder.py:157:39: W292 no newline at end of file
        self.explanation.setText(doc)                                       ^
src/app_launcher.py:3:80: E501 line too long (81 > 79 characters)
"""
AISIS Application Launcher
Complete application that integrates modern UI, local models, and enhanced agents
into a cohesive, professional system.
"""
   
                          
                                                ^
src/app_launcher.py:9:1: F401 'threading' imported but unused
import threading
^
src/app_launcher.py:11:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, Optional
^
src/app_launcher.py:15:1: F401 '.core.config.config' imported but unused
from .core.config import config
^
src/app_launcher.py:17:1: F401 '.core.advanced_local_models.local_model_manager' imported but unused
from .core.advanced_local_models import local_model_manager
^
src/app_launcher.py:39:1: W293 blank line contains whitespace
    
^
src/app_launcher.py:47:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:52:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:57:1: W293 blank line contains whitespace
            
^
src/app_launcher.py:60:1: W293 blank line contains whitespace
            
^
src/app_launcher.py:63:1: W293 blank line contains whitespace
            
^
src/app_launcher.py:66:1: W293 blank line contains whitespace
            
^
src/app_launcher.py:69:1: W293 blank line contains whitespace
            
^
src/app_launcher.py:72:1: W293 blank line contains whitespace
            
^
src/app_launcher.py:76:1: W293 blank line contains whitespace
    
^
src/app_launcher.py:80:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:84:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:88:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:91:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:94:1: W293 blank line contains whitespace
    
^
src/app_launcher.py:98:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:102:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:105:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:110:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:118:1: W293 blank line contains whitespace
    
^
src/app_launcher.py:122:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:125:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:128:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:131:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:134:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:136:1: W293 blank line contains whitespace
    
^
src/app_launcher.py:140:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:144:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:146:1: W293 blank line contains whitespace
    
^
src/app_launcher.py:161:1: W293 blank line contains whitespace
    
^
src/app_launcher.py:175:1: W293 blank line contains whitespace
    
^
src/app_launcher.py:183:1: W293 blank line contains whitespace
    
^
src/app_launcher.py:188:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:194:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:197:1: W293 blank line contains whitespace
    
^
src/app_launcher.py:200:80: E501 line too long (88 > 79 characters)
        page_names = ["Dashboard", "Image Editor", "AI Agents", "Settings", "Analytics"]
                                                                               ^
src/app_launcher.py:202:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:210:1: W293 blank line contains whitespace
    
^
src/app_launcher.py:215:1: W293 blank line contains whitespace
    
^
src/app_launcher.py:220:1: W293 blank line contains whitespace
    
^
src/app_launcher.py:225:1: W293 blank line contains whitespace
    
^
src/app_launcher.py:230:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:232:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:236:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:238:80: E501 line too long (81 > 79 characters)
        btn_text = "🌙 Dark Mode" if new_theme == Theme.LIGHT else "☀️ Light Mode"
                                                                               ^
src/app_launcher.py:240:1: W293 blank line contains whitespace
    
^
src/app_launcher.py:245:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:253:1: W293 blank line contains whitespace
            
^
src/app_launcher.py:255:80: E501 line too long (83 > 79 characters)
                raise ValueError(f"No suitable agents found for task: {task_type}")
                                                                               ^
src/app_launcher.py:256:1: W293 blank line contains whitespace
            
^
src/app_launcher.py:258:80: E501 line too long (81 > 79 characters)
            result = await self.orchestrator.delegate_task(task, suitable_agents)
                                                                               ^
src/app_launcher.py:259:1: W293 blank line contains whitespace
            
^
src/app_launcher.py:261:1: W293 blank line contains whitespace
            
^
src/app_launcher.py:265:1: W293 blank line contains whitespace
    
^
src/app_launcher.py:271:1: W293 blank line contains whitespace
    
^
src/app_launcher.py:277:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:281:1: W293 blank line contains whitespace
            
^
src/app_launcher.py:284:1: W293 blank line contains whitespace
            
^
src/app_launcher.py:288:1: W293 blank line contains whitespace
    
^
src/app_launcher.py:292:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:299:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:304:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:307:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:319:1: W293 blank line contains whitespace
    
^
src/app_launcher.py:323:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:326:1: W293 blank line contains whitespace
        
^
src/app_launcher.py:330:1: W293 blank line contains whitespace
    
^
src/app_launcher.py:340:1: W293 blank line contains whitespace
    
^
src/app_launcher.py:346:21: W291 trailing whitespace
    sys.exit(main())                     ^
src/app_launcher.py:346:22: W292 no newline at end of file
    sys.exit(main())                      ^
src/collab/__init__.py:1:1: F401 '.automerge_collab.AutomergeCollab' imported but unused
from .automerge_collab import AutomergeCollab ^
src/collab/__init__.py:1:46: W291 trailing whitespace
from .automerge_collab import AutomergeCollab                                              ^
src/collab/__init__.py:1:47: W292 no newline at end of file
from .automerge_collab import AutomergeCollab                                               ^
src/collab/automerge_collab.py:7:1: E302 expected 2 blank lines, found 1
class AutomergeCollab:
^
src/collab/automerge_collab.py:8:80: E501 line too long (81 > 79 characters)
    def __init__(self, doc_id: str, on_remote_change: Optional[Callable] = None):
                                                                               ^
src/collab/automerge_collab.py:106:58: W291 trailing whitespace
            print(f"Error handling incoming change: {e}")                                                          ^
src/collab/automerge_collab.py:106:59: W292 no newline at end of file
            print(f"Error handling incoming change: {e}")                                                           ^
src/collab/collab_server.py:15:80: E501 line too long (85 > 79 characters)
        self.active_sessions: Dict[str, Set[websockets.WebSocketServerProtocol]] = {}
                                                                               ^
src/collab/collab_server.py:42:32: W291 trailing whitespace
    CollaborationServer().run()                                ^
src/collab/collab_server.py:42:33: W292 no newline at end of file
    CollaborationServer().run()                                 ^
src/collab/lan_relay_server.py:4:1: E302 expected 2 blank lines, found 1
class LANRelayServer:
^
src/collab/lan_relay_server.py:17:80: E501 line too long (94 > 79 characters)
        threading.Thread(target=self.accept_clients, args=(server_sock,), daemon=True).start()
                                                                               ^
src/collab/lan_relay_server.py:31:80: E501 line too long (95 > 79 characters)
            threading.Thread(target=self.handle_client, args=(conn, addr), daemon=True).start()
                                                                               ^
src/collab/lan_relay_server.py:57:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
src/collab/lan_relay_server.py:59:19: W291 trailing whitespace
    server.start()                   ^
src/collab/lan_relay_server.py:59:20: W292 no newline at end of file
    server.start()                    ^
src/collab/live_collab_panel.py:1:1: W293 blank line contains whitespace
 ^
src/collab/live_collab_panel.py:1:2: W292 no newline at end of file
  ^
src/collab_server.py:3:1: F401 'json' imported but unused
import json
^
src/collab_server.py:7:1: E302 expected 2 blank lines, found 1
async def handler(websocket, path):
^
src/collab_server.py:18:1: E302 expected 2 blank lines, found 1
async def main():
^
src/collab_server.py:24:24: W291 trailing whitespace
    asyncio.run(main())                        ^
src/collab_server.py:24:25: W292 no newline at end of file
    asyncio.run(main())                         ^
src/core/advanced_local_models.py:44:80: E501 line too long (80 > 79 characters)
    """
    Manages multiple local AI models for offline operation.
    Supports intelligent model selection, caching, and performance optimization.
    """
       
                                                           
           ^
src/core/advanced_local_models.py:46:1: W293 blank line contains whitespace
    
^
src/core/advanced_local_models.py:53:1: W293 blank line contains whitespace
        
^
src/core/advanced_local_models.py:56:1: W293 blank line contains whitespace
    
^
src/core/advanced_local_models.py:65:80: E501 line too long (81 > 79 characters)
                description="7B parameter LLM for text generation and reasoning",
                                                                               ^
src/core/advanced_local_models.py:73:80: E501 line too long (86 > 79 characters)
                url="https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0",
                                                                               ^
src/core/advanced_local_models.py:76:80: E501 line too long (81 > 79 characters)
                capabilities=["image_generation", "image_editing", "inpainting"],
                                                                               ^
src/core/advanced_local_models.py:96:80: E501 line too long (87 > 79 characters)
                capabilities=["image_understanding", "visual_reasoning", "captioning"],
                                                                               ^
src/core/advanced_local_models.py:101:1: W293 blank line contains whitespace
        
^
src/core/advanced_local_models.py:107:1: W293 blank line contains whitespace
    
^
src/core/advanced_local_models.py:108:80: E501 line too long (84 > 79 characters)
    async def download_model(self, model_name: str, progress_callback=None) -> bool:
                                                                               ^
src/core/advanced_local_models.py:115:1: W293 blank line contains whitespace
        
^
src/core/advanced_local_models.py:118:1: W293 blank line contains whitespace
        
^
src/core/advanced_local_models.py:122:1: W293 blank line contains whitespace
        
^
src/core/advanced_local_models.py:124:1: W293 blank line contains whitespace
        
^
src/core/advanced_local_models.py:128:1: W293 blank line contains whitespace
            
^
src/core/advanced_local_models.py:130:80: E501 line too long (96 > 79 characters)
                repo_id=model_config.url.split("/")[-2] + "/" + model_config.url.split("/")[-1],
                                                                               ^
src/core/advanced_local_models.py:134:1: W293 blank line contains whitespace
            
^
src/core/advanced_local_models.py:139:1: W293 blank line contains whitespace
            
^
src/core/advanced_local_models.py:143:1: W293 blank line contains whitespace
    
^
src/core/advanced_local_models.py:151:1: W293 blank line contains whitespace
        
^
src/core/advanced_local_models.py:154:1: W293 blank line contains whitespace
        
^
src/core/advanced_local_models.py:157:80: E501 line too long (99 > 79 characters)
            raise RuntimeError(f"Model '{model_name}' not downloaded. Run download_model() first.")
                                                                               ^
src/core/advanced_local_models.py:158:1: W293 blank line contains whitespace
        
^
src/core/advanced_local_models.py:160:1: W293 blank line contains whitespace
        
^
src/core/advanced_local_models.py:164:1: W293 blank line contains whitespace
        
^
src/core/advanced_local_models.py:175:80: E501 line too long (80 > 79 characters)
                raise ValueError(f"Unsupported model type: {model_config.type}")
                                                                               ^
src/core/advanced_local_models.py:176:1: W293 blank line contains whitespace
            
^
src/core/advanced_local_models.py:179:1: W293 blank line contains whitespace
            
^
src/core/advanced_local_models.py:183:1: W293 blank line contains whitespace
    
^
src/core/advanced_local_models.py:193:1: W293 blank line contains whitespace
    
^
src/core/advanced_local_models.py:198:1: W293 blank line contains whitespace
        
^
src/core/advanced_local_models.py:205:1: W293 blank line contains whitespace
    
^
src/core/advanced_local_models.py:209:80: E501 line too long (82 > 79 characters)
        from transformers import WhisperProcessor, WhisperForConditionalGeneration
                                                                               ^
src/core/advanced_local_models.py:210:1: W293 blank line contains whitespace
        
^
src/core/advanced_local_models.py:215:1: W293 blank line contains whitespace
    
^
src/core/advanced_local_models.py:220:1: W293 blank line contains whitespace
        
^
src/core/advanced_local_models.py:228:1: W293 blank line contains whitespace
    
^
src/core/advanced_local_models.py:229:80: E501 line too long (92 > 79 characters)
    def get_best_model_for_task(self, task: str, constraints: Dict[str, Any] = None) -> str:
                                                                               ^
src/core/advanced_local_models.py:235:1: W293 blank line contains whitespace
        
^
src/core/advanced_local_models.py:239:1: W293 blank line contains whitespace
                
^
src/core/advanced_local_models.py:243:80: E501 line too long (84 > 79 characters)
                        memory_gb = int(config.memory_requirement.replace("GB", ""))
                                                                               ^
src/core/advanced_local_models.py:246:1: W293 blank line contains whitespace
                    
^
src/core/advanced_local_models.py:250:1: W293 blank line contains whitespace
                
^
src/core/advanced_local_models.py:252:1: W293 blank line contains whitespace
        
^
src/core/advanced_local_models.py:255:1: W293 blank line contains whitespace
        
^
src/core/advanced_local_models.py:258:1: W293 blank line contains whitespace
    
^
src/core/advanced_local_models.py:264:1: W293 blank line contains whitespace
    
^
src/core/advanced_local_models.py:269:1: W293 blank line contains whitespace
        
^
src/core/advanced_local_models.py:281:1: W293 blank line contains whitespace
    
^
src/core/advanced_local_models.py:285:1: W293 blank line contains whitespace
    
^
src/core/advanced_local_models.py:290:39: W291 trailing whitespace
            name: config.is_downloaded 
                                      ^
src/core/advanced_local_models.py:295:1: W293 blank line contains whitespace
    
^
src/core/advanced_local_models.py:317:23: W291 trailing whitespace
"""
Usage Examples:

# Download a model
await local_model_manager.download_model("llama-2-7b-chat")

# Load a model
model = local_model_manager.load_model("llama-2-7b-chat")

# Get best model for a task
best_model = local_model_manager.get_best_model_for_task(
    "text_generation", 
    constraints={"max_memory": 8}
)

# List all models
models = local_model_manager.list_models()
"""    
               

 ^
src/core/advanced_local_models.py:323:4: W291 trailing whitespace
"""
Usage Examples:

# Download a model
await local_model_manager.download_model("llama-2-7b-chat")

# Load a model
model = local_model_manager.load_model("llama-2-7b-chat")

# Get best model for a task
best_model = local_model_manager.get_best_model_for_task(
    "text_generation", 
    constraints={"max_memory": 8}
)

# List all models
models = local_model_manager.list_models()
"""    ^
src/core/advanced_local_models.py:323:5: W292 no newline at end of file
"""
Usage Examples:

# Download a model
await local_model_manager.download_model("llama-2-7b-chat")

# Load a model
model = local_model_manager.load_model("llama-2-7b-chat")

# Get best model for a task
best_model = local_model_manager.get_best_model_for_task(
    "text_generation", 
    constraints={"max_memory": 8}
)

# List all models
models = local_model_manager.list_models()
"""    
^
src/core/config.py:6:1: E302 expected 2 blank lines, found 1
class Config:
^
src/core/config.py:35:1: W293 blank line contains whitespace
        
^
src/core/config.py:37:1: W293 blank line contains whitespace
        
^
src/core/config.py:73:1: W293 blank line contains whitespace
        
^
src/core/config.py:79:1: W293 blank line contains whitespace
        
^
src/core/config.py:86:1: W293 blank line contains whitespace
        
^
src/core/config.py:91:1: W293 blank line contains whitespace
        
^
src/core/config.py:99:80: E501 line too long (93 > 79 characters)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")
                                                                               ^
src/core/config.py:101:1: E302 expected 2 blank lines, found 1
class ConfigDict:
^
src/core/config.py:105:1: W293 blank line contains whitespace
    
^
src/core/config.py:112:80: E501 line too long (93 > 79 characters)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")
                                                                               ^
src/core/config.py:113:1: W293 blank line contains whitespace
    
^
src/core/config.py:118:1: E305 expected 2 blank lines after class or function definition, found 1
config = Config()
^
src/core/config_validation.py:1:1: F401 'pydantic.ValidationError' imported but unused
from pydantic import BaseModel, ValidationError, Field
^
src/core/config_validation.py:4:1: E302 expected 2 blank lines, found 1
class UIConfig(BaseModel):
^
src/core/config_validation.py:8:1: E302 expected 2 blank lines, found 1
class GPUConfig(BaseModel):
^
src/core/config_validation.py:12:1: E302 expected 2 blank lines, found 1
class PathsConfig(BaseModel):
^
src/core/config_validation.py:17:1: E302 expected 2 blank lines, found 1
class AISISConfig(BaseModel):
^
src/core/config_validation.py:26:15: W291 trailing whitespace
#     print(e)               ^
src/core/config_validation.py:26:16: W292 no newline at end of file
#     print(e)                ^
src/core/device.py:114:4: W291 trailing whitespace
"""
How to extend:
- Subclass BaseDeviceAdapter for new device types (e.g., smart TV, AR headset).
- Implement device-specific methods and capabilities.
- Add to DEVICE_ADAPTER_REGISTRY.

This structure supports future expansion for device-specific features and
platforms.
"""    ^
src/core/device.py:114:5: W292 no newline at end of file
"""
How to extend:
- Subclass BaseDeviceAdapter for new device types (e.g., smart TV, AR headset).
- Implement device-specific methods and capabilities.
- Add to DEVICE_ADAPTER_REGISTRY.

This structure supports future expansion for device-specific features and
platforms.
"""    
^
src/core/error_recovery.py:6:1: F401 'os' imported but unused
import os
^
src/core/error_recovery.py:16:1: E302 expected 2 blank lines, found 1
class ErrorRecovery:
^
src/core/error_recovery.py:20:1: W293 blank line contains whitespace
        
^
src/core/error_recovery.py:23:1: W293 blank line contains whitespace
        
^
src/core/error_recovery.py:27:1: W293 blank line contains whitespace
        
^
src/core/error_recovery.py:37:1: W293 blank line contains whitespace
        
^
src/core/error_recovery.py:47:1: W293 blank line contains whitespace
        
^
src/core/error_recovery.py:57:1: W293 blank line contains whitespace
        
^
src/core/error_recovery.py:65:80: E501 line too long (84 > 79 characters)
    def register_recovery_handler(self, error_type: str, handler: Callable) -> None:
                                                                               ^
src/core/error_recovery.py:71:80: E501 line too long (83 > 79 characters)
    def _save_crash_report(self, error: Exception, context: Dict[str, Any]) -> str:
                                                                               ^
src/core/error_recovery.py:75:1: W293 blank line contains whitespace
        
^
src/core/error_recovery.py:83:1: W293 blank line contains whitespace
        
^
src/core/error_recovery.py:86:1: W293 blank line contains whitespace
            
^
src/core/error_recovery.py:92:1: W293 blank line contains whitespace
        """
        Attempt to recover from an error
        
        Args:
            error: The exception that occurred
            context: Dictionary containing error context
            
        Returns:
            bool: True if recovery was successful
        """
^
src/core/error_recovery.py:96:1: W293 blank line contains whitespace
        """
        Attempt to recover from an error
        
        Args:
            error: The exception that occurred
            context: Dictionary containing error context
            
        Returns:
            bool: True if recovery was successful
        """
^
src/core/error_recovery.py:101:1: W293 blank line contains whitespace
        
^
src/core/error_recovery.py:105:1: W293 blank line contains whitespace
        
^
src/core/error_recovery.py:107:80: E501 line too long (80 > 79 characters)
        self.error_counts[error_type] = self.error_counts.get(error_type, 0) + 1
                                                                               ^
src/core/error_recovery.py:109:80: E501 line too long (87 > 79 characters)
            logger.error(f"Max retries ({self.max_retries}) exceeded for {error_type}")
                                                                               ^
src/core/error_recovery.py:111:1: W293 blank line contains whitespace
            
^
src/core/error_recovery.py:122:1: W293 blank line contains whitespace
                    
^
src/core/error_recovery.py:129:1: W293 blank line contains whitespace
        """
        Decorator for functions that need error recovery
        
        Args:
            context: Additional context for error handling
        """
^
src/core/error_recovery.py:145:1: W293 blank line contains whitespace
                    
^
src/core/error_recovery.py:162:1: W293 blank line contains whitespace
        
^
src/core/error_recovery.py:166:1: W293 blank line contains whitespace
                
^
src/core/error_recovery.py:170:1: W293 blank line contains whitespace
                
^
src/core/error_recovery.py:176:1: W293 blank line contains whitespace
                
^
src/core/error_recovery.py:178:1: W293 blank line contains whitespace
            
^
src/core/error_recovery.py:189:1: E302 expected 2 blank lines, found 1
def memory_cleanup_handler(error: Exception, context: Dict[str, Any]) -> bool:
^
src/core/error_recovery.py:197:1: E302 expected 2 blank lines, found 1
def network_retry_handler(error: Exception, context: Dict[str, Any]) -> bool:
^
src/core/error_recovery.py:206:1: E305 expected 2 blank lines after class or function definition, found 1
error_recovery = ErrorRecovery()
^
src/core/error_recovery.py:208:80: E501 line too long (82 > 79 characters)
error_recovery.register_recovery_handler("ConnectionError", network_retry_handler)
                                                                               ^
src/core/error_recovery.py:217:4: W291 trailing whitespace
"""
@error_recovery.with_recovery({"module": "image_processing"})
def process_image(image_path: str) -> None:
    # Processing code that might fail
    pass
"""    ^
src/core/error_recovery.py:217:5: W292 no newline at end of file
"""
@error_recovery.with_recovery({"module": "image_processing"})
def process_image(image_path: str) -> None:
    # Processing code that might fail
    pass
"""    
^
src/core/federated_learning.py:16:80: E501 line too long (81 > 79 characters)
        self.feedback_history.append({'agent': agent_name, 'feedback': feedback})
                                                                               ^
src/core/federated_learning.py:27:80: E501 line too long (96 > 79 characters)
        # TODO: Coordinate a federated learning round (local update, aggregation, global update)
                                                                               ^
src/core/federated_learning.py:28:13: W291 trailing whitespace
        pass             ^
src/core/federated_learning.py:28:14: W292 no newline at end of file
        pass              ^
src/core/gpu_utils.py:9:1: E302 expected 2 blank lines, found 1
class GPUManager:
^
src/core/gpu_utils.py:11:80: E501 line too long (82 > 79 characters)
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
                                                                               ^
src/core/gpu_utils.py:13:1: W293 blank line contains whitespace
    
^
src/core/gpu_utils.py:17:80: E501 line too long (93 > 79 characters)
            total_mem = torch.cuda.get_device_properties(0).total_memory // (1024 ** 2)  # MB
                                                                               ^
src/core/gpu_utils.py:23:1: W293 blank line contains whitespace
    
^
src/core/gpu_utils.py:28:1: W293 blank line contains whitespace
    
^
src/core/gpu_utils.py:46:1: E305 expected 2 blank lines after class or function definition, found 1
gpu_manager = GPUManager()
^
src/core/integration.py:6:80: E501 line too long (80 > 79 characters)
    """
    Abstract base class for external service integrations (cloud, collaboration,
    etc.).
    """
       
                                                                       ^
src/core/integration.py:84:4: W291 trailing whitespace
"""
How to add a new integration:
- Subclass BaseIntegration and implement required methods.
- Add an instance to INTEGRATION_REGISTRY.

This structure supports future plugin/extension loading for third-party
integrations.
"""    ^
src/core/integration.py:84:5: W292 no newline at end of file
"""
How to add a new integration:
- Subclass BaseIntegration and implement required methods.
- Add an instance to INTEGRATION_REGISTRY.

This structure supports future plugin/extension loading for third-party
integrations.
"""    
^
src/core/llm_manager.py:28:54: W291 trailing whitespace
        return response["choices"][0]["text"].strip()                                                      ^
src/core/llm_manager.py:28:55: W292 no newline at end of file
        return response["choices"][0]["text"].strip()                                                       ^
src/core/logging_setup.py:16:80: E501 line too long (81 > 79 characters)
    logger.add(log_file, rotation="1 week", retention="4 weeks", level=log_level)
                                                                               ^
src/core/logging_setup.py:17:41: W291 trailing whitespace
    logging.basicConfig(level=log_level)                                         ^
src/core/logging_setup.py:17:42: W292 no newline at end of file
    logging.basicConfig(level=log_level)                                          ^
src/core/model_benchmarking.py:9:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Any, Optional, Union, Tuple, TYPE_CHECKING
^
src/core/model_benchmarking.py:44:80: E501 line too long (100 > 79 characters)
    batch_sizes: List[int] = field(default_factory=lambda: [1, 8, 16, 32])  # For throughput testing
                                                                               ^
src/core/model_benchmarking.py:45:80: E501 line too long (116 > 79 characters)
    input_shapes: List[Tuple[int, ...]] = field(default_factory=lambda: [(1, 3, 224, 224)])  # Different input sizes
                                                                               ^
src/core/model_benchmarking.py:67:80: E501 line too long (95 > 79 characters)
                "Required dependencies not found. Please install: torch, numpy, psutil, loguru"
                                                                               ^
src/core/model_benchmarking.py:93:80: E501 line too long (80 > 79 characters)
                                timestamp=datetime.fromisoformat(r["timestamp"])
                                                                               ^
src/core/model_benchmarking.py:151:1: W293 blank line contains whitespace
        """
        Run benchmarks on a model
        
        Args:
            model: The model to benchmark
            model_id: Unique identifier for the model
            version: Version string
            config: Benchmark configuration
            
        Returns:
            BenchmarkResult containing performance metrics
        """
^
src/core/model_benchmarking.py:157:1: W293 blank line contains whitespace
        """
        Run benchmarks on a model
        
        Args:
            model: The model to benchmark
            model_id: Unique identifier for the model
            version: Version string
            config: Benchmark configuration
            
        Returns:
            BenchmarkResult containing performance metrics
        """
^
src/core/model_benchmarking.py:168:1: W293 blank line contains whitespace
        
^
src/core/model_benchmarking.py:173:1: W293 blank line contains whitespace
        
^
src/core/model_benchmarking.py:183:80: E501 line too long (85 > 79 characters)
            metrics = self._benchmark_inference_speed(model, device, config.num_runs)
                                                                               ^
src/core/model_benchmarking.py:187:80: E501 line too long (100 > 79 characters)
            metrics = self._benchmark_throughput(model, device, config.batch_sizes, config.num_runs)
                                                                               ^
src/core/model_benchmarking.py:191:80: E501 line too long (84 > 79 characters)
            metrics = self._benchmark_resource_usage(model, device, config.num_runs)
                                                                               ^
src/core/model_benchmarking.py:221:80: E501 line too long (99 > 79 characters)
    def _run_batch_inference(self, model: "torch.nn.Module", device: str, batch_size: int) -> None:
                                                                               ^
src/core/model_benchmarking.py:238:80: E501 line too long (80 > 79 characters)
            raise ImportError("PyTorch and NumPy are required for benchmarking")
                                                                               ^
src/core/model_benchmarking.py:241:1: W293 blank line contains whitespace
        
^
src/core/model_benchmarking.py:268:80: E501 line too long (80 > 79 characters)
            initial_memory = psutil.Process().memory_info().rss if psutil else 0
                                                                               ^
src/core/model_benchmarking.py:272:1: W293 blank line contains whitespace
        
^
src/core/model_benchmarking.py:277:1: W293 blank line contains whitespace
        
^
src/core/model_benchmarking.py:281:80: E501 line too long (87 > 79 characters)
            "memory_increase_mb": float((peak_memory - initial_memory) / (1024 * 1024))
                                                                               ^
src/core/model_benchmarking.py:293:80: E501 line too long (80 > 79 characters)
            raise ImportError("PyTorch and NumPy are required for benchmarking")
                                                                               ^
src/core/model_benchmarking.py:296:1: W293 blank line contains whitespace
        
^
src/core/model_benchmarking.py:320:80: E501 line too long (80 > 79 characters)
            raise ImportError("PyTorch and NumPy are required for benchmarking")
                                                                               ^
src/core/model_benchmarking.py:323:1: W293 blank line contains whitespace
        
^
src/core/model_benchmarking.py:327:1: W293 blank line contains whitespace
                
^
src/core/model_benchmarking.py:331:1: W293 blank line contains whitespace
                
^
src/core/model_benchmarking.py:334:1: W293 blank line contains whitespace
                
^
src/core/model_benchmarking.py:338:1: W293 blank line contains whitespace
                
^
src/core/model_benchmarking.py:358:80: E501 line too long (80 > 79 characters)
            raise ImportError("PyTorch and NumPy are required for benchmarking")
                                                                               ^
src/core/model_benchmarking.py:362:1: W293 blank line contains whitespace
        
^
src/core/model_benchmarking.py:365:1: W293 blank line contains whitespace
            
^
src/core/model_benchmarking.py:368:1: W293 blank line contains whitespace
            
^
src/core/model_benchmarking.py:370:1: W293 blank line contains whitespace
            
^
src/core/model_benchmarking.py:373:1: W293 blank line contains whitespace
            
^
src/core/model_benchmarking.py:384:80: E501 line too long (82 > 79 characters)
                "avg_gpu_memory_usage": float(np.mean(gpu_usage) / (1024 * 1024)),
                                                                               ^
src/core/model_benchmarking.py:385:80: E501 line too long (80 > 79 characters)
                "max_gpu_memory_usage": float(np.max(gpu_usage) / (1024 * 1024))
                                                                               ^
src/core/model_benchmarking.py:422:1: W293 blank line contains whitespace
        
^
src/core/model_benchmarking.py:452:1: W293 blank line contains whitespace
        
^
src/core/model_benchmarking.py:453:29: W291 trailing whitespace
        self._save_results()                             ^
src/core/model_benchmarking.py:453:30: W292 no newline at end of file
        self._save_results()                              ^
src/core/model_downloader.py:6:1: F401 'os' imported but unused
import os
^
src/core/model_downloader.py:12:1: F401 'typing.Any' imported but unused
from typing import Optional, Callable, Dict, Any
^
src/core/model_downloader.py:37:80: E501 line too long (123 > 79 characters)
        # NOTE: The following dictionaries are not thread-safe. If accessed from multiple threads, use appropriate locking.
                                                                               ^
src/core/model_downloader.py:39:80: E501 line too long (84 > 79 characters)
        self._progress_callbacks: Dict[str, Callable[[DownloadProgress], None]] = {}
                                                                               ^
src/core/model_downloader.py:52:1: W293 blank line contains whitespace
        """
        Download a model with resume capability and progress tracking
        
        Args:
            model_id: Unique identifier for the model
            version: Version string
            url: Download URL
            expected_hash: Expected SHA-256 hash of the file
            chunk_size: Download chunk size in bytes
            progress_callback: Optional callback for progress updates
        
        Returns:
            bool: True if download successful, False otherwise
        """
^
src/core/model_downloader.py:60:1: W293 blank line contains whitespace
        """
        Download a model with resume capability and progress tracking
        
        Args:
            model_id: Unique identifier for the model
            version: Version string
            url: Download URL
            expected_hash: Expected SHA-256 hash of the file
            chunk_size: Download chunk size in bytes
            progress_callback: Optional callback for progress updates
        
        Returns:
            bool: True if download successful, False otherwise
        """
^
src/core/model_downloader.py:110:80: E501 line too long (86 > 79 characters)
                logger.info(f"File already exists and hash matches for {download_id}")
                                                                               ^
src/core/model_downloader.py:113:80: E501 line too long (95 > 79 characters)
                logger.warning(f"Existing file hash mismatch for {download_id}, redownloading")
                                                                               ^
src/core/model_downloader.py:118:80: E501 line too long (81 > 79 characters)
        headers = {'Range': f'bytes={initial_size}-'} if initial_size > 0 else {}
                                                                               ^
src/core/model_downloader.py:124:80: E501 line too long (92 > 79 characters)
                        logger.error(f"Failed to download {download_id}: {response.status}")
                                                                               ^
src/core/model_downloader.py:136:80: E501 line too long (85 > 79 characters)
                        async for chunk in response.content.iter_chunked(chunk_size):
                                                                               ^
src/core/model_downloader.py:142:80: E501 line too long (87 > 79 characters)
                                elapsed = (datetime.now() - start_time).total_seconds()
                                                                               ^
src/core/model_downloader.py:143:80: E501 line too long (82 > 79 characters)
                                speed = downloaded / elapsed if elapsed > 0 else 0
                                                                               ^
src/core/model_downloader.py:144:80: E501 line too long (91 > 79 characters)
                                eta = (total_size - downloaded) / speed if speed > 0 else 0
                                                                               ^
src/core/model_downloader.py:145:1: W293 blank line contains whitespace
                                
^
src/core/model_downloader.py:160:80: E501 line too long (82 > 79 characters)
                logger.info(f"Successfully downloaded and verified {download_id}")
                                                                               ^
src/core/model_downloader.py:187:80: E501 line too long (95 > 79 characters)
    def get_download_progress(self, model_id: str, version: str) -> Optional[DownloadProgress]:
                                                                               ^
src/core/model_downloader.py:259:68: W291 trailing whitespace
                logger.error(f"Error removing temp directory: {e}")                                                                    ^
src/core/model_downloader.py:259:69: W292 no newline at end of file
                logger.error(f"Error removing temp directory: {e}")                                                                     ^
src/core/model_manager.py:11:1: F401 'typing.Union' imported but unused
from typing import Dict, Any, Optional, List, Union, TYPE_CHECKING
^
src/core/model_manager.py:12:1: F401 'datetime.datetime' imported but unused
from datetime import datetime
^
src/core/model_manager.py:30:1: E302 expected 2 blank lines, found 1
class ModelVersion:
^
src/core/model_manager.py:31:80: E501 line too long (84 > 79 characters)
    def __init__(self, version: str, hash: str, url: str, metadata: Dict[str, Any]):
                                                                               ^
src/core/model_manager.py:40:1: E302 expected 2 blank lines, found 1
class ModelManager:
^
src/core/model_manager.py:44:80: E501 line too long (96 > 79 characters)
                "Required dependencies not found. Please install: torch, requests, tqdm, loguru"
                                                                               ^
src/core/model_manager.py:52:1: W293 blank line contains whitespace
        
^
src/core/model_manager.py:67:80: E501 line too long (88 > 79 characters)
    def _handle_download_error(self, error: Exception, context: Dict[str, Any]) -> bool:
                                                                               ^
src/core/model_manager.py:79:1: W293 blank line contains whitespace
            
^
src/core/model_manager.py:85:1: W293 blank line contains whitespace
            
^
src/core/model_manager.py:90:80: E501 line too long (90 > 79 characters)
    def _handle_validation_error(self, error: Exception, context: Dict[str, Any]) -> bool:
                                                                               ^
src/core/model_manager.py:106:80: E501 line too long (84 > 79 characters)
    def _handle_load_error(self, error: Exception, context: Dict[str, Any]) -> bool:
                                                                               ^
src/core/model_manager.py:154:80: E501 line too long (83 > 79 characters)
        if model_id not in self.versions or version not in self.versions[model_id]:
                                                                               ^
src/core/model_manager.py:164:1: W293 blank line contains whitespace
            
^
src/core/model_manager.py:183:1: W293 blank line contains whitespace
                
^
src/core/model_manager.py:185:80: E501 line too long (80 > 79 characters)
            logger.error(f"Failed to download model {model_id} v{version}: {e}")
                                                                               ^
src/core/model_manager.py:193:80: E501 line too long (83 > 79 characters)
        if model_id not in self.versions or version not in self.versions[model_id]:
                                                                               ^
src/core/model_manager.py:208:1: W293 blank line contains whitespace
            
^
src/core/model_manager.py:217:80: E501 line too long (80 > 79 characters)
            logger.error(f"Failed to validate model {model_id} v{version}: {e}")
                                                                               ^
src/core/model_manager.py:221:80: E501 line too long (85 > 79 characters)
    async def benchmark_model(self, model_id: str, version: str) -> Dict[str, float]:
                                                                               ^
src/core/model_manager.py:223:80: E501 line too long (83 > 79 characters)
        if model_id not in self.versions or version not in self.versions[model_id]:
                                                                               ^
src/core/model_manager.py:235:80: E501 line too long (81 > 79 characters)
            device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
                                                                               ^
src/core/model_manager.py:241:1: W293 blank line contains whitespace
            
^
src/core/model_manager.py:250:1: W293 blank line contains whitespace
            
^
src/core/model_manager.py:258:1: W293 blank line contains whitespace
            
^
src/core/model_manager.py:262:80: E501 line too long (81 > 79 characters)
            logger.error(f"Failed to benchmark model {model_id} v{version}: {e}")
                                                                               ^
src/core/model_manager.py:272:80: E501 line too long (86 > 79 characters)
    def get_model_info(self, model_id: str, version: str) -> Optional[Dict[str, Any]]:
                                                                               ^
src/core/model_manager.py:274:80: E501 line too long (83 > 79 characters)
        if model_id not in self.versions or version not in self.versions[model_id]:
                                                                               ^
src/core/model_manager.py:298:1: W293 blank line contains whitespace
            
^
src/core/model_manager.py:305:29: W291 trailing whitespace
        self.save_versions() 
                            ^
src/core/model_manager.py:308:1: E302 expected 2 blank lines, found 1
class ModelDownloadError(Exception):
^
src/core/model_manager.py:311:1: E302 expected 2 blank lines, found 1
class ModelValidationError(Exception):
^
src/core/model_manager.py:314:1: E302 expected 2 blank lines, found 1
class ModelLoadError(Exception):
^
src/core/model_manager.py:315:9: W291 trailing whitespace
    pass         ^
src/core/model_manager.py:315:10: W292 no newline at end of file
    pass          ^
src/core/model_registry.py:6:1: F401 'os' imported but unused
import os
^
src/core/model_registry.py:92:80: E501 line too long (87 > 79 characters)
                        last_validated=datetime.fromisoformat(config["last_validated"])
                                                                               ^
src/core/model_registry.py:95:80: E501 line too long (91 > 79 characters)
                        last_benchmarked=datetime.fromisoformat(config["last_benchmarked"])
                                                                               ^
src/core/model_registry.py:128:1: W293 blank line contains whitespace
        
^
src/core/model_registry.py:208:1: W293 blank line contains whitespace
            
^
src/core/model_registry.py:290:80: E501 line too long (85 > 79 characters)
                errors.append(f"Invalid version format for {package}, must use '>='")
                                                                               ^
src/core/model_registry.py:346:1: W293 blank line contains whitespace
            
^
src/core/model_registry.py:352:25: W291 trailing whitespace
            return False                         ^
src/core/model_registry.py:352:26: W292 no newline at end of file
            return False                          ^
src/core/model_validator.py:6:1: F401 'os' imported but unused
import os
^
src/core/model_validator.py:10:1: F401 'numpy as np' imported but unused
import numpy as np
^
src/core/model_validator.py:12:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
src/core/model_validator.py:53:1: W293 blank line contains whitespace
        
^
src/core/model_validator.py:61:80: E501 line too long (88 > 79 characters)
                            self.validation_cache[model_id][version] = ValidationResult(
                                                                               ^
src/core/model_validator.py:63:80: E501 line too long (93 > 79 characters)
                                validation_level=ValidationLevel(result["validation_level"]),
                                                                               ^
src/core/model_validator.py:68:80: E501 line too long (85 > 79 characters)
                                timestamp=datetime.fromisoformat(result["timestamp"])
                                                                               ^
src/core/model_validator.py:78:1: W293 blank line contains whitespace
        
^
src/core/model_validator.py:91:1: W293 blank line contains whitespace
        
^
src/core/model_validator.py:106:1: W293 blank line contains whitespace
        """
        Validate a model file with comprehensive checks
        
        Args:
            model_id: Unique identifier for the model
            version: Version string
            expected_hash: Expected SHA-256 hash
            model_type: Type of model (e.g., "llm", "vision", etc.)
            level: Validation level to perform
            force: Force revalidation even if cached result exists
        
        Returns:
            ValidationResult containing validation details
        """
^
src/core/model_validator.py:114:1: W293 blank line contains whitespace
        """
        Validate a model file with comprehensive checks
        
        Args:
            model_id: Unique identifier for the model
            version: Version string
            expected_hash: Expected SHA-256 hash
            model_type: Type of model (e.g., "llm", "vision", etc.)
            level: Validation level to perform
            force: Force revalidation even if cached result exists
        
        Returns:
            ValidationResult containing validation details
        """
^
src/core/model_validator.py:160:1: W293 blank line contains whitespace
        
^
src/core/model_validator.py:172:1: W293 blank line contains whitespace
                    
^
src/core/model_validator.py:186:80: E501 line too long (87 > 79 characters)
                            input_shape = (1, 3, 224, 224)  # Default for vision models
                                                                               ^
src/core/model_validator.py:235:80: E501 line too long (94 > 79 characters)
        elif model_id in self.validation_cache and version in self.validation_cache[model_id]:
                                                                               ^
src/core/model_validator.py:237:1: W293 blank line contains whitespace
        
^
src/core/model_validator.py:238:38: W291 trailing whitespace
        self._save_validation_cache()                                      ^
src/core/model_validator.py:238:39: W292 no newline at end of file
        self._save_validation_cache()                                       ^
src/core/model_versioning.py:29:1: W293 blank line contains whitespace
    
^
src/core/model_versioning.py:68:80: E501 line too long (85 > 79 characters)
    def _create_new_version(self, new_version: semver.VersionInfo) -> 'ModelVersion':
                                                                               ^
src/core/model_versioning.py:79:80: E501 line too long (81 > 79 characters)
                training_data=self.lineage.training_data if self.lineage else "",
                                                                               ^
src/core/model_versioning.py:80:80: E501 line too long (92 > 79 characters)
                training_config=self.lineage.training_config.copy() if self.lineage else {},
                                                                               ^
src/core/model_versioning.py:110:80: E501 line too long (92 > 79 characters)
                        lineage = ModelLineage(**v["lineage"]) if v.get("lineage") else None
                                                                               ^
src/core/model_versioning.py:121:80: E501 line too long (86 > 79 characters)
                        version.performance_metrics = v.get("performance_metrics", {})
                                                                               ^
src/core/model_versioning.py:148:80: E501 line too long (83 > 79 characters)
                        "creation_date": version.lineage.creation_date.isoformat(),
                                                                               ^
src/core/model_versioning.py:154:1: W293 blank line contains whitespace
        
^
src/core/model_versioning.py:179:1: W293 blank line contains whitespace
        
^
src/core/model_versioning.py:184:80: E501 line too long (81 > 79 characters)
    def get_version(self, model_id: str, version: str) -> Optional[ModelVersion]:
                                                                               ^
src/core/model_versioning.py:192:1: W293 blank line contains whitespace
        
^
src/core/model_versioning.py:203:1: W293 blank line contains whitespace
        
^
src/core/model_versioning.py:212:1: W293 blank line contains whitespace
        
^
src/core/model_versioning.py:220:20: W291 trailing whitespace
        return tree                    ^
src/core/model_versioning.py:220:21: W292 no newline at end of file
        return tree                     ^
src/core/model_zoo.py:6:1: F401 'os' imported but unused
import os
^
src/core/model_zoo.py:21:80: E501 line too long (80 > 79 characters)
from .model_benchmarking import ModelBenchmarker, BenchmarkConfig, BenchmarkType
                                                                               ^
src/core/model_zoo.py:24:1: E302 expected 2 blank lines, found 1
class ModelStatus(Enum):
^
src/core/model_zoo.py:32:1: E302 expected 2 blank lines, found 1
class ModelZoo:
^
src/core/model_zoo.py:71:80: E501 line too long (87 > 79 characters)
            success = await self.manager.download_model(model_id, model_config.version)
                                                                               ^
src/core/model_zoo.py:84:80: E501 line too long (85 > 79 characters)
    async def load_model(self, model_id: str, device: str = "auto") -> Optional[Any]:
                                                                               ^
src/core/model_zoo.py:97:80: E501 line too long (364 > 79 characters)
            # The line `if not model_config.is_downloaded:` is checking if the model associated with the given `model_id` has been downloaded or not. If the model has not been downloaded (`is_downloaded` is `False`), the code inside the `if` block will be executed to download the model before proceeding with further operations like loading the model into memory.
                                                                               ^
src/core/model_zoo.py:98:80: E501 line too long (341 > 79 characters)
            # The line `if not model_config.is_downloaded:` is checking if the model associated with the given `model_id` has been downloaded or not. If `model_config.is_downloaded` is `False`, it means the model has not been downloaded yet. In that case, the code will proceed to download the model before attempting to load it into memory.
                                                                               ^
src/core/model_zoo.py:99:80: E501 line too long (350 > 79 characters)
            # The line `if not model_config.is_downloaded:` is checking if the `is_downloaded` attribute of the `model_config` object is `False`. If the model associated with `model_id` has not been downloaded yet, this condition will evaluate to `True`, indicating that the model needs to be downloaded before proceeding with loading it into memory.
                                                                               ^
src/core/model_zoo.py:105:80: E501 line too long (87 > 79 characters)
            model_path = self.manager.models_dir / f"{model_id}-{model_config.version}"
                                                                               ^
src/core/model_zoo.py:106:80: E501 line too long (89 > 79 characters)
            model = self._load_model_by_type(model_path, model_config.model_type, device)
                                                                               ^
src/core/model_zoo.py:117:80: E501 line too long (95 > 79 characters)
    def _load_model_by_type(self, model_path: Path, model_type: ModelType, device: str) -> Any:
                                                                               ^
src/core/model_zoo.py:130:21: F401 'transformers.AutoModel' imported but unused
                    from transformers import AutoModel, AutoTokenizer
                    ^
src/core/model_zoo.py:130:21: F401 'transformers.AutoTokenizer' imported but unused
                    from transformers import AutoModel, AutoTokenizer
                    ^
src/core/model_zoo.py:131:21: F401 'diffusers.StableDiffusionPipeline' imported but unused
                    from diffusers import StableDiffusionPipeline
                    ^
src/core/model_zoo.py:135:80: E501 line too long (104 > 79 characters)
                    "Required ML dependencies not found. Please install: torch, transformers, diffusers"
                                                                               ^
src/core/model_zoo.py:143:80: E501 line too long (89 > 79 characters)
                return diffusers.StableDiffusionPipeline.from_pretrained(str(model_path))
                                                                               ^
src/core/model_zoo.py:178:80: E501 line too long (101 > 79 characters)
    async def benchmark_model(self, model_id: str, config: Optional[BenchmarkConfig] = None) -> bool:
                                                                               ^
src/core/model_zoo.py:228:1: W293 blank line contains whitespace
            
^
src/core/model_zoo.py:232:1: W293 blank line contains whitespace
            
^
src/core/model_zoo.py:248:1: W293 blank line contains whitespace
        
^
src/core/model_zoo.py:251:1: W293 blank line contains whitespace
        
^
src/core/model_zoo.py:256:1: W293 blank line contains whitespace
                
^
src/core/model_zoo.py:260:1: W293 blank line contains whitespace
                
^
src/core/model_zoo.py:263:1: W293 blank line contains whitespace
            
^
src/core/model_zoo.py:267:1: W293 blank line contains whitespace
                
^
src/core/model_zoo.py:273:1: W293 blank line contains whitespace
            
^
src/core/model_zoo.py:282:80: E501 line too long (93 > 79 characters)
                "performance_metrics": latest_benchmark.metrics if latest_benchmark else None
                                                                               ^
src/core/model_zoo.py:284:1: W293 blank line contains whitespace
            
^
src/core/model_zoo.py:291:1: W293 blank line contains whitespace
        
^
src/core/model_zoo.py:299:1: E305 expected 2 blank lines after class or function definition, found 1
model_zoo = ModelZoo() ^
src/core/model_zoo.py:299:23: W291 trailing whitespace
model_zoo = ModelZoo()                       ^
src/core/model_zoo.py:299:24: W292 no newline at end of file
model_zoo = ModelZoo()                        ^
src/core/security.py:9:1: F401 'hashlib' imported but unused
import hashlib
^
src/core/security.py:18:1: E302 expected 2 blank lines, found 1
class SecurityManager:
^
src/core/security.py:22:1: W293 blank line contains whitespace
        
^
src/core/security.py:26:1: W293 blank line contains whitespace
        
^
src/core/security.py:29:1: W293 blank line contains whitespace
        
^
src/core/security.py:52:1: W293 blank line contains whitespace
        
^
src/core/security.py:105:80: E501 line too long (81 > 79 characters)
            if users[username]["password_hash"] != self._hash_password(password):
                                                                               ^
src/core/security.py:113:80: E501 line too long (80 > 79 characters)
                "expires_at": (datetime.now() + timedelta(hours=24)).isoformat()
                                                                               ^
src/core/security.py:134:1: W293 blank line contains whitespace
        
^
src/core/security.py:158:80: E501 line too long (84 > 79 characters)
            encrypted_data = self.fernet.encrypt(json.dumps(self.api_keys).encode())
                                                                               ^
src/core/security.py:164:80: E501 line too long (91 > 79 characters)
    def add_api_key(self, service: str, key: str, metadata: Dict[str, Any] = None) -> bool:
                                                                               ^
src/core/security.py:225:80: E501 line too long (85 > 79 characters)
    def handle_error(self, error: Exception, context: Dict[str, Any] = None) -> bool:
                                                                               ^
src/core/security.py:237:80: E501 line too long (87 > 79 characters)
        logger.error(f"Error could not be recovered after {retries} attempts: {error}")
                                                                               ^
src/core/security.py:240:80: E501 line too long (84 > 79 characters)
    def report_crash(self, error: Exception, context: Dict[str, Any] = None) -> str:
                                                                               ^
src/core/security.py:255:33: W291 trailing whitespace
            logger.info(message)                                 ^
src/core/security.py:255:34: W292 no newline at end of file
            logger.info(message)                                  ^
src/core/voice/__init__.py:11:29: W291 trailing whitespace
    "VoiceActivityDetector", 
                            ^
src/core/voice/bark_tts.py:6:1: F401 'os' imported but unused
import os
^
src/core/voice/bark_tts.py:15:1: F401 '..config.config' imported but unused
from ..config import config
^
src/core/voice/bark_tts.py:18:1: E302 expected 2 blank lines, found 1
class BarkTTS:
^
src/core/voice/bark_tts.py:20:1: W293 blank line contains whitespace
    
^
src/core/voice/bark_tts.py:27:1: W293 blank line contains whitespace
        
^
src/core/voice/bark_tts.py:31:1: W293 blank line contains whitespace
        
^
src/core/voice/bark_tts.py:33:1: W293 blank line contains whitespace
    
^
src/core/voice/bark_tts.py:38:1: W293 blank line contains whitespace
            
^
src/core/voice/bark_tts.py:41:1: W293 blank line contains whitespace
            
^
src/core/voice/bark_tts.py:50:1: W293 blank line contains whitespace
            
^
src/core/voice/bark_tts.py:53:1: W293 blank line contains whitespace
            
^
src/core/voice/bark_tts.py:57:1: W293 blank line contains whitespace
    
^
src/core/voice/bark_tts.py:77:1: W293 blank line contains whitespace
        
^
src/core/voice/bark_tts.py:85:1: W293 blank line contains whitespace
        
^
src/core/voice/bark_tts.py:87:1: W293 blank line contains whitespace
    
^
src/core/voice/bark_tts.py:91:80: E501 line too long (84 > 79 characters)
            logger.warning(f"Voice preset '{voice_name}' not found. Using default.")
                                                                               ^
src/core/voice/bark_tts.py:93:1: W293 blank line contains whitespace
        
^
src/core/voice/bark_tts.py:96:1: W293 blank line contains whitespace
    
^
src/core/voice/bark_tts.py:100:1: W293 blank line contains whitespace
    
^
src/core/voice/bark_tts.py:109:1: W293 blank line contains whitespace
    
^
src/core/voice/bark_tts.py:119:1: W293 blank line contains whitespace
        
^
src/core/voice/bark_tts.py:125:1: W293 blank line contains whitespace
        
^
src/core/voice/bark_tts.py:131:1: W293 blank line contains whitespace
        
^
src/core/voice/bark_tts.py:141:1: W293 blank line contains whitespace
            
^
src/core/voice/bark_tts.py:146:1: W293 blank line contains whitespace
            
^
src/core/voice/bark_tts.py:148:1: W293 blank line contains whitespace
            
^
src/core/voice/bark_tts.py:152:1: W293 blank line contains whitespace
    
^
src/core/voice/bark_tts.py:162:1: W293 blank line contains whitespace
        
^
src/core/voice/bark_tts.py:166:1: W293 blank line contains whitespace
        
^
src/core/voice/bark_tts.py:168:1: W293 blank line contains whitespace
    
^
src/core/voice/bark_tts.py:175:1: W293 blank line contains whitespace
        
^
src/core/voice/bark_tts.py:178:1: W293 blank line contains whitespace
            
^
src/core/voice/bark_tts.py:186:1: W293 blank line contains whitespace
                    
^
src/core/voice/bark_tts.py:197:1: W293 blank line contains whitespace
        
^
src/core/voice/bark_tts.py:200:1: W293 blank line contains whitespace
        
^
src/core/voice/bark_tts.py:202:1: W293 blank line contains whitespace
    
^
src/core/voice/bark_tts.py:212:1: W293 blank line contains whitespace
    
^
src/core/voice/bark_tts.py:216:1: W293 blank line contains whitespace
    
^
src/core/voice/bark_tts.py:222:1: E305 expected 2 blank lines after class or function definition, found 1
bark_tts = BarkTTS()
^
src/core/voice/faster_whisper_asr.py:5:1: E302 expected 2 blank lines, found 1
class FasterWhisperASR:
^
src/core/voice/faster_whisper_asr.py:7:80: E501 line too long (80 > 79 characters)
    """
    Streaming ASR using faster-whisper. Supports real-time chunked transcription
    and partial transcript emission.
    """
       
                                                                       ^
src/core/voice/faster_whisper_asr.py:20:80: E501 line too long (94 > 79 characters)
        self.model = WhisperModel(self.model_size, device=self.device, compute_type="float16")
                                                                               ^
src/core/voice/faster_whisper_asr.py:23:26: E128 continuation line under-indented for visual indent
                         on_partial=None, on_final=None):
                         ^
src/core/voice/faster_whisper_asr.py:69:80: E501 line too long (80 > 79 characters)
# TODO: Add more advanced VAD, language selection, and error handling as needed.                                                                                ^
src/core/voice/faster_whisper_asr.py:69:81: W291 trailing whitespace
# TODO: Add more advanced VAD, language selection, and error handling as needed.                                                                                 ^
src/core/voice/faster_whisper_asr.py:69:82: W292 no newline at end of file
# TODO: Add more advanced VAD, language selection, and error handling as needed.                                                                                  ^
src/core/voice/whisper_asr.py:9:1: F401 'time' imported but unused
import time
^
src/core/voice/whisper_asr.py:19:1: F401 '..gpu_utils.model_loader' imported but unused
from ..gpu_utils import gpu_manager, model_loader
^
src/core/voice/whisper_asr.py:21:1: E302 expected 2 blank lines, found 1
class WhisperASR:
^
src/core/voice/whisper_asr.py:23:1: W293 blank line contains whitespace
    
^
src/core/voice/whisper_asr.py:29:1: W293 blank line contains whitespace
        
^
src/core/voice/whisper_asr.py:34:1: W293 blank line contains whitespace
        
^
src/core/voice/whisper_asr.py:38:1: W293 blank line contains whitespace
        
^
src/core/voice/whisper_asr.py:40:1: W293 blank line contains whitespace
        
^
src/core/voice/whisper_asr.py:46:33: W291 trailing whitespace
                self.model_size, 
                                ^
src/core/voice/whisper_asr.py:49:1: W293 blank line contains whitespace
            
^
src/core/voice/whisper_asr.py:52:1: W293 blank line contains whitespace
            
^
src/core/voice/whisper_asr.py:53:80: E501 line too long (85 > 79 characters)
            logger.info(f"Whisper model loaded successfully on {gpu_manager.device}")
                                                                               ^
src/core/voice/whisper_asr.py:54:1: W293 blank line contains whitespace
            
^
src/core/voice/whisper_asr.py:58:1: W293 blank line contains whitespace
    
^
src/core/voice/whisper_asr.py:62:1: W293 blank line contains whitespace
    
^
src/core/voice/whisper_asr.py:67:1: W293 blank line contains whitespace
        
^
src/core/voice/whisper_asr.py:72:1: W293 blank line contains whitespace
            
^
src/core/voice/whisper_asr.py:76:1: W293 blank line contains whitespace
            
^
src/core/voice/whisper_asr.py:82:80: E501 line too long (85 > 79 characters)
                audio_data = np.pad(audio_data, (0, target_length - len(audio_data)))
                                                                               ^
src/core/voice/whisper_asr.py:83:1: W293 blank line contains whitespace
            
^
src/core/voice/whisper_asr.py:92:1: W293 blank line contains whitespace
            
^
src/core/voice/whisper_asr.py:94:1: W293 blank line contains whitespace
            
^
src/core/voice/whisper_asr.py:98:1: W293 blank line contains whitespace
    
^
src/core/voice/whisper_asr.py:104:1: W293 blank line contains whitespace
            
^
src/core/voice/whisper_asr.py:109:32: W291 trailing whitespace
                    audio_data, 
                               ^
src/core/voice/whisper_asr.py:110:41: W291 trailing whitespace
                    orig_sr=sample_rate, 
                                        ^
src/core/voice/whisper_asr.py:113:1: W293 blank line contains whitespace
            
^
src/core/voice/whisper_asr.py:117:1: W293 blank line contains whitespace
            
^
src/core/voice/whisper_asr.py:120:1: W293 blank line contains whitespace
            
^
src/core/voice/whisper_asr.py:124:1: W293 blank line contains whitespace
    
^
src/core/voice/whisper_asr.py:130:1: W293 blank line contains whitespace
        
^
src/core/voice/whisper_asr.py:132:1: W293 blank line contains whitespace
        
^
src/core/voice/whisper_asr.py:139:1: W293 blank line contains whitespace
        
^
src/core/voice/whisper_asr.py:141:1: W293 blank line contains whitespace
    
^
src/core/voice/whisper_asr.py:146:1: W293 blank line contains whitespace
    
^
src/core/voice/whisper_asr.py:150:1: W293 blank line contains whitespace
        
^
src/core/voice/whisper_asr.py:158:1: W293 blank line contains whitespace
                
^
src/core/voice/whisper_asr.py:161:1: W293 blank line contains whitespace
                
^
src/core/voice/whisper_asr.py:166:1: W293 blank line contains whitespace
                    
^
src/core/voice/whisper_asr.py:168:80: E501 line too long (85 > 79 characters)
                    audio_buffer = audio_buffer[self.chunk_size - self.overlap_size:]
                                                                               ^
src/core/voice/whisper_asr.py:169:1: W293 blank line contains whitespace
                    
^
src/core/voice/whisper_asr.py:172:1: W293 blank line contains whitespace
                
^
src/core/voice/whisper_asr.py:175:1: W293 blank line contains whitespace
    
^
src/core/voice/whisper_asr.py:181:1: W293 blank line contains whitespace
            
^
src/core/voice/whisper_asr.py:184:1: W293 blank line contains whitespace
                
^
src/core/voice/whisper_asr.py:187:1: W293 blank line contains whitespace
    
^
src/core/voice/whisper_asr.py:192:1: W293 blank line contains whitespace
    
^
src/core/voice/whisper_asr.py:197:1: W293 blank line contains whitespace
        
^
src/core/voice/whisper_asr.py:207:1: E302 expected 2 blank lines, found 1
class VoiceActivityDetector:
^
src/core/voice/whisper_asr.py:209:1: W293 blank line contains whitespace
    
^
src/core/voice/whisper_asr.py:215:1: W293 blank line contains whitespace
    
^
src/core/voice/whisper_asr.py:220:1: W293 blank line contains whitespace
        
^
src/core/voice/whisper_asr.py:223:1: W293 blank line contains whitespace
    
^
src/core/voice/whisper_asr.py:229:1: W293 blank line contains whitespace
        
^
src/core/voice/whisper_asr.py:232:1: W293 blank line contains whitespace
        
^
src/core/voice/whisper_asr.py:234:80: E501 line too long (81 > 79 characters)
        last_speech = len(above_threshold) - 1 - np.argmax(above_threshold[::-1])
                                                                               ^
src/core/voice/whisper_asr.py:235:1: W293 blank line contains whitespace
        
^
src/core/voice/whisper_asr.py:239:1: E305 expected 2 blank lines after class or function definition, found 1
whisper_asr = WhisperASR()
^
src/core/voice_manager.py:6:1: F401 'asyncio' imported but unused
import asyncio
^
src/core/voice_manager.py:9:1: F401 '.config.config' imported but unused
from .config import config
^
src/core/voice_manager.py:14:1: E302 expected 2 blank lines, found 1
class VoiceManager:
^
src/core/voice_manager.py:19:80: E501 line too long (82 > 79 characters)
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
                                                                               ^
src/core/voice_manager.py:43:80: E501 line too long (100 > 79 characters)
    async def synthesize(self, text: str, output_path: Path = None, voice_name: str = None) -> Path:
                                                                               ^
src/core/voice_manager.py:49:80: E501 line too long (81 > 79 characters)
        audio_array = await self.tts.generate_speech(text, voice_name=voice_name)
                                                                               ^
src/core/voice_manager.py:64:80: E501 line too long (81 > 79 characters)
        """
        Start a real-time voice command loop using streaming ASR.
        Calls on_command(text) for each recognized command.
        Optionally calls on_audio_level(level) and on_partial_transcript(partial)
        for UI feedback.
        """
           
                                                                 
 ^
src/core/voice_manager.py:140:13: F401 'numpy' imported but unused
            import numpy
            ^
src/core/voice_manager.py:141:13: F401 'torch' imported but unused
            import torch
            ^
src/core/voice_manager.py:142:13: F401 'sounddevice' imported but unused
            import sounddevice
            ^
src/core/voice_manager.py:145:80: E501 line too long (91 > 79 characters)
                f"[VoiceManager] Missing dependency: {e}. Please install all requirements."
                                                                               ^
src/core/voice_manager.py:148:1: E305 expected 2 blank lines after class or function definition, found 1
voice_manager = VoiceManager()
^
src/plugins/__init__.py:6:22: W291 trailing whitespace
__version__ = "1.0.0"                      ^
src/plugins/__init__.py:6:23: W292 no newline at end of file
__version__ = "1.0.0"                       ^
src/plugins/extension_api.py:6:1: E302 expected 2 blank lines, found 1
class ExtensionBase:
^
src/plugins/extension_api.py:10:5: E301 expected 1 blank line, found 0
    def run(self, *args, **kwargs):
    ^
src/plugins/extension_api.py:13:1: E302 expected 2 blank lines, found 1
class ExtensionRegistry:
^
src/plugins/extension_api.py:17:5: E301 expected 1 blank line, found 0
    def register(self, name: str, plugin: Type[ExtensionBase]):
    ^
src/plugins/extension_api.py:19:5: E301 expected 1 blank line, found 0
    def get(self, name: str) -> Type[ExtensionBase]:
    ^
src/plugins/extension_api.py:21:5: E301 expected 1 blank line, found 0
    def list(self):
    ^
src/plugins/extension_api.py:24:1: E305 expected 2 blank lines after class or function definition, found 1
registry = ExtensionRegistry()
^
src/plugins/extension_api.py:26:1: E302 expected 2 blank lines, found 1
def discover_plugins(directory: str):
^
src/plugins/extension_api.py:35:80: E501 line too long (105 > 79 characters)
                if isinstance(obj, type) and issubclass(obj, ExtensionBase) and obj is not ExtensionBase:
                                                                               ^
src/plugins/extension_api.py:41:56: W291 trailing whitespace
# 3. Call discover_plugins('plugins') to auto-register.                                                        ^
src/plugins/extension_api.py:41:57: W292 no newline at end of file
# 3. Call discover_plugins('plugins') to auto-register.                                                         ^
src/plugins/sandbox.py:4:1: E302 expected 2 blank lines, found 1
def run_plugin_in_sandbox(plugin_cls, *args, **kwargs):
^
src/plugins/sandbox.py:10:9: F841 local variable 'e' is assigned to but never used
        except Exception as e:
        ^
src/plugins/sandbox.py:13:80: E501 line too long (81 > 79 characters)
    p = multiprocessing.Process(target=target, args=(queue,)+args, kwargs=kwargs)
                                                                               ^
src/plugins/sandbox.py:23:58: W291 trailing whitespace
        raise TimeoutError("Plugin execution timed out.")                                                          ^
src/plugins/sandbox.py:23:59: W292 no newline at end of file
        raise TimeoutError("Plugin execution timed out.")                                                           ^
src/ui/agent_chain_dialog.py:1:80: E501 line too long (97 > 79 characters)
from PySide6.QtWidgets import QDialog, QVBoxLayout, QListWidget, QPushButton, QLabel, QHBoxLayout
                                                                               ^
src/ui/agent_chain_dialog.py:3:1: E302 expected 2 blank lines, found 1
class AgentChainDialog(QDialog):
^
src/ui/agent_chain_dialog.py:27:50: W291 trailing whitespace
        # TODO: Connect buttons to pipeline logic                                                  ^
src/ui/agent_chain_dialog.py:27:51: W292 no newline at end of file
        # TODO: Connect buttons to pipeline logic                                                   ^
src/ui/agent_explain_dialog.py:1:80: E501 line too long (107 > 79 characters)
from PySide6.QtWidgets import QDialog, QVBoxLayout, QLabel, QTextEdit, QComboBox, QPushButton, QApplication
                                                                               ^
src/ui/agent_explain_dialog.py:3:1: E302 expected 2 blank lines, found 1
class AgentExplainDialog(QDialog):
^
src/ui/agent_explain_dialog.py:18:80: E501 line too long (111 > 79 characters)
        self.copy_btn.clicked.connect(lambda: QApplication.clipboard().setText(self.explanation.toPlainText()))
                                                                               ^
src/ui/agent_explain_dialog.py:31:64: W291 trailing whitespace
        # TODO: Connect refresh_button to agent.explain() logic                                                                ^
src/ui/agent_explain_dialog.py:31:65: W292 no newline at end of file
        # TODO: Connect refresh_button to agent.explain() logic                                                                 ^
src/ui/agent_invocation_dialog.py:1:1: F401 'PySide6.QtWidgets.QHBoxLayout' imported but unused
from PySide6.QtWidgets import QDialog, QVBoxLayout, QLabel, QLineEdit, QTextEdit, QPushButton, QFileDialog, QTabWidget, QWidget, QHBoxLayout
^
src/ui/agent_invocation_dialog.py:1:80: E501 line too long (140 > 79 characters)
from PySide6.QtWidgets import QDialog, QVBoxLayout, QLabel, QLineEdit, QTextEdit, QPushButton, QFileDialog, QTabWidget, QWidget, QHBoxLayout
                                                                               ^
src/ui/agent_invocation_dialog.py:3:1: E302 expected 2 blank lines, found 1
class AgentInvocationDialog(QDialog):
^
src/ui/agent_invocation_dialog.py:5:80: E501 line too long (80 > 79 characters)
    """
    Dialog for providing input (image, text, sketch) to an agent for invocation.
    Supports both automated and manual agent invocation.
    """
       
                                                                       ^
src/ui/agent_invocation_dialog.py:33:80: E501 line too long (87 > 79 characters)
        sketch_layout.addWidget(QLabel("Sketch Input: (integrate with DrawingCanvas)"))
                                                                               ^
src/ui/agent_invocation_dialog.py:39:5: E301 expected 1 blank line, found 0
    def browse_image(self):
    ^
src/ui/agent_invocation_dialog.py:40:80: E501 line too long (107 > 79 characters)
        file_path, _ = QFileDialog.getOpenFileName(self, "Select Image", "", "Images (*.png *.jpg *.jpeg)")
                                                                               ^
src/ui/agent_invocation_dialog.py:42:47: W291 trailing whitespace
            self.image_path.setText(file_path)                                               ^
src/ui/agent_invocation_dialog.py:42:48: W292 no newline at end of file
            self.image_path.setText(file_path)                                                ^
src/ui/agent_panel.py:1:80: E501 line too long (119 > 79 characters)
from PySide6.QtWidgets import QWidget, QVBoxLayout, QListWidget, QLabel, QPushButton, QTextEdit, QHBoxLayout, QCheckBox
                                                                               ^
src/ui/agent_panel.py:3:1: E302 expected 2 blank lines, found 1
class AgentPanel(QWidget):
^
src/ui/agent_panel.py:33:80: E501 line too long (87 > 79 characters)
        # TODO: Connect buttons to agent invocation, chaining, and explainability logic
                                                                               ^
src/ui/agent_panel.py:34:80: E501 line too long (86 > 79 characters)
        # TODO: If automation_checkbox is checked, use orchestrator's default pipeline
                                                                               ^
src/ui/agent_panel.py:44:80: E501 line too long (81 > 79 characters)
            self.info_box.setText(str(agent.__doc__ or agent.__class__.__name__))                                                                                ^
src/ui/agent_panel.py:44:82: W291 trailing whitespace
            self.info_box.setText(str(agent.__doc__ or agent.__class__.__name__))                                                                                  ^
src/ui/agent_panel.py:44:83: W292 no newline at end of file
            self.info_box.setText(str(agent.__doc__ or agent.__class__.__name__))                                                                                   ^
src/ui/chat_panel.py:1:80: E501 line too long (115 > 79 characters)
from PyQt6.QtWidgets import QWidget, QVBoxLayout, QHBoxLayout, QLineEdit, QPushButton, QListWidget, QListWidgetItem
                                                                               ^
src/ui/chat_panel.py:5:1: E302 expected 2 blank lines, found 1
class ChatPanel(QWidget):
^
src/ui/chat_panel.py:77:26: E401 multiple imports on one line
                import re, json
                         ^
src/ui/chat_panel.py:87:69: W291 trailing whitespace
        self.add_message("No workflow to branch from.", sender="ai")                                                                     ^
src/ui/chat_panel.py:87:70: W292 no newline at end of file
        self.add_message("No workflow to branch from.", sender="ai")                                                                      ^
src/ui/collab_client.py:4:1: F401 'PyQt5.QtCore.Qt' imported but unused
from PyQt5.QtCore import QObject, pyqtSignal, Qt
^
src/ui/collab_client.py:5:80: E501 line too long (109 > 79 characters)
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QLabel, QLineEdit, QPushButton, QMessageBox, QApplication)
                                                                               ^
src/ui/collab_client.py:10:1: E302 expected 2 blank lines, found 1
class CollabClient(QObject):
^
src/ui/collab_client.py:31:46: E111 indentation is not a multiple of 4
                                             break
                                             ^
src/ui/collab_client.py:31:46: E117 over-indented
                                             break
                                             ^
src/ui/collab_client.py:45:80: E501 line too long (83 > 79 characters)
            await self.ws.send(json.dumps({"type": "context", "context": context}))
                                                                               ^
src/ui/collab_client.py:53:80: E501 line too long (80 > 79 characters)
            await self.ws.send(json.dumps({"type": "presence", "users": users}))
                                                                               ^
src/ui/collab_client.py:60:1: E302 expected 2 blank lines, found 1
class CollabClientPanel(QWidget):
^
src/ui/collab_client.py:72:80: E501 line too long (80 > 79 characters)
        self.ip_input.setPlaceholderText('Relay server IP (e.g., 192.168.1.10)')
                                                                               ^
src/ui/collab_client.py:90:80: E501 line too long (89 > 79 characters)
            QMessageBox.warning(self, 'Input Error', 'Please enter the relay server IP.')
                                                                               ^
src/ui/collab_client.py:98:80: E501 line too long (95 > 79 characters)
        self.collab = AutomergeCollab(doc_id='default', on_remote_change=self.on_remote_change)
                                                                               ^
src/ui/collab_client.py:100:80: E501 line too long (103 > 79 characters)
            threading.Thread(target=self.collab.connect_to_relay, args=(ip, port), daemon=True).start()
                                                                               ^
src/ui/collab_client.py:112:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == '__main__':
^
src/ui/collab_client.py:116:26: W291 trailing whitespace
    sys.exit(app.exec_())                          ^
src/ui/collab_client.py:116:27: W292 no newline at end of file
    sys.exit(app.exec_())                           ^
src/ui/collab_dialog.py:1:80: E501 line too long (119 > 79 characters)
from PySide6.QtWidgets import QDialog, QVBoxLayout, QLineEdit, QPushButton, QListWidget, QTextEdit, QLabel, QHBoxLayout
                                                                               ^
src/ui/collab_dialog.py:3:1: E302 expected 2 blank lines, found 1
class CollaborationDialog(QDialog):
^
src/ui/collab_dialog.py:5:80: E501 line too long (93 > 79 characters)
    """
    Dialog for joining/creating a collaboration session, showing participants, and live chat.
    """
       
                                                                       ^
src/ui/collab_dialog.py:30:63: W291 trailing whitespace
        # TODO: Connect buttons to backend collaboration logic                                                               ^
src/ui/collab_dialog.py:30:64: W292 no newline at end of file
        # TODO: Connect buttons to backend collaboration logic                                                                ^
src/ui/context_manager.py:24:13: W291 trailing whitespace
        pass             ^
src/ui/context_manager.py:24:14: W292 no newline at end of file
        pass              ^
src/ui/context_panel.py:1:1: F401 'PyQt6.QtWidgets.QWidget' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/context_panel.py:1:1: F401 'PyQt6.QtWidgets.QScrollArea' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/context_panel.py:1:1: F401 'PyQt6.QtWidgets.QMenu' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/context_panel.py:1:1: F401 'PyQt6.QtWidgets.QAction' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/context_panel.py:1:1: F401 'PyQt6.QtWidgets.QSizePolicy' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/context_panel.py:2:80: E501 line too long (95 > 79 characters)
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QProgressBar, QTextEdit, QPushButton, QLineEdit,
                                                                               ^
src/ui/context_panel.py:3:80: E501 line too long (106 > 79 characters)
    QListWidget, QListWidgetItem, QFrame, QComboBox, QScrollArea, QMenu, QAction, QFileDialog, QSizePolicy
                                                                               ^
src/ui/context_panel.py:5:1: F401 'PyQt6.QtCore.QTimer' imported but unused
from PyQt6.QtCore import Qt, pyqtSignal, QTimer, QDateTime, QSize
^
src/ui/context_panel.py:5:1: F401 'PyQt6.QtCore.QSize' imported but unused
from PyQt6.QtCore import Qt, pyqtSignal, QTimer, QDateTime, QSize
^
src/ui/context_panel.py:6:1: F401 'PyQt6.QtGui.QPalette' imported but unused
from PyQt6.QtGui import QColor, QPalette, QIcon, QPixmap, QFont, QShortcut, QKeySequence
^
src/ui/context_panel.py:6:1: F401 'PyQt6.QtGui.QFont' imported but unused
from PyQt6.QtGui import QColor, QPalette, QIcon, QPixmap, QFont, QShortcut, QKeySequence
^
src/ui/context_panel.py:6:80: E501 line too long (88 > 79 characters)
from PyQt6.QtGui import QColor, QPalette, QIcon, QPixmap, QFont, QShortcut, QKeySequence
                                                                               ^
src/ui/context_panel.py:11:1: E302 expected 2 blank lines, found 1
class ContextPanel(QFrame):
^
src/ui/context_panel.py:13:80: E501 line too long (82 > 79 characters)
    """
    Advanced Context Panel: modern, interactive, visually rich, and highly usable.
    """
       
                                                                       ^
src/ui/context_panel.py:41:80: E501 line too long (100 > 79 characters)
        self.setStyleSheet("""
            QFrame#ContextPanel {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #232946, stop:1 #121826);
                border-radius: 16px;
                border: 2px solid #6366f1;
                box-shadow: 0 4px 24px rgba(0,0,0,0.18);
            }
        """)
                              
                                 
              ^
src/ui/context_panel.py:54:80: E501 line too long (106 > 79 characters)
        self.avatar.setPixmap(QPixmap(os.path.join(os.path.dirname(__file__), "user.png")).scaled(40, 40))
                                                                               ^
src/ui/context_panel.py:60:80: E501 line too long (84 > 79 characters)
        self.session_time = QLabel(QDateTime.currentDateTime().toString("hh:mm AP"))
                                                                               ^
src/ui/context_panel.py:77:80: E501 line too long (94 > 79 characters)
        self.workspace_switch.addItems(["Default Workspace", "Project Alpha", "Project Beta"])
                                                                               ^
src/ui/context_panel.py:79:80: E501 line too long (83 > 79 characters)
        self.workspace_switch.currentTextChanged.connect(self._on_workspace_switch)
                                                                               ^
src/ui/context_panel.py:86:80: E501 line too long (111 > 79 characters)
        self.agent_icon.setPixmap(QPixmap(os.path.join(os.path.dirname(__file__), "agent.png")).scaled(24, 24))
                                                                               ^
src/ui/context_panel.py:99:80: E501 line too long (81 > 79 characters)
        self.progress_steps = ["Queued", "Running", "Postprocessing", "Complete"]
                                                                               ^
src/ui/context_panel.py:113:80: E501 line too long (161 > 79 characters)
        self.progress_bar.setStyleSheet("QProgressBar {background: #232946; border-radius: 6px;} QProgressBar::chunk {background: #6366f1; border-radius: 6px;}")
                                                                               ^
src/ui/context_panel.py:131:80: E501 line too long (87 > 79 characters)
        self.context_list.setSelectionMode(QListWidget.SelectionMode.ExtendedSelection)
                                                                               ^
src/ui/context_panel.py:161:80: E501 line too long (81 > 79 characters)
        self.copy_btn = QPushButton(QIcon.fromTheme("edit-copy"), "Copy Context")
                                                                               ^
src/ui/context_panel.py:165:80: E501 line too long (84 > 79 characters)
        self.clear_btn = QPushButton(QIcon.fromTheme("edit-clear"), "Clear Context")
                                                                               ^
src/ui/context_panel.py:169:80: E501 line too long (89 > 79 characters)
        self.export_btn = QPushButton(QIcon.fromTheme("document-save"), "Export Context")
                                                                               ^
src/ui/context_panel.py:173:80: E501 line too long (82 > 79 characters)
        self.feedback_btn = QPushButton(QIcon.fromTheme("help-about"), "Feedback")
                                                                               ^
src/ui/context_panel.py:177:80: E501 line too long (90 > 79 characters)
        self.settings_btn = QPushButton(QIcon.fromTheme("preferences-system"), "Settings")
                                                                               ^
src/ui/context_panel.py:205:80: E501 line too long (81 > 79 characters)
        # TODO: Load previous panel state (collapsed, scroll, etc.) from settings
                                                                               ^
src/ui/context_panel.py:246:80: E501 line too long (107 > 79 characters)
                lbl.setStyleSheet("color: #6366f1; font-weight: bold;" if i == step else "color: #94a3b8;")
                                                                               ^
src/ui/context_panel.py:255:80: E501 line too long (114 > 79 characters)
        color = "#22c55e" if state.lower() == "active" else ("#ef4444" if state.lower() == "error" else "#94a3b8")
                                                                               ^
src/ui/context_panel.py:283:80: E501 line too long (107 > 79 characters)
        fname, _ = QFileDialog.getSaveFileName(self, "Export Context", "context.txt", "Text Files (*.txt)")
                                                                               ^
src/ui/context_panel.py:327:80: E501 line too long (103 > 79 characters)
            color = "#ef4444" if level == "error" else ("#f59e0b" if level == "warning" else "#22c55e")
                                                                               ^
src/ui/context_panel.py:328:80: E501 line too long (81 > 79 characters)
            self.notif_label.setText(f"<span style='color:{color}'>{msg}</span>")
                                                                               ^
src/ui/context_panel.py:335:80: E501 line too long (112 > 79 characters)
            self.setStyleSheet("QFrame#ContextPanel { background: #000; color: #fff; border: 2px solid #fff; }")
                                                                               ^
src/ui/context_panel.py:337:80: E501 line too long (231 > 79 characters)
            self.setStyleSheet("QFrame#ContextPanel { background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #232946, stop:1 #121826); border-radius: 16px; border: 2px solid #6366f1; box-shadow: 0 4px 24px rgba(0,0,0,0.18); }")
                                                                               ^
src/ui/context_panel.py:345:80: E501 line too long (80 > 79 characters)
        elif event.key() == Qt.Key_H and event.modifiers() & Qt.ControlModifier:
                                                                               ^
src/ui/context_panel.py:348:41: W291 trailing whitespace
            super().keyPressEvent(event)                                         ^
src/ui/context_panel.py:348:42: W292 no newline at end of file
            super().keyPressEvent(event)                                          ^
src/ui/crash_reporting_dialog.py:1:80: E501 line too long (82 > 79 characters)
from PySide6.QtWidgets import QDialog, QVBoxLayout, QLabel, QCheckBox, QPushButton
                                                                               ^
src/ui/crash_reporting_dialog.py:12:1: F401 'asyncio' imported but unused
import asyncio
^
src/ui/crash_reporting_dialog.py:15:1: E302 expected 2 blank lines, found 1
class CrashReportingDialog(QDialog):
^
src/ui/crash_reporting_dialog.py:20:80: E501 line too long (88 > 79 characters)
        self.label = QLabel("Help us improve AISIS by sending anonymous crash reports.")
                                                                               ^
src/ui/crash_reporting_dialog.py:22:80: E501 line too long (84 > 79 characters)
        self.opt_in_checkbox.setChecked(config.get("crash_reporting.opt_in", False))
                                                                               ^
src/ui/crash_reporting_dialog.py:32:80: E501 line too long (80 > 79 characters)
        self.config["crash_reporting.opt_in"] = self.opt_in_checkbox.isChecked()
                                                                               ^
src/ui/crash_reporting_dialog.py:36:80: E501 line too long (85 > 79 characters)
        Notification("Operation completed successfully!", duration=2000, parent=self)
                                                                               ^
src/ui/crash_reporting_dialog.py:71:12: F821 undefined name 'config'
        if config.get("crash_reporting.opt_in", False):
           ^
src/ui/crash_reporting_dialog.py:72:13: F821 undefined name 'send_crash_report'
            send_crash_report(exc)
            ^
src/ui/crash_reporting_dialog.py:74:13: F821 undefined name 'logger'
            logger.error(str(exc))
            ^
src/ui/crash_reporting_dialog.py:78:13: F841 local variable 'result' is assigned to but never used
            result = run_plugin_in_sandbox(plugin_class, *args, **kwargs)
            ^
src/ui/crash_reporting_dialog.py:88:1: E305 expected 2 blank lines after class or function definition, found 1
setup_logging(log_level="INFO") 
^
src/ui/crash_reporting_dialog.py:88:32: W291 trailing whitespace
setup_logging(log_level="INFO") 
                               ^
src/ui/crash_reporting_dialog.py:90:1: E302 expected 2 blank lines, found 1
def test_agent_explain_dialog(qtbot):
^
src/ui/crash_reporting_dialog.py:95:30: W291 trailing whitespace
    assert dialog.isVisible() 
                             ^
src/ui/crash_reporting_dialog.py:97:1: E302 expected 2 blank lines, found 1
def test_plugin_sandbox():
^
src/ui/crash_reporting_dialog.py:99:5: E306 expected 1 blank line before a nested definition, found 0
    class DummyPlugin:
    ^
src/ui/crash_reporting_dialog.py:101:54: W291 trailing whitespace
    assert run_plugin_in_sandbox(DummyPlugin) == "ok" 
                                                     ^
src/ui/crash_reporting_dialog.py:103:1: E302 expected 2 blank lines, found 1
def test_agent_explain_dialog_shows_doc(qtbot):
^
src/ui/crash_reporting_dialog.py:106:14: F821 undefined name 'AgentExplainDialog'
    dialog = AgentExplainDialog(agent_registry={"Dummy": DummyAgent()})
             ^
src/ui/crash_reporting_dialog.py:109:64: W291 trailing whitespace
    assert "Test agent doc" in dialog.explanation.toPlainText() 
                                                               ^
src/ui/crash_reporting_dialog.py:111:1: E302 expected 2 blank lines, found 1
def test_plugin_manager_loads_plugins():
^
src/ui/crash_reporting_dialog.py:115:40: W291 trailing whitespace
    assert isinstance(pm.plugins, dict) 
                                       ^
src/ui/crash_reporting_dialog.py:117:1: E305 expected 2 blank lines after class or function definition, found 1
import pytest
^
src/ui/crash_reporting_dialog.py:117:1: E402 module level import not at top of file
import pytest
^
src/ui/crash_reporting_dialog.py:118:1: E302 expected 2 blank lines, found 0
@pytest.mark.parametrize("size", [(512, 512), (1024, 1024)])
^
src/ui/crash_reporting_dialog.py:121:9: W291 trailing whitespace
    pass         ^
src/ui/crash_reporting_dialog.py:121:10: W292 no newline at end of file
    pass          ^
src/ui/learning_panel.py:1:80: E501 line too long (96 > 79 characters)
from PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel, QProgressBar, QPushButton, QTextEdit
                                                                               ^
src/ui/learning_panel.py:3:1: E302 expected 2 blank lines, found 1
class LearningPanel(QWidget):
^
src/ui/learning_panel.py:15:80: E501 line too long (81 > 79 characters)
        self.feedback.setPlaceholderText("Enter feedback for the agent/model...")
                                                                               ^
src/ui/learning_panel.py:25:80: E501 line too long (93 > 79 characters)
        # TODO: Connect retrain_btn to retraining logic, update progress/metrics from backend                                                                                ^
src/ui/learning_panel.py:25:94: W291 trailing whitespace
        # TODO: Connect retrain_btn to retraining logic, update progress/metrics from backend                                                                                              ^
src/ui/learning_panel.py:25:95: W292 no newline at end of file
        # TODO: Connect retrain_btn to retraining logic, update progress/metrics from backend                                                                                               ^
src/ui/loading_screen.py:4:1: E302 expected 2 blank lines, found 1
class LoadingScreen(QSplashScreen):
^
src/ui/loading_screen.py:10:77: W291 trailing whitespace
        self.showMessage(message, Qt.AlignBottom | Qt.AlignCenter, Qt.white)                                                                             ^
src/ui/loading_screen.py:10:78: W292 no newline at end of file
        self.showMessage(message, Qt.AlignBottom | Qt.AlignCenter, Qt.white)                                                                              ^
src/ui/main_window.py:54:1: E302 expected 2 blank lines, found 1
class AsyncWorker(QThread):
^
src/ui/main_window.py:58:1: W293 blank line contains whitespace
    
^
src/ui/main_window.py:64:1: W293 blank line contains whitespace
    
^
src/ui/main_window.py:69:80: E501 line too long (82 > 79 characters)
            result = loop.run_until_complete(self.coro(*self.args, **self.kwargs))
                                                                               ^
src/ui/main_window.py:76:1: E302 expected 2 blank lines, found 1
class SettingsDialog(QDialog):
^
src/ui/main_window.py:91:1: E302 expected 2 blank lines, found 1
class DrawingCanvas(QWidget):
^
src/ui/main_window.py:131:1: E302 expected 2 blank lines, found 1
class SolutionsDialog(QDialog):
^
src/ui/main_window.py:132:80: E501 line too long (84 > 79 characters)
    """Dialog to display multiple solutions and critiques, and get user feedback."""
                                                                               ^
src/ui/main_window.py:141:80: E501 line too long (83 > 79 characters)
            text += f"Solution {i+1} (Agent: {sol['agent']}):\n{sol['result']}\n\n"
                                                                               ^
src/ui/main_window.py:155:1: E302 expected 2 blank lines, found 1
class MainWindow(QMainWindow):
^
src/ui/main_window.py:157:1: W293 blank line contains whitespace
    
^
src/ui/main_window.py:159:1: W293 blank line contains whitespace
    
^
src/ui/main_window.py:164:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:168:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:173:80: E501 line too long (90 > 79 characters)
            self.orchestrator.register_agent("image_restoration", ImageRestorationAgent())
                                                                               ^
src/ui/main_window.py:174:80: E501 line too long (86 > 79 characters)
            self.orchestrator.register_agent("style_aesthetic", StyleAestheticAgent())
                                                                               ^
src/ui/main_window.py:176:80: E501 line too long (82 > 79 characters)
            self.orchestrator.register_agent("text_recovery", TextRecoveryAgent())
                                                                               ^
src/ui/main_window.py:177:80: E501 line too long (86 > 79 characters)
            self.orchestrator.register_agent("meta_correction", MetaCorrectionAgent())
                                                                               ^
src/ui/main_window.py:178:80: E501 line too long (88 > 79 characters)
            self.orchestrator.register_agent("semantic_editing", SemanticEditingAgent())
                                                                               ^
src/ui/main_window.py:179:80: E501 line too long (80 > 79 characters)
            self.orchestrator.register_agent("auto_retouch", AutoRetouchAgent())
                                                                               ^
src/ui/main_window.py:181:80: E501 line too long (86 > 79 characters)
            self.orchestrator.register_agent("neural_radiance", NeuralRadianceAgent())
                                                                               ^
src/ui/main_window.py:182:80: E501 line too long (88 > 79 characters)
            self.orchestrator.register_agent("super_resolution", SuperResolutionAgent())
                                                                               ^
src/ui/main_window.py:183:80: E501 line too long (88 > 79 characters)
            self.orchestrator.register_agent("color_correction", ColorCorrectionAgent())
                                                                               ^
src/ui/main_window.py:184:80: E501 line too long (84 > 79 characters)
            self.orchestrator.register_agent("tile_stitching", TileStitchingAgent())
                                                                               ^
src/ui/main_window.py:185:80: E501 line too long (82 > 79 characters)
            self.orchestrator.register_agent("feedback_loop", FeedbackLoopAgent())
                                                                               ^
src/ui/main_window.py:186:80: E501 line too long (100 > 79 characters)
            self.orchestrator.register_agent("perspective_correction", PerspectiveCorrectionAgent())
                                                                               ^
src/ui/main_window.py:187:80: E501 line too long (96 > 79 characters)
            self.orchestrator.register_agent("material_recognition", MaterialRecognitionAgent())
                                                                               ^
src/ui/main_window.py:188:80: E501 line too long (90 > 79 characters)
            self.orchestrator.register_agent("damage_classifier", DamageClassifierAgent())
                                                                               ^
src/ui/main_window.py:189:80: E501 line too long (100 > 79 characters)
            self.orchestrator.register_agent("hyperspectral_recovery", HyperspectralRecoveryAgent())
                                                                               ^
src/ui/main_window.py:190:80: E501 line too long (105 > 79 characters)
            self.orchestrator.register_agent("paint_layer_decomposition", PaintLayerDecompositionAgent())
                                                                               ^
src/ui/main_window.py:191:80: E501 line too long (82 > 79 characters)
            self.orchestrator.register_agent("self_critique", SelfCritiqueAgent())
                                                                               ^
src/ui/main_window.py:192:80: E501 line too long (90 > 79 characters)
            self.orchestrator.register_agent("forensic_analysis", ForensicAnalysisAgent())
                                                                               ^
src/ui/main_window.py:193:80: E501 line too long (105 > 79 characters)
            self.orchestrator.register_agent("context_aware_restoration", ContextAwareRestorationAgent())
                                                                               ^
src/ui/main_window.py:194:80: E501 line too long (96 > 79 characters)
            self.orchestrator.register_agent("adaptive_enhancement", AdaptiveEnhancementAgent())
                                                                               ^
src/ui/main_window.py:195:80: E501 line too long (86 > 79 characters)
            self.orchestrator.register_agent("vision_language", VisionLanguageAgent())
                                                                               ^
src/ui/main_window.py:196:80: E501 line too long (84 > 79 characters)
            self.orchestrator.register_agent("style_transfer", StyleTransferAgent())
                                                                               ^
src/ui/main_window.py:209:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:212:1: W293 blank line contains whitespace
    
^
src/ui/main_window.py:216:80: E501 line too long (95 > 79 characters)
            self.status_bar.showMessage("Warning: CUDA GPU not detected. Running in CPU mode.")
                                                                               ^
src/ui/main_window.py:217:1: W293 blank line contains whitespace
    
^
src/ui/main_window.py:230:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:237:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:240:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:244:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:248:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:253:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:258:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:263:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:268:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:273:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:278:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:290:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:293:80: E501 line too long (82 > 79 characters)
        self.tot_button.setToolTip("Try multiple agents, critique, and pick best")
                                                                               ^
src/ui/main_window.py:297:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:300:80: E501 line too long (107 > 79 characters)
        self.command_input.setPlaceholderText("Type a command (e.g., 'Restore and upscale this image')...")
                                                                               ^
src/ui/main_window.py:313:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:315:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:320:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:325:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:329:80: E501 line too long (130 > 79 characters)
        self.chat_panel.setStyleSheet("QListWidget { background: #181818; color: #e0e0e0; font-size: 15px; border-radius: 8px; }")
                                                                               ^
src/ui/main_window.py:331:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:335:80: E501 line too long (108 > 79 characters)
        self.listening_label.setStyleSheet("QLabel { color: #00ff00; font-weight: bold; font-size: 16px; }")
                                                                               ^
src/ui/main_window.py:338:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:345:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:348:80: E501 line too long (91 > 79 characters)
        self.chat_input.setPlaceholderText("Type a command or question and press Enter...")
                                                                               ^
src/ui/main_window.py:352:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:355:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:362:1: W293 blank line contains whitespace
    
^
src/ui/main_window.py:370:1: W293 blank line contains whitespace
    
^
src/ui/main_window.py:375:1: W293 blank line contains whitespace
    
^
src/ui/main_window.py:381:1: W293 blank line contains whitespace
    
^
src/ui/main_window.py:387:1: W293 blank line contains whitespace
    
^
src/ui/main_window.py:396:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:399:1: W293 blank line contains whitespace
    
^
src/ui/main_window.py:405:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:410:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:417:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:422:1: W293 blank line contains whitespace
    
^
src/ui/main_window.py:427:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:434:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:441:1: W293 blank line contains whitespace
    
^
src/ui/main_window.py:448:1: W293 blank line contains whitespace
    
^
src/ui/main_window.py:457:80: E501 line too long (83 > 79 characters)
        self._voice_thread = threading.Thread(target=self._voice_loop, daemon=True)
                                                                               ^
src/ui/main_window.py:459:1: W293 blank line contains whitespace
    
^
src/ui/main_window.py:469:1: W293 blank line contains whitespace
    
^
src/ui/main_window.py:472:9: E306 expected 1 blank line before a nested definition, found 0
        def on_command(text):
        ^
src/ui/main_window.py:477:9: E306 expected 1 blank line before a nested definition, found 0
        def on_audio_level(level):
        ^
src/ui/main_window.py:479:9: E306 expected 1 blank line before a nested definition, found 0
        def on_partial_transcript(partial):
        ^
src/ui/main_window.py:481:80: E501 line too long (137 > 79 characters)
        voice_manager.start_voice_loop(on_command=on_command, on_audio_level=on_audio_level, on_partial_transcript=on_partial_transcript)
                                                                               ^
src/ui/main_window.py:493:80: E501 line too long (85 > 79 characters)
            # Add a simple spinner/animation (replace with real animation if desired)
                                                                               ^
src/ui/main_window.py:502:80: E501 line too long (116 > 79 characters)
            if self.chat_panel.count() and self.chat_panel.item(self.chat_panel.count()-1).text().startswith("🧑 ["):
                                                                               ^
src/ui/main_window.py:503:80: E501 line too long (94 > 79 characters)
                self.chat_panel.item(self.chat_panel.count()-1).setText(f"🧑 [Live] {partial}")
                                                                               ^
src/ui/main_window.py:514:80: E501 line too long (105 > 79 characters)
        if any(word in text_l for word in ["edit", "make", "change", "dramatic", "vintage", "brighter"]):
                                                                               ^
src/ui/main_window.py:516:80: E501 line too long (84 > 79 characters)
        elif any(word in text_l for word in ["again", "more", "repeat", "another"]):
                                                                               ^
src/ui/main_window.py:518:80: E501 line too long (95 > 79 characters)
        elif any(word in text_l for word in ["hello", "hi", "how are you", "what can you do"]):
                                                                               ^
src/ui/main_window.py:540:80: E501 line too long (86 > 79 characters)
                qimage = QImage(data, image.width, image.height, QImage.Format_RGB888)
                                                                               ^
src/ui/main_window.py:550:80: E501 line too long (86 > 79 characters)
                self._append_chat("AISIS: Edit failed or not recognized.", user=False)
                                                                               ^
src/ui/main_window.py:552:1: W293 blank line contains whitespace
    
^
src/ui/main_window.py:557:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:562:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:564:1: W293 blank line contains whitespace
    
^
src/ui/main_window.py:570:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:575:80: E501 line too long (82 > 79 characters)
            qimage = QImage(data, image.width, image.height, QImage.Format_RGB888)
                                                                               ^
src/ui/main_window.py:577:1: W293 blank line contains whitespace
            
^
src/ui/main_window.py:583:1: W293 blank line contains whitespace
            
^
src/ui/main_window.py:586:1: W293 blank line contains whitespace
    
^
src/ui/main_window.py:593:1: W293 blank line contains whitespace
    
^
src/ui/main_window.py:600:1: W293 blank line contains whitespace
        
^
src/ui/main_window.py:607:1: W293 blank line contains whitespace
    
^
src/ui/main_window.py:618:80: E501 line too long (110 > 79 characters)
            self.chat_panel.item(self.chat_panel.count()-1).setText(f"{icon} {prefix}[{timestamp}] {message}")
                                                                               ^
src/ui/main_window.py:638:80: E501 line too long (105 > 79 characters)
        file_path, _ = QFileDialog.getSaveFileName(self, "Export Chat", "chat.txt", "Text Files (*.txt)")
                                                                               ^
src/ui/main_window.py:663:5: F811 redefinition of unused '_append_chat' from line 483
    def _append_chat(self, message, user=False, thinking=False):
    ^
src/ui/main_window.py:696:13: F541 f-string is missing placeholders
            f"AISIS: Gesture input received. Processing...",
            ^
src/ui/main_window.py:711:80: E501 line too long (98 > 79 characters)
        task = {"instruction": text, "intent": intent, "params": params, "input_mode": input_mode}
                                                                               ^
src/ui/main_window.py:712:80: E501 line too long (86 > 79 characters)
        if intent in ["edit_image", "restore", "style_transfer", "sketch", "gesture"]:
                                                                               ^
src/ui/main_window.py:716:80: E501 line too long (97 > 79 characters)
                self._append_chat("AISIS: Processing your request...", user=False, thinking=True)
                                                                               ^
src/ui/main_window.py:717:80: E501 line too long (83 > 79 characters)
                self.start_operation(lambda: self._process_orchestrator_task(task))
                                                                               ^
src/ui/main_window.py:719:80: E501 line too long (83 > 79 characters)
                self._append_chat("AISIS: Please load an image first.", user=False)
                                                                               ^
src/ui/main_window.py:722:13: E306 expected 1 blank line before a nested definition, found 0
            def llm_response():
            ^
src/ui/main_window.py:727:80: E501 line too long (80 > 79 characters)
            self._append_chat("AISIS: Explaining...", user=False, thinking=True)
                                                                               ^
src/ui/main_window.py:728:13: E306 expected 1 blank line before a nested definition, found 0
            def explain_response():
            ^
src/ui/main_window.py:733:80: E501 line too long (111 > 79 characters)
            self._append_chat("AISIS: Sorry, I didn't understand. Please try a different command.", user=False)
                                                                               ^
src/ui/main_window.py:763:80: E501 line too long (81 > 79 characters)
                    f"Meta-agent critique: {result['meta_critique']}", user=False
                                                                               ^
src/ui/main_window.py:790:80: E501 line too long (84 > 79 characters)
        last_instruction = self._get_last_edit_instruction() or "restore this image"
                                                                               ^
src/ui/main_window.py:792:80: E501 line too long (86 > 79 characters)
        agent_names = list(self.orchestrator.agents.keys())[:3]  # Pick up to 3 agents
                                                                               ^
src/ui/main_window.py:794:80: E501 line too long (81 > 79 characters)
            self._append_chat("AISIS: No agents registered for ToT.", user=False)
                                                                               ^
src/ui/main_window.py:796:80: E501 line too long (99 > 79 characters)
        self._append_chat("AISIS: Running Tree-of-Thought reasoning...", user=False, thinking=True)
                                                                               ^
src/ui/main_window.py:797:9: E306 expected 1 blank line before a nested definition, found 0
        def do_tot():
        ^
src/ui/main_window.py:807:9: E306 expected 1 blank line before a nested definition, found 0
        def on_done(result):
        ^
src/ui/main_window.py:808:80: E501 line too long (83 > 79 characters)
            self._replace_last_chat("AISIS: Tree-of-Thought complete.", user=False)
                                                                               ^
src/ui/main_window.py:809:80: E501 line too long (85 > 79 characters)
            dlg = SolutionsDialog(result['all_solutions'], result['critiques'], self)
                                                                               ^
src/ui/main_window.py:812:80: E501 line too long (80 > 79 characters)
        worker = threading.Thread(target=lambda: on_done(do_tot()), daemon=True)
                                                                               ^
src/ui/main_window.py:818:5: E301 expected 1 blank line, found 0
    def set_progress(self, value, text=None):
    ^
src/ui/main_window.py:820:5: E301 expected 1 blank line, found 0
    def set_state(self, state):
    ^
src/ui/main_window.py:830:80: E501 line too long (83 > 79 characters)
            self.context_panel.log("[WorkflowBuilder] No tasks found for command.")
                                                                               ^
src/ui/main_window.py:842:80: E501 line too long (82 > 79 characters)
                self.context_panel.log(f"[Error] Agent '{agent_name}' not found.")
                                                                               ^
src/ui/main_window.py:845:80: E501 line too long (100 > 79 characters)
                result = agent._process(params) if hasattr(agent, '_process') else agent.run(params)
                                                                               ^
src/ui/main_window.py:852:80: E501 line too long (88 > 79 characters)
        self.auto_pilot_btn.setText(f"Auto-pilot: {'On' if self.auto_pilot else 'Off'}")
                                                                               ^
src/ui/main_window.py:853:80: E501 line too long (94 > 79 characters)
        self.context_panel.log(f"[Auto-pilot] {'Enabled' if self.auto_pilot else 'Disabled'}")
                                                                               ^
src/ui/model_zoo_dialog.py:1:80: E501 line too long (122 > 79 characters)
from PySide6.QtWidgets import QDialog, QVBoxLayout, QListWidget, QLabel, QPushButton, QTextEdit, QHBoxLayout, QProgressBar
                                                                               ^
src/ui/model_zoo_dialog.py:3:1: E302 expected 2 blank lines, found 1
class ModelZooDialog(QDialog):
^
src/ui/model_zoo_dialog.py:38:80: E501 line too long (96 > 79 characters)
        model = next((m for m in self.model_zoo.list_models() if m["name"] == model_name), None)
                                                                               ^
src/ui/model_zoo_dialog.py:40:80: E501 line too long (114 > 79 characters)
            self.details.setText(f"Type: {model['type']}\nVersion: {model['version']}\nStatus: {model['status']}")
                                                                               ^
src/ui/model_zoo_dialog.py:42:58: W291 trailing whitespace
            self.details.setText("No details available.")                                                          ^
src/ui/model_zoo_dialog.py:42:59: W292 no newline at end of file
            self.details.setText("No details available.")                                                           ^
src/ui/modern_interface.py:8:1: F401 'json' imported but unused
import json
^
src/ui/modern_interface.py:9:1: F401 'pathlib.Path' imported but unused
from pathlib import Path
^
src/ui/modern_interface.py:10:1: F401 'typing.Dict' imported but unused
from typing import Dict, Any, Optional, List
^
src/ui/modern_interface.py:10:1: F401 'typing.Any' imported but unused
from typing import Dict, Any, Optional, List
^
src/ui/modern_interface.py:10:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, Optional, List
^
src/ui/modern_interface.py:10:1: F401 'typing.List' imported but unused
from typing import Dict, Any, Optional, List
^
src/ui/modern_interface.py:15:1: F401 'PyQt6.QtWidgets.QGridLayout' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/modern_interface.py:15:1: F401 'PyQt6.QtWidgets.QTabWidget' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/modern_interface.py:15:1: F401 'PyQt6.QtWidgets.QSplitter' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/modern_interface.py:15:1: F401 'PyQt6.QtWidgets.QScrollArea' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/modern_interface.py:15:1: F401 'PyQt6.QtWidgets.QLineEdit' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/modern_interface.py:15:1: F401 'PyQt6.QtWidgets.QTextEdit' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/modern_interface.py:15:1: F401 'PyQt6.QtWidgets.QSlider' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/modern_interface.py:15:1: F401 'PyQt6.QtWidgets.QProgressBar' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/modern_interface.py:15:1: F401 'PyQt6.QtWidgets.QRadioButton' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/modern_interface.py:15:1: F401 'PyQt6.QtWidgets.QTreeWidget' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/modern_interface.py:15:1: F401 'PyQt6.QtWidgets.QTableWidget' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/modern_interface.py:15:1: F401 'PyQt6.QtWidgets.QMenuBar' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/modern_interface.py:15:1: F401 'PyQt6.QtWidgets.QStatusBar' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/modern_interface.py:15:1: F401 'PyQt6.QtWidgets.QToolBar' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/modern_interface.py:15:1: F401 'PyQt6.QtWidgets.QDockWidget' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/modern_interface.py:15:1: F401 'PyQt6.QtWidgets.QFileDialog' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/modern_interface.py:15:1: F401 'PyQt6.QtWidgets.QMessageBox' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/modern_interface.py:15:1: F401 'PyQt6.QtWidgets.QDialog' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/modern_interface.py:15:1: F401 'PyQt6.QtWidgets.QGraphicsScene' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/modern_interface.py:15:1: F401 'PyQt6.QtWidgets.QGraphicsItem' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/modern_interface.py:15:1: F401 'PyQt6.QtWidgets.QGraphicsPixmapItem' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/modern_interface.py:24:1: F811 redefinition of unused 'QPropertyAnimation' from line 24
from PyQt6.QtCore import (
^
src/ui/modern_interface.py:24:1: F401 'PyQt6.QtCore.QTimer' imported but unused
from PyQt6.QtCore import (
^
src/ui/modern_interface.py:24:1: F401 'PyQt6.QtCore.QThread' imported but unused
from PyQt6.QtCore import (
^
src/ui/modern_interface.py:24:1: F401 'PyQt6.QtCore.pyqtSignal' imported but unused
from PyQt6.QtCore import (
^
src/ui/modern_interface.py:24:1: F401 'PyQt6.QtCore.QRect' imported but unused
from PyQt6.QtCore import (
^
src/ui/modern_interface.py:24:1: F401 'PyQt6.QtCore.QPoint' imported but unused
from PyQt6.QtCore import (
^
src/ui/modern_interface.py:24:1: F401 'PyQt6.QtCore.QSize' imported but unused
from PyQt6.QtCore import (
^
src/ui/modern_interface.py:28:1: F401 'PyQt6.QtGui.QPixmap' imported but unused
from PyQt6.QtGui import (
^
src/ui/modern_interface.py:28:1: F401 'PyQt6.QtGui.QIcon' imported but unused
from PyQt6.QtGui import (
^
src/ui/modern_interface.py:28:1: F401 'PyQt6.QtGui.QPainter' imported but unused
from PyQt6.QtGui import (
^
src/ui/modern_interface.py:28:1: F401 'PyQt6.QtGui.QBrush' imported but unused
from PyQt6.QtGui import (
^
src/ui/modern_interface.py:28:1: F401 'PyQt6.QtGui.QPen' imported but unused
from PyQt6.QtGui import (
^
src/ui/modern_interface.py:28:1: F401 'PyQt6.QtGui.QLinearGradient' imported but unused
from PyQt6.QtGui import (
^
src/ui/modern_interface.py:28:1: F401 'PyQt6.QtGui.QRadialGradient' imported but unused
from PyQt6.QtGui import (
^
src/ui/modern_interface.py:28:1: F401 'PyQt6.QtGui.QFontDatabase' imported but unused
from PyQt6.QtGui import (
^
src/ui/modern_interface.py:28:1: F401 'PyQt6.QtGui.QKeySequence' imported but unused
from PyQt6.QtGui import (
^
src/ui/modern_interface.py:28:1: F401 'PyQt6.QtGui.QAction' imported but unused
from PyQt6.QtGui import (
^
src/ui/modern_interface.py:28:1: F401 'PyQt6.QtGui.QDragEnterEvent' imported but unused
from PyQt6.QtGui import (
^
src/ui/modern_interface.py:28:1: F401 'PyQt6.QtGui.QDropEvent' imported but unused
from PyQt6.QtGui import (
^
src/ui/modern_interface.py:62:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:73:42: E261 at least two spaces before inline comment
                text_secondary="#94a3b8", # Slate 400
                                         ^
src/ui/modern_interface.py:86:42: E261 at least two spaces before inline comment
                text_secondary="#475569", # Slate 600
                                         ^
src/ui/modern_interface.py:93:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:99:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:104:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:107:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:109:80: E501 line too long (84 > 79 characters)
        palette.setColor(QPalette.ColorRole.Window, QColor(color_scheme.background))
                                                                               ^
src/ui/modern_interface.py:110:80: E501 line too long (82 > 79 characters)
        palette.setColor(QPalette.ColorRole.WindowText, QColor(color_scheme.text))
                                                                               ^
src/ui/modern_interface.py:112:80: E501 line too long (91 > 79 characters)
        palette.setColor(QPalette.ColorRole.AlternateBase, QColor(color_scheme.background))
                                                                               ^
src/ui/modern_interface.py:113:80: E501 line too long (86 > 79 characters)
        palette.setColor(QPalette.ColorRole.ToolTipBase, QColor(color_scheme.surface))
                                                                               ^
src/ui/modern_interface.py:114:80: E501 line too long (83 > 79 characters)
        palette.setColor(QPalette.ColorRole.ToolTipText, QColor(color_scheme.text))
                                                                               ^
src/ui/modern_interface.py:116:80: E501 line too long (81 > 79 characters)
        palette.setColor(QPalette.ColorRole.Button, QColor(color_scheme.surface))
                                                                               ^
src/ui/modern_interface.py:117:80: E501 line too long (82 > 79 characters)
        palette.setColor(QPalette.ColorRole.ButtonText, QColor(color_scheme.text))
                                                                               ^
src/ui/modern_interface.py:118:80: E501 line too long (84 > 79 characters)
        palette.setColor(QPalette.ColorRole.BrightText, QColor(color_scheme.accent))
                                                                               ^
src/ui/modern_interface.py:120:80: E501 line too long (84 > 79 characters)
        palette.setColor(QPalette.ColorRole.Highlight, QColor(color_scheme.primary))
                                                                               ^
src/ui/modern_interface.py:121:80: E501 line too long (87 > 79 characters)
        palette.setColor(QPalette.ColorRole.HighlightedText, QColor(color_scheme.text))
                                                                               ^
src/ui/modern_interface.py:122:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:124:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:132:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:137:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:142:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:168:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:174:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:179:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:188:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:192:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:197:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:211:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:216:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:222:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:227:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:237:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:243:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:245:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:249:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:254:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:283:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:290:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:295:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:299:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:304:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:308:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:312:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:315:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:318:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:324:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:328:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:332:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:336:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:341:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:344:80: E501 line too long (81 > 79 characters)
        header.setStyleSheet("font-size: 24px; font-weight: bold; margin: 20px;")
                                                                               ^
src/ui/modern_interface.py:346:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:349:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:356:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:360:1: W293 blank line contains whitespace
            
^
src/ui/modern_interface.py:364:1: W293 blank line contains whitespace
            
^
src/ui/modern_interface.py:366:80: E501 line too long (92 > 79 characters)
            value_label.setStyleSheet("font-size: 24px; font-weight: bold; color: #6366f1;")
                                                                               ^
src/ui/modern_interface.py:368:1: W293 blank line contains whitespace
            
^
src/ui/modern_interface.py:372:1: W293 blank line contains whitespace
            
^
src/ui/modern_interface.py:374:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:377:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:379:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:384:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:387:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:396:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:400:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:403:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:406:80: E501 line too long (85 > 79 characters)
        canvas.setStyleSheet("background-color: #1e293b; border: 1px solid #334155;")
                                                                               ^
src/ui/modern_interface.py:408:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:410:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:415:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:418:80: E501 line too long (81 > 79 characters)
        header.setStyleSheet("font-size: 24px; font-weight: bold; margin: 20px;")
                                                                               ^
src/ui/modern_interface.py:420:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:425:38: W291 trailing whitespace
            "🎨 Style Transfer Agent", 
                                     ^
src/ui/modern_interface.py:430:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:433:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:435:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:437:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:442:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:445:80: E501 line too long (81 > 79 characters)
        header.setStyleSheet("font-size: 24px; font-weight: bold; margin: 20px;")
                                                                               ^
src/ui/modern_interface.py:447:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:451:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:455:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:459:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:461:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:465:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:469:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:471:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:474:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:476:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:480:80: E501 line too long (99 > 79 characters)
            btn.clicked.connect(lambda checked, index=i: self.content_stack.setCurrentIndex(index))
                                                                               ^
src/ui/modern_interface.py:481:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:484:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:488:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:493:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:498:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:500:1: W293 blank line contains whitespace
        
^
src/ui/modern_interface.py:502:80: E501 line too long (81 > 79 characters)
        btn_text = "🌙 Dark Mode" if new_theme == Theme.LIGHT else "☀️ Light Mode"
                                                                               ^
src/ui/modern_interface.py:509:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:514:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:518:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:525:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:529:1: W293 blank line contains whitespace
    
^
src/ui/modern_interface.py:535:27: W291 trailing whitespace
    run_modern_interface()                           ^
src/ui/modern_interface.py:535:28: W292 no newline at end of file
    run_modern_interface()                            ^
src/ui/notifications.py:4:1: E302 expected 2 blank lines, found 1
class Notification(QWidget):
^
src/ui/notifications.py:13:20: W291 trailing whitespace
        self.show()                    ^
src/ui/notifications.py:13:21: W292 no newline at end of file
        self.show()                     ^
src/ui/onboarding_dialog.py:3:1: E302 expected 2 blank lines, found 1
class OnboardingDialog(QDialog):
^
src/ui/onboarding_dialog.py:12:68: W291 trailing whitespace
        # TODO: Add steps for config, model download, UI tour, etc.                                                                    ^
src/ui/onboarding_dialog.py:12:69: W292 no newline at end of file
        # TODO: Add steps for config, model download, UI tour, etc.                                                                     ^
src/ui/plugin_manager_dialog.py:1:80: E501 line too long (89 > 79 characters)
from PySide6.QtWidgets import QDialog, QVBoxLayout, QListWidget, QPushButton, QHBoxLayout
                                                                               ^
src/ui/plugin_manager_dialog.py:3:1: E302 expected 2 blank lines, found 1
class PluginManagerDialog(QDialog):
^
src/ui/plugin_manager_dialog.py:17:53: W291 trailing whitespace
        # TODO: Populate and connect logic as needed                                                     ^
src/ui/plugin_manager_dialog.py:17:54: W292 no newline at end of file
        # TODO: Populate and connect logic as needed                                                      ^
src/ui/security_dialog.py:6:1: F401 'PyQt6.QtWidgets.QWidget' imported but unused
from PyQt6.QtWidgets import (
^
src/ui/security_dialog.py:12:1: F401 'PyQt6.QtCore.Qt' imported but unused
from PyQt6.QtCore import Qt
^
src/ui/security_dialog.py:13:1: F401 'typing.Dict' imported but unused
from typing import Optional, Dict, Any
^
src/ui/security_dialog.py:13:1: F401 'typing.Any' imported but unused
from typing import Optional, Dict, Any
^
src/ui/security_dialog.py:17:1: E302 expected 2 blank lines, found 1
class LoginDialog(QDialog):
^
src/ui/security_dialog.py:110:1: E302 expected 2 blank lines, found 1
class APIKeyDialog(QDialog):
^
src/ui/security_dialog.py:127:80: E501 line too long (81 > 79 characters)
        self.api_key_table.setHorizontalHeaderLabels(["Service", "Key", "Added"])
                                                                               ^
src/ui/security_dialog.py:162:80: E501 line too long (82 > 79 characters)
            self.api_key_table.setItem(row, 2, QTableWidgetItem(data["added_at"]))
                                                                               ^
src/ui/security_dialog.py:219:1: E302 expected 2 blank lines, found 1
class SecurityDialog(QDialog):
^
src/ui/security_dialog.py:235:1: W293 blank line contains whitespace
        
^
src/ui/security_dialog.py:254:20: W291 trailing whitespace
        return None                    ^
src/ui/security_dialog.py:254:21: W292 no newline at end of file
        return None                     ^
src/ui/settings_panel.py:1:80: E501 line too long (145 > 79 characters)
from PySide6.QtWidgets import QDialog, QVBoxLayout, QTabWidget, QWidget, QFormLayout, QLineEdit, QCheckBox, QPushButton, QFileDialog, QMessageBox
                                                                               ^
src/ui/settings_panel.py:4:1: E302 expected 2 blank lines, found 1
class SettingsDialog(QDialog):
^
src/ui/settings_panel.py:13:80: E501 line too long (85 > 79 characters)
        self.model_dir_box = QLineEdit(str(config.get("paths.models_dir", "models")))
                                                                               ^
src/ui/settings_panel.py:38:80: E501 line too long (110 > 79 characters)
        path, _ = QFileDialog.getSaveFileName(self, "Export Settings", "settings.json", "JSON Files (*.json)")
                                                                               ^
src/ui/settings_panel.py:43:80: E501 line too long (90 > 79 characters)
                QMessageBox.information(self, "Export", "Settings exported successfully.")
                                                                               ^
src/ui/settings_panel.py:48:80: E501 line too long (97 > 79 characters)
        path, _ = QFileDialog.getOpenFileName(self, "Import Settings", "", "JSON Files (*.json)")
                                                                               ^
src/ui/settings_panel.py:52:21: F841 local variable 'imported' is assigned to but never used
                    imported = json.load(f)
                    ^
src/ui/settings_panel.py:54:80: E501 line too long (101 > 79 characters)
                QMessageBox.information(self, "Import", "Settings imported. Please restart the app.")
                                                                               ^
src/ui/settings_panel.py:57:56: W291 trailing whitespace
        # TODO: Connect save_btn to config update logic                                                        ^
src/ui/settings_panel.py:57:57: W292 no newline at end of file
        # TODO: Connect save_btn to config update logic                                                         ^
src/ui/theme_manager.py:4:1: E302 expected 2 blank lines, found 1
class ThemeManager:
^
src/ui/theme_manager.py:24:35: W291 trailing whitespace
        app.setPalette(QPalette())                                   ^
src/ui/theme_manager.py:24:36: W292 no newline at end of file
        app.setPalette(QPalette())                                    ^
src/ui/tour_dialog.py:3:1: E302 expected 2 blank lines, found 1
class TourDialog(QDialog):
^
src/ui/tour_dialog.py:12:80: E501 line too long (81 > 79 characters)
            "The chat panel lets you interact with the AI and refine workflows.",
                                                                               ^
src/ui/tour_dialog.py:30:26: W291 trailing whitespace
            self.accept()                          ^
src/ui/tour_dialog.py:30:27: W292 no newline at end of file
            self.accept()                           ^
tests/fixtures/sample_plugin.py:3:35: W291 trailing whitespace
        return "sample plugin ran"                                   ^
tests/fixtures/sample_plugin.py:3:36: W292 no newline at end of file
        return "sample plugin ran"                                    ^
tests/test_agents.py:8:1: F401 'torch' imported but unused
import torch
^
tests/test_agents.py:24:1: E302 expected 2 blank lines, found 1
@pytest.fixture
^
tests/test_agents.py:31:1: E302 expected 2 blank lines, found 1
@pytest.fixture
^
tests/test_agents.py:38:1: E302 expected 2 blank lines, found 1
@pytest.fixture
^
tests/test_agents.py:45:1: E302 expected 2 blank lines, found 1
@pytest.fixture
^
tests/test_agents.py:52:1: E302 expected 2 blank lines, found 1
@pytest.fixture
^
tests/test_agents.py:59:1: E302 expected 2 blank lines, found 1
def test_base_agent_initialization():
^
tests/test_agents.py:64:1: W293 blank line contains whitespace
        
^
tests/test_agents.py:67:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:69:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:75:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_agents.py:81:49: E712 comparison to True should be 'if cond is True:' or 'if cond:'
    assert orchestrator.self_correction_enabled == True
                                                ^
tests/test_agents.py:83:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_agents.py:84:80: E501 line too long (80 > 79 characters)
async def test_orchestrator_agent_registration(orchestrator, restoration_agent):
                                                                               ^
tests/test_agents.py:87:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:91:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_agents.py:96:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:98:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:103:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_agents.py:107:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:109:80: E501 line too long (81 > 79 characters)
    analysis = await orchestrator._tree_of_thought_analysis(task_description, {})
                                                                               ^
tests/test_agents.py:110:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:116:1: E302 expected 2 blank lines, found 1
@pytest.mark.skip(reason="ImageRestorationAgent not implemented yet")
^
tests/test_agents.py:124:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:126:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:133:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_agents.py:134:80: E501 line too long (80 > 79 characters)
async def test_restoration_agent_auto_analysis(restoration_agent, sample_image):
                                                                               ^
tests/test_agents.py:138:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:143:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_agents.py:151:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:153:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:160:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_agents.py:165:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:171:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:179:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_agents.py:187:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:189:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:196:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_agents.py:197:80: E501 line too long (80 > 79 characters)
async def test_semantic_agent_instruction_parsing(semantic_agent, sample_image):
                                                                               ^
tests/test_agents.py:200:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:207:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:209:80: E501 line too long (83 > 79 characters)
        parsed = await semantic_agent._parse_instruction(instruction, image_tensor)
                                                                               ^
tests/test_agents.py:210:1: W293 blank line contains whitespace
        
^
tests/test_agents.py:217:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_agents.py:222:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:226:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:232:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_agents.py:233:80: E501 line too long (118 > 79 characters)
async def test_orchestrator_full_workflow(orchestrator, restoration_agent, style_agent, semantic_agent, sample_image):
                                                                               ^
tests/test_agents.py:239:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:246:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:248:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:254:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_agents.py:258:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:264:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_agents.py:269:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:273:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:278:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_agents.py:286:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:288:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:292:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_agents.py:300:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:302:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:303:80: E501 line too long (83 > 79 characters)
    corrected_results = await orchestrator._self_correct_results(results, analysis)
                                                                               ^
tests/test_agents.py:304:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:307:48: E712 comparison to True should be 'if cond is True:' or 'if cond:'
    assert corrected_results["self_corrected"] == True
                                               ^
tests/test_agents.py:309:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_agents.py:315:1: W293 blank line contains whitespace
        
^
tests/test_agents.py:320:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:323:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:326:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:331:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:334:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:338:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_agents.py:343:80: E501 line too long (81 > 79 characters)
        Image.fromarray(np.random.randint(0, 255, (128, 128, 3), dtype=np.uint8))
                                                                               ^
tests/test_agents.py:346:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:349:80: E501 line too long (80 > 79 characters)
        restoration_agent.process({"image": images[0], "task_type": "denoise"}),
                                                                               ^
tests/test_agents.py:352:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:354:1: W293 blank line contains whitespace
    
^
tests/test_agents.py:359:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_agents.py:364:80: E501 line too long (82 > 79 characters)
    result = await agent.process({'image': dummy_image, 'style': 'impressionist'})
                                                                               ^
tests/test_agents.py:369:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_agents.py:375:80: E501 line too long (96 > 79 characters)
    result = asyncio.run(agent.process({'image': dummy_image, 'prompt': 'Describe this image'}))
                                                                               ^
tests/test_agents.py:379:1: E302 expected 2 blank lines, found 1
class MockAgent(BaseAgent):
^
tests/test_agents.py:399:1: E302 expected 2 blank lines, found 1
def run_async(coro):
^
tests/test_agents.py:402:1: E302 expected 2 blank lines, found 1
def test_agent_registration_and_message_passing():
^
tests/test_agents.py:413:1: E302 expected 2 blank lines, found 1
def test_delegate_task_sequence():
^
tests/test_agents.py:424:1: E302 expected 2 blank lines, found 1
def test_feedback_loop():
^
tests/test_agents.py:429:1: E302 expected 2 blank lines, found 1
def test_meta_agent_critique_and_negotiation(monkeypatch):
^
tests/test_agents.py:433:5: E306 expected 1 blank line before a nested definition, found 0
    class DummyLLMMetaAgent(LLMMetaAgent):
    ^
tests/test_agents.py:450:1: E302 expected 2 blank lines, found 1
class DummyAgent:
^
tests/test_agents.py:464:34: E111 indentation is not a multiple of 4
                                 return {"status": "IDLE", "queue_size": 0}
                                 ^
tests/test_agents.py:464:34: E117 over-indented
                                 return {"status": "IDLE", "queue_size": 0}
                                 ^
tests/test_agents.py:466:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_agents.py:475:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_agents.py:481:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_agents.py:487:1: E302 expected 2 blank lines, found 1
@pytest.mark.skip(reason="Not implemented yet")
^
tests/test_agents.py:491:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
tests/test_context_panel.py:7:1: E302 expected 2 blank lines, found 1
@pytest.fixture(scope="module")
^
tests/test_context_panel.py:12:1: E302 expected 2 blank lines, found 1
@pytest.fixture
^
tests/test_context_panel.py:18:1: E302 expected 2 blank lines, found 1
def test_context_update(panel):
^
tests/test_context_panel.py:24:1: E302 expected 2 blank lines, found 1
def test_progress(panel):
^
tests/test_context_panel.py:28:1: E302 expected 2 blank lines, found 1
def test_state(panel):
^
tests/test_context_panel.py:33:1: E302 expected 2 blank lines, found 1
def test_log(panel):
^
tests/test_context_panel.py:37:1: E302 expected 2 blank lines, found 1
def test_pin_context(panel):
^
tests/test_context_panel.py:44:1: E302 expected 2 blank lines, found 1
def test_export_context(tmp_path, panel):
^
tests/test_context_panel.py:51:1: E302 expected 2 blank lines, found 1
def test_collapse(panel):
^
tests/test_context_panel.py:55:29: W291 trailing whitespace
    assert panel.isVisible()                             ^
tests/test_context_panel.py:55:30: W292 no newline at end of file
    assert panel.isVisible()                              ^
tests/test_core.py:5:1: F401 'asyncio' imported but unused
import asyncio
^
tests/test_core.py:8:1: F401 'pathlib.Path' imported but unused
from pathlib import Path
^
tests/test_core.py:15:1: E302 expected 2 blank lines, found 1
@pytest.fixture
^
tests/test_core.py:22:1: E302 expected 2 blank lines, found 1
def test_config_loading():
^
tests/test_core.py:29:1: E302 expected 2 blank lines, found 1
def test_gpu_manager():
^
tests/test_core.py:34:1: W293 blank line contains whitespace
    
^
tests/test_core.py:40:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_core.py:45:1: W293 blank line contains whitespace
    
^
tests/test_core.py:50:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_core.py:54:1: W293 blank line contains whitespace
    
^
tests/test_core.py:59:1: W293 blank line contains whitespace
    
^
tests/test_core.py:65:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_core.py:69:1: W293 blank line contains whitespace
    
^
tests/test_core.py:76:1: E302 expected 2 blank lines, found 1
def test_model_loader():
^
tests/test_core.py:79:1: W293 blank line contains whitespace
    
^
tests/test_core.py:85:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_core.py:91:35: F821 undefined name 'numpy'
    assert isinstance(audio_data, numpy.ndarray)
                                  ^
tests/test_core.py:93:1: W293 blank line contains whitespace
    
^
tests/test_core_config.py:4:1: E302 expected 2 blank lines, found 1
class TestCoreConfig(unittest.TestCase):
^
tests/test_core_config.py:15:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == '__main__':
^
tests/test_core_config.py:16:20: W291 trailing whitespace
    unittest.main()                    ^
tests/test_core_config.py:16:21: W292 no newline at end of file
    unittest.main()                     ^
tests/test_integration.py:8:1: F401 'torch' imported but unused
import torch
^
tests/test_integration.py:11:1: F401 'pathlib.Path' imported but unused
from pathlib import Path
^
tests/test_integration.py:13:1: F401 'src.core.config.config' imported but unused
from src.core.config import config
^
tests/test_integration.py:25:1: E302 expected 2 blank lines, found 1
@pytest.fixture
^
tests/test_integration.py:30:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:34:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:38:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:42:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:46:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:54:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:59:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_integration.py:64:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:67:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:70:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:77:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:82:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_integration.py:86:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:89:80: E501 line too long (99 > 79 characters)
        "description": "enhance the image quality, apply vintage style, and remove the background",
                                                                               ^
tests/test_integration.py:97:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:100:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:103:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:111:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_integration.py:115:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:124:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:130:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:134:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:139:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_integration.py:145:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:150:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:154:1: W293 blank line contains whitespace
        
^
tests/test_integration.py:156:47: F821 undefined name 'Qt'
        qtbot.mouseClick(window.voice_button, Qt.LeftButton)
                                              ^
tests/test_integration.py:159:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_integration.py:164:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:168:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:175:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:177:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:187:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:191:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_integration.py:195:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:202:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:205:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:209:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:214:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:216:80: E501 line too long (89 > 79 characters)
    assert len(new_orchestrator.registered_agents) == len(orchestrator.registered_agents)
                                                                               ^
tests/test_integration.py:219:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_integration.py:223:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:227:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:234:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:237:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:241:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:244:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:248:1: W293 blank line contains whitespace
    
^
tests/test_integration.py:253:1: E302 expected 2 blank lines, found 1
@pytest.mark.parametrize("theme", ["dark", "light"])
^
tests/test_integration.py:255:5: F811 redefinition of unused 'config' from line 13
    config = {"ui.theme": theme, "paths.models_dir": "models", "gpu.use_cuda": True}
    ^
tests/test_integration.py:255:80: E501 line too long (84 > 79 characters)
    config = {"ui.theme": theme, "paths.models_dir": "models", "gpu.use_cuda": True}
                                                                               ^
tests/test_integration.py:262:1: E302 expected 2 blank lines, found 1
def test_plugin_agent_integration():
^
tests/test_integration.py:273:1: E302 expected 2 blank lines, found 1
def test_agent_explain_dialog_integration(qtbot):
^
tests/test_integration.py:281:1: E302 expected 2 blank lines, found 1
def create_test_image(size=(256, 256)):
^
tests/test_integration.py:287:1: E302 expected 2 blank lines, found 1
def create_large_test_image():
^
tests/test_integration.py:291:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
tests/test_performance.py:13:1: F401 'os' imported but unused
import os
^
tests/test_performance.py:14:1: F401 'pathlib.Path' imported but unused
from pathlib import Path
^
tests/test_performance.py:16:1: F401 'src.core.config.config' imported but unused
from src.core.config import config
^
tests/test_performance.py:23:1: E302 expected 2 blank lines, found 1
@pytest.fixture
^
tests/test_performance.py:34:1: W293 blank line contains whitespace
        
^
tests/test_performance.py:39:1: W293 blank line contains whitespace
        
^
tests/test_performance.py:43:1: W293 blank line contains whitespace
            
^
tests/test_performance.py:46:1: W293 blank line contains whitespace
            
^
tests/test_performance.py:48:1: W293 blank line contains whitespace
        
^
tests/test_performance.py:51:1: W293 blank line contains whitespace
            
^
tests/test_performance.py:57:80: E501 line too long (82 > 79 characters)
                "avg_gpu_usage": np.mean(self.gpu_usage) if self.gpu_usage else 0,
                                                                               ^
tests/test_performance.py:60:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:63:1: E302 expected 2 blank lines, found 1
@pytest.fixture
^
tests/test_performance.py:68:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:74:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:78:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:84:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_performance.py:85:80: E501 line too long (83 > 79 characters)
async def test_concurrent_processing_scalability(test_system, performance_metrics):
                                                                               ^
tests/test_performance.py:89:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:93:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:103:1: W293 blank line contains whitespace
        
^
tests/test_performance.py:109:1: W293 blank line contains whitespace
        
^
tests/test_performance.py:110:80: E501 line too long (80 > 79 characters)
        success_count = sum(1 for r in task_results if r["status"] == "success")
                                                                               ^
tests/test_performance.py:111:1: W293 blank line contains whitespace
        
^
tests/test_performance.py:117:1: W293 blank line contains whitespace
        
^
tests/test_performance.py:119:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:122:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:126:80: E501 line too long (82 > 79 characters)
    assert all(tps > 0.5 for tps in tasks_per_second)  # At least 0.5 tasks/second
                                                                               ^
tests/test_performance.py:127:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:132:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_performance.py:137:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:140:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:144:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:148:1: W293 blank line contains whitespace
        
^
tests/test_performance.py:149:9: F841 local variable 'result' is assigned to but never used
        result = await orchestrator.process({
        ^
tests/test_performance.py:154:1: W293 blank line contains whitespace
        
^
tests/test_performance.py:157:1: W293 blank line contains whitespace
        
^
tests/test_performance.py:162:1: W293 blank line contains whitespace
        
^
tests/test_performance.py:166:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:168:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:175:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_performance.py:180:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:183:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:186:1: W293 blank line contains whitespace
        
^
tests/test_performance.py:195:1: W293 blank line contains whitespace
        
^
tests/test_performance.py:202:1: W293 blank line contains whitespace
        
^
tests/test_performance.py:204:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:206:5: F841 local variable 'metrics' is assigned to but never used
    metrics = performance_metrics.get_results()
    ^
tests/test_performance.py:207:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:209:80: E501 line too long (87 > 79 characters)
    success_rate = sum(1 for r in results if r["status"] == "success") / num_iterations
                                                                               ^
tests/test_performance.py:211:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:217:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_performance.py:222:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:224:80: E501 line too long (90 > 79 characters)
    initial_gpu_memory = torch.cuda.memory_allocated() if torch.cuda.is_available() else 0
                                                                               ^
tests/test_performance.py:225:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:228:9: F841 local variable 'result' is assigned to but never used
        result = await orchestrator.process({
        ^
tests/test_performance.py:233:1: W293 blank line contains whitespace
        
^
tests/test_performance.py:237:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:243:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:245:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:247:80: E501 line too long (88 > 79 characters)
    final_gpu_memory = torch.cuda.memory_allocated() if torch.cuda.is_available() else 0
                                                                               ^
tests/test_performance.py:248:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:252:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:256:80: E501 line too long (87 > 79 characters)
        assert gpu_memory_diff < 50 * 1024 * 1024  # Less than 50MB GPU memory increase
                                                                               ^
tests/test_performance.py:258:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_performance.py:263:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:267:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:279:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:281:5: F841 local variable 'results' is assigned to but never used
    results = await asyncio.gather(
    ^
tests/test_performance.py:284:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:287:1: W293 blank line contains whitespace
    
^
tests/test_performance.py:291:80: E501 line too long (80 > 79 characters)
        assert metrics["avg_gpu_usage"] > 0  # Should utilize GPU when available
                                                                               ^
tests/test_performance.py:293:1: E302 expected 2 blank lines, found 1
def create_test_image(size=(512, 512)):
^
tests/test_performance.py:299:1: E302 expected 2 blank lines, found 1
class DummyAgent:
^
tests/test_performance.py:302:5: E301 expected 1 blank line, found 0
    async def _process(self, task):
    ^
tests/test_performance.py:306:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_performance.py:316:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_performance.py:325:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
tests/test_plugins.py:3:1: E302 expected 2 blank lines, found 1
class DummyPlugin:
^
tests/test_plugins.py:7:1: E302 expected 2 blank lines, found 1
class ErrorPlugin:
^
tests/test_plugins.py:11:1: E302 expected 2 blank lines, found 1
def test_plugin_sandbox_success():
^
tests/test_plugins.py:14:1: E302 expected 2 blank lines, found 1
def test_plugin_sandbox_error():
^
tests/test_plugins.py:20:46: W291 trailing whitespace
        assert False, "Expected RuntimeError"                                              ^
tests/test_plugins.py:20:47: W292 no newline at end of file
        assert False, "Expected RuntimeError"                                               ^
tests/test_super_resolution_agent.py:12:1: E302 expected 2 blank lines, found 1
def get_test_image():
^
tests/test_super_resolution_agent.py:20:1: E302 expected 2 blank lines, found 1
async def run_model(model_name, input_path, output_path):
^
tests/test_super_resolution_agent.py:28:80: E501 line too long (94 > 79 characters)
    print(f"Model: {model_name}, Status: {result['status']}, Output: {result['output_path']}")
                                                                               ^
tests/test_super_resolution_agent.py:30:1: E302 expected 2 blank lines, found 1
def main():
^
tests/test_super_resolution_agent.py:31:80: E501 line too long (94 > 79 characters)
    parser = argparse.ArgumentParser(description='Test SuperResolutionAgent with all models.')
                                                                               ^
tests/test_super_resolution_agent.py:32:80: E501 line too long (91 > 79 characters)
    parser.add_argument('--model', type=str, default='all', help='Model to run (or "all")')
                                                                               ^
tests/test_super_resolution_agent.py:33:80: E501 line too long (83 > 79 characters)
    parser.add_argument('--input', type=str, default=None, help='Input image path')
                                                                               ^
tests/test_super_resolution_agent.py:34:80: E501 line too long (102 > 79 characters)
    parser.add_argument('--output_dir', type=str, default='outputs', help='Directory to save outputs')
                                                                               ^
tests/test_super_resolution_agent.py:54:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == '__main__':
^
tests/test_super_resolution_agent.py:55:11: W291 trailing whitespace
    main()           ^
tests/test_super_resolution_agent.py:55:12: W292 no newline at end of file
    main()            ^
tests/test_ui.py:3:80: E501 line too long (86 > 79 characters)
"""
UI component tests for AISIS
                         Tests the Qt-based user interface components and interactions
"""
   
                            
                                              ^
tests/test_ui.py:23:1: E302 expected 2 blank lines, found 1
@pytest.fixture
^
tests/test_ui.py:28:1: E302 expected 2 blank lines, found 1
@pytest.fixture
^
tests/test_ui.py:35:1: E302 expected 2 blank lines, found 1
def test_main_window_creation(main_window):
^
tests/test_ui.py:41:1: E302 expected 2 blank lines, found 1
def test_voice_control_button(main_window, qtbot):
^
tests/test_ui.py:45:1: W293 blank line contains whitespace
    
^
tests/test_ui.py:50:1: W293 blank line contains whitespace
    
^
tests/test_ui.py:56:1: E302 expected 2 blank lines, found 1
def test_toolbar_actions(main_window, qtbot):
^
tests/test_ui.py:58:37: F821 undefined name 'QToolBar'
    toolbar = main_window.findChild(QToolBar)
                                    ^
tests/test_ui.py:60:1: W293 blank line contains whitespace
    
^
tests/test_ui.py:64:1: W293 blank line contains whitespace
    
^
tests/test_ui.py:73:1: E302 expected 2 blank lines, found 1
def test_status_bar(main_window):
^
tests/test_ui.py:77:1: W293 blank line contains whitespace
    
^
tests/test_ui.py:83:1: E302 expected 2 blank lines, found 1
def test_theme_settings(main_window):
^
tests/test_ui.py:86:1: W293 blank line contains whitespace
    
^
tests/test_ui.py:93:1: E302 expected 2 blank lines, found 1
def test_window_close(main_window, qtbot):
^
tests/test_ui.py:98:1: W293 blank line contains whitespace
    
^
tests/test_ui.py:101:1: W293 blank line contains whitespace
    
^
tests/test_ui.py:105:1: E302 expected 2 blank lines, found 1
def test_keyboard_shortcuts(main_window, qtbot):
^
tests/test_ui.py:108:80: E501 line too long (80 > 79 characters)
    with qtbot.waitSignal(main_window.statusBar().messageChanged, timeout=1000):
                                                                               ^
tests/test_ui.py:110:1: W293 blank line contains whitespace
    
^
tests/test_ui.py:112:80: E501 line too long (80 > 79 characters)
    with qtbot.waitSignal(main_window.statusBar().messageChanged, timeout=1000):
                                                                               ^
tests/test_ui.py:114:1: W293 blank line contains whitespace
    
^
tests/test_ui.py:116:80: E501 line too long (80 > 79 characters)
    with qtbot.waitSignal(main_window.statusBar().messageChanged, timeout=1000):
                                                                               ^
tests/test_ui.py:119:1: E302 expected 2 blank lines, found 1
def test_voice_command_handling(main_window, qtbot):
^
tests/test_ui.py:122:1: W293 blank line contains whitespace
    
^
tests/test_ui.py:124:80: E501 line too long (80 > 79 characters)
    with qtbot.waitSignal(main_window.statusBar().messageChanged, timeout=1000):
                                                                               ^
tests/test_ui.py:126:1: W293 blank line contains whitespace
    
^
tests/test_ui.py:130:1: E302 expected 2 blank lines, found 1
def test_window_responsiveness(main_window, qtbot):
^
tests/test_ui.py:133:1: W293 blank line contains whitespace
    
^
tests/test_ui.py:138:1: W293 blank line contains whitespace
    
^
tests/test_ui.py:143:1: E302 expected 2 blank lines, found 1
def test_agent_explain_dialog_shows_doc(qtbot, app):
^
tests/test_ui.py:151:1: E302 expected 2 blank lines, found 1
def test_learning_panel(qtbot, app):
^
tests/test_ui.py:157:1: E302 expected 2 blank lines, found 1
def test_model_zoo_dialog(qtbot, app):
^
tests/test_ui.py:160:80: E501 line too long (98 > 79 characters)
            return [{"name": "ModelA", "type": "vision", "version": "1.0", "status": "available"}]
                                                                               ^
tests/test_ui.py:166:1: E302 expected 2 blank lines, found 1
def test_settings_panel(qtbot, app):
^
tests/test_ui.py:167:80: E501 line too long (85 > 79 characters)
    config = {"ui.theme": "dark", "paths.models_dir": "models", "gpu.use_cuda": True}
                                                                               ^
tests/test_ui.py:173:1: E302 expected 2 blank lines, found 1
def test_loading_screen(qtbot, app):
^
tests/test_ui.py:179:1: E302 expected 2 blank lines, found 1
def test_onboarding_dialog(qtbot, app):
^
tests/test_ui.py:185:1: E302 expected 2 blank lines, found 1
def test_notification(qtbot, app):
^
tests/test_ui.py:191:1: E302 expected 2 blank lines, found 1
def test_plugin_manager_dialog(qtbot, app):
^
tests/test_ui.py:199:1: E302 expected 2 blank lines, found 1
def test_tour_dialog(qtbot, app):
^
tests/test_ui.py:205:1: E302 expected 2 blank lines, found 1
def test_crash_reporting_dialog(qtbot, app):
^
tests/test_ui.py:212:1: E302 expected 2 blank lines, found 1
def test_plugin_sandbox_success():
^
tests/test_ui.py:213:30: E111 indentation is not a multiple of 4
                             assert run_plugin_in_sandbox(DummyPlugin) == "ok"
                             ^
tests/test_ui.py:213:30: E117 over-indented
                             assert run_plugin_in_sandbox(DummyPlugin) == "ok"
                             ^
tests/test_ui.py:213:37: F821 undefined name 'run_plugin_in_sandbox'
                             assert run_plugin_in_sandbox(DummyPlugin) == "ok"
                                    ^
tests/test_ui.py:213:59: F821 undefined name 'DummyPlugin'
                             assert run_plugin_in_sandbox(DummyPlugin) == "ok"
                                                          ^
tests/test_ui.py:215:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_ui.py:217:13: F821 undefined name 'DummyAgent'
    agent = DummyAgent()
            ^
tests/test_ui.py:221:1: E302 expected 2 blank lines, found 1
def test_plugin_agent_integration():
^
tests/test_ui.py:229:14: F821 undefined name 'run_plugin_in_sandbox'
    result = run_plugin_in_sandbox(AgentPlugin)
             ^
tests/test_ui.py:232:1: E302 expected 2 blank lines, found 1
@pytest.mark.asyncio
^
tests/test_ui.py:235:13: F821 undefined name 'DummyAgent'
    agent = DummyAgent()
            ^
tests/test_ui.py:244:1: W293 blank line contains whitespace
                         ^
tests/test_ui.py:244:26: W292 no newline at end of file
                                                  ^
3     E111 indentation is not a multiple of 4
3     E117 over-indented
40    E128 continuation line under-indented for visual indent
18    E231 missing whitespace after ','
2     E261 at least two spaces before inline comment
17    E301 expected 1 blank line, found 0
249   E302 expected 2 blank lines, found 1
22    E305 expected 2 blank lines after class or function definition, found 1
10    E306 expected 1 blank line before a nested definition, found 0
1     E401 multiple imports on one line
3     E402 module level import not at top of file
761   E501 line too long (97 > 79 characters)
2     E712 comparison to True should be 'if cond is True:' or 'if cond:'
4     E741 ambiguous variable name 'l'
1     E999 SyntaxError: invalid syntax. Perhaps you forgot a comma?
176   F401 'os' imported but unused
1     F402 import 'config' from line 18 shadowed by loop variable
1     F541 f-string is missing placeholders
6     F811 redefinition of unused 'config' from line 18
25    F821 undefined name 'x'
15    F841 local variable 'content_restored' is assigned to but never used
129   W291 trailing whitespace
88    W292 no newline at end of file
1943  W293 blank line contains whitespace
