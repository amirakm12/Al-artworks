# Ollama Agent Setup Script for AI-Artworks
# This script sets up Ollama agents and copies model files

param(
    [string]$ModelName = "dolphin-mixtral:8x22b",
    [string]$ProjectDir = ".",
    [switch]$Verbose = $false
)

# Enable strict mode for better error handling
Set-StrictMode -Version Latest
$ErrorActionPreference = "Stop"

# Color output functions
function Write-Success { param([string]$Message) Write-Host "✅ $Message" -ForegroundColor Green }
function Write-Warning { param([string]$Message) Write-Host "⚠️  $Message" -ForegroundColor Yellow }
function Write-Error { param([string]$Message) Write-Host "❌ $Message" -ForegroundColor Red }
function Write-Info { param([string]$Message) Write-Host "ℹ️  $Message" -ForegroundColor Cyan }

function Test-OllamaInstallation {
    try {
        $ollamaVersion = ollama --version 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Success "Ollama is installed: $ollamaVersion"
            return $true
        }
    }
    catch {
        Write-Warning "Ollama command failed"
    }
    
    Write-Error "Ollama is not installed or not in PATH"
    Write-Info "Please install Ollama from: https://ollama.ai"
    return $false
}

function Get-OllamaModelPath {
    param([string]$ModelName)
    
    # Common Ollama model storage locations
    $possiblePaths = @(
        "$env:USERPROFILE\.ollama\models\blobs",
        "$env:LOCALAPPDATA\Ollama\models\blobs",
        "$env:APPDATA\Ollama\models\blobs"
    )
    
    foreach ($path in $possiblePaths) {
        if (Test-Path $path) {
            Write-Info "Found Ollama models directory: $path"
            return $path
        }
    }
    
    Write-Warning "Could not find Ollama models directory"
    return $null
}

function Copy-ModelFiles {
    param([string]$SourceDir, [string]$DestDir)
    
    if (-not (Test-Path $SourceDir)) {
        Write-Error "Source directory does not exist: $SourceDir"
        return $false
    }
    
    # Create destination directory
    if (-not (Test-Path $DestDir)) {
        New-Item -ItemType Directory -Path $DestDir -Force | Out-Null
        Write-Info "Created models directory: $DestDir"
    }
    
    # Look for GGUF files
    $ggufFiles = Get-ChildItem -Path $SourceDir -Filter "*.gguf" -Recurse
    
    if ($ggufFiles.Count -eq 0) {
        Write-Warning "No GGUF files found in $SourceDir"
        
        # Look for other model files
        $otherFiles = Get-ChildItem -Path $SourceDir -Recurse | Where-Object { 
            $_.Extension -match '\.(bin|safetensors|pt|pth)$' 
        }
        
        if ($otherFiles.Count -gt 0) {
            Write-Info "Found {} other model files".format($otherFiles.Count)
            foreach ($file in $otherFiles | Select-Object -First 5) {
                Write-Info "  - $($file.Name) ($([math]::Round($file.Length / 1MB, 2)) MB)"
            }
        }
        
        return $false
    }
    
    Write-Success "Found {} GGUF files".format($ggufFiles.Count)
    
    foreach ($file in $ggufFiles) {
        $destPath = Join-Path $DestDir $file.Name
        
        if (Test-Path $destPath) {
            Write-Info "File already exists, skipping: $($file.Name)"
            continue
        }
        
        try {
            Write-Info "Copying: $($file.Name) ($([math]::Round($file.Length / 1MB, 2)) MB)"
            Copy-Item -Path $file.FullName -Destination $destPath -Force
            Write-Success "Copied: $($file.Name)"
        }
        catch {
            Write-Error "Failed to copy $($file.Name): $($_.Exception.Message)"
        }
    }
    
    return $true
}

function Create-SampleAssets {
    param([string]$ProjectDir)
    
    $assetsDir = Join-Path $ProjectDir "assets"
    
    # Create assets directory structure
    $directories = @(
        "assets\images",
        "assets\metadata",
        "assets\templates"
    )
    
    foreach ($dir in $directories) {
        $fullPath = Join-Path $ProjectDir $dir
        if (-not (Test-Path $fullPath)) {
            New-Item -ItemType Directory -Path $fullPath -Force | Out-Null
            Write-Info "Created directory: $dir"
        }
    }
    
    # Create sample metadata JSON
    $sampleMetadata = @{
        title = "Sample AI Artwork"
        artist = "AI-Artworks System"
        medium = "Digital"
        dimensions = "1920x1080"
        year = "2024"
        description = "A sample artwork generated by the AI-Artworks system demonstrating abstract digital art techniques."
        tags = @("ai-generated", "digital-art", "abstract", "sample")
        style = "contemporary"
        color_palette = @("#FF6B6B", "#4ECDC4", "#45B7D1", "#96CEB4", "#FECA57")
        generation_params = @{
            model = "dolphin-mixtral"
            temperature = 0.7
            max_tokens = 512
            prompt = "Generate a description for abstract digital artwork"
        }
    } | ConvertTo-Json -Depth 4
    
    $metadataPath = Join-Path $ProjectDir "assets\metadata\sample_artwork.json"
    $sampleMetadata | Out-File -FilePath $metadataPath -Encoding UTF8
    Write-Success "Created sample metadata: assets\metadata\sample_artwork.json"
    
    # Create sample image placeholder (text file for now)
    $imagePlaceholder = @"
This is a placeholder for a sample artwork image.
In a real implementation, this would be a PNG/JPEG file.

Artwork Details:
- Title: Sample AI Artwork
- Style: Abstract Digital Art
- Colors: Vibrant blues, greens, and warm accents
- Composition: Geometric patterns with flowing elements

To add real images:
1. Place PNG/JPEG files in the assets\images directory
2. Update the metadata JSON files to reference the image files
3. The AI-Artworks system will load and display them
"@
    
    $imagePath = Join-Path $ProjectDir "assets\images\sample_artwork.txt"
    $imagePlaceholder | Out-File -FilePath $imagePath -Encoding UTF8
    Write-Success "Created sample image placeholder: assets\images\sample_artwork.txt"
}

function Setup-OllamaAgent {
    param([string]$ModelName)
    
    Write-Info "Setting up Ollama agent for model: $ModelName"
    
    # Check if model is already pulled
    try {
        $models = ollama list 2>$null
        if ($models -match $ModelName) {
            Write-Success "Model $ModelName is already available"
            return $true
        }
    }
    catch {
        Write-Warning "Could not check existing models"
    }
    
    # Try to pull the model
    Write-Info "Attempting to pull model: $ModelName"
    Write-Warning "This may take a long time depending on model size and internet connection..."
    
    try {
        ollama pull $ModelName
        if ($LASTEXITCODE -eq 0) {
            Write-Success "Successfully pulled model: $ModelName"
            return $true
        }
    }
    catch {
        Write-Error "Failed to pull model: $($_.Exception.Message)"
    }
    
    Write-Error "Could not set up Ollama agent for $ModelName"
    return $false
}

# Main execution
try {
    Write-Info "AI-Artworks Ollama Agent Setup"
    Write-Info "=============================="
    
    # Test Ollama installation
    if (-not (Test-OllamaInstallation)) {
        exit 1
    }
    
    # Set up project directories
    $projectPath = Resolve-Path $ProjectDir
    $modelsDir = Join-Path $projectPath "models"
    
    Write-Info "Project directory: $projectPath"
    Write-Info "Models directory: $modelsDir"
    
    # Create models directory
    if (-not (Test-Path $modelsDir)) {
        New-Item -ItemType Directory -Path $modelsDir -Force | Out-Null
        Write-Info "Created models directory"
    }
    
    # Find and copy Ollama model files
    $ollamaModelsPath = Get-OllamaModelPath -ModelName $ModelName
    if ($ollamaModelsPath) {
        Write-Info "Copying model files from Ollama cache..."
        Copy-ModelFiles -SourceDir $ollamaModelsPath -DestDir $modelsDir
    }
    
    # Set up Ollama agent
    if (Setup-OllamaAgent -ModelName $ModelName) {
        Write-Success "Ollama agent setup complete"
    } else {
        Write-Warning "Ollama agent setup failed, but continuing..."
    }
    
    # Create sample assets
    Write-Info "Creating sample assets..."
    Create-SampleAssets -ProjectDir $projectPath
    
    # Create a simple test script
    $testScript = @"
# AI-Artworks Model Test Script
# Run this to test the Ollama integration

Write-Host "Testing Ollama model: $ModelName"

try {
    `$response = ollama run $ModelName "Generate a brief description of a digital artwork featuring abstract geometric patterns."
    Write-Host "Model Response:"
    Write-Host `$response
    Write-Host ""
    Write-Host "✅ Model test successful!"
}
catch {
    Write-Host "❌ Model test failed: `$(`$_.Exception.Message)"
}
"@
    
    $testScriptPath = Join-Path $projectPath "test_model.ps1"
    $testScript | Out-File -FilePath $testScriptPath -Encoding UTF8
    Write-Success "Created model test script: test_model.ps1"
    
    Write-Success "Setup complete!"
    Write-Info ""
    Write-Info "Next steps:"
    Write-Info "1. Run test_model.ps1 to verify Ollama integration"
    Write-Info "2. Build the AI-Artworks project with scripts\build_simple.bat"
    Write-Info "3. Run the application with: ai-artworks.exe --model models\your-model.gguf"
    Write-Info ""
    
} catch {
    Write-Error "Setup failed: $($_.Exception.Message)"
    if ($Verbose) {
        Write-Host $_.Exception.StackTrace -ForegroundColor Red
    }
    exit 1
}